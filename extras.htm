<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
<title>Three.js</title>
<link rel="stylesheet" type="text/css" href="1.css">
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<object id=hhctrl classid="clsid:ADB880A6-D8FF-11CF-9377-00AA003B7A11" width=0 height=0 vspace=0 hspace=0 border=0 type="application/x-oleobject"></object>
<script type="text/javascript" src="1.js"></script>
</head>
<body>
<h2 class=head1>Дополнения</h2>


<h3 id="1">Earcut</h3>
Реализация алгоритма триангуляции (т.е. разбиения на треугольники) полигона (многоугольника). Earcut в переводе на русский язык будет "ухорез", здесь имеется ввиду способ нарезания треугольников по имеющимся координатам вершин.
Данный код - перенос из <tt><a href="https://github.com/mapbox/earcut" target="_blank">mapbox/earcut</a></tt>.<br><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="1triangulate"><span onclick="showClick(type_array)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('triangulate - триангуляция, разбиение на треугольники')" onmouseout="hide()">.triangulate</a></span>( <span onclick="showClick(type_array)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('data - данные')" onmouseout="hide()">data</a></span>, <span onclick="showClick(type_array)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('hole indices - индексы дыр')" onmouseout="hide()">holeIndices</a></span>, <span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('dim - сокращ. от англ. слова dimension - измерение')" onmouseout="hide()">dim</a></span> )</pre>
<div class=list><tt>data</tt> -- "плоский" массив координат вершин.</div>
<div class=list><tt>holeIndices</tt> -- массив индексов дыр, если они имеются.</div>
<div class=list><tt>dim</tt> -- число координат на вершину во входном массиве.</div></div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/extras/Earcut.js" target="_blank">Earcut.js на github.com</a></div><br><br>


<h3 id="2">ShapeUtils</h3>
Класс содержащий вспомогательные функции для форм.<br>
Обратите внимание, что все они являются линейными функциями, поэтому необходимо отдельно рассчитывать для <tt>x</tt>, <tt>y</tt> (и <tt>z</tt>, <tt>w</tt>, если они есть) компоненты вектора.<br><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="2area"><span onclick="showClick(type_number)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('area - область, площадь, участок')" onmouseout="hide()">.area</a></span>( contour )</pre>
<div class=list><tt>contour</tt> -- 2D polygon.</div>
Calculate area of a ( 2D ) contour polygon.<br><br>

<pre id="2isClockwise">.isClockwise ( pts ) : Boolean</pre>
<div class=list><tt>pts</tt> -- points defining a 2D polygon</div>
Note that this is a linear function so it is neccessary to calculate separately for x, y components of a polygon.<br>
Used internally by Path, ExtrudeGeometry and ShapeGeometry.<br><br>

<pre id="2triangulateShape">.triangulateShape ( contour, holes ) : null</pre>
<div class=list><tt>contour</tt> -- 2D polygon.</div>
<div class=list><tt>holes</tt> -- array of holes</div>
Used internally by ExtrudeGeometry and ShapeGeometry to calculate faces in shapes with holes.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/extras/ShapeUtils.js" target="_blank">ShapeUtils.js на github.com</a></div><br><br>


<h2 id="3">Дополнения к основным элементам <em>three.js</em></h2>

<h3 id="3.1">Curve</h3>
An abstract base class for creating a Curve object that contains methods for interpolation. For an array of Curves see CurvePath.<br><br>

<h4>Конструктор</h4>
<pre>Curve( )</pre>
Данный конструктор создает новую Curve.<br><br>

<h4>Свойства</h4>
<div class=blockindent><br>
<pre id="3.1arcLengthDivisions"><span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('arc length divisions - ')" onmouseout="hide()">.arcLengthDivisions</a></span></pre>
This value determines the amount of divisions when calculating the cumulative segment lengths of a curve via .getLengths. To ensure precision when using methods like .getSpacedPoints, it is recommended to increase .arcLengthDivisions if the curve is very large. Default is 200.
</div><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="3.1clone"><a href="#3.1" onmouseover="show('Curve.<br>clone - клонировать')" onmouseout="hide()">.clone</a>( )</pre>
Создает клон данного экземпляра кривой линии.<br><br>

<pre id="3.1computeFrenetFrames">.computeFrenetFrames ( segments : Integer, closed : Boolean ) : Object</pre>
Generates the Frenet Frames. Used in geometries like TubeGeometry or ExtrudeGeometry.<br><br>

<pre id="3.1copy"><a href="#3.1" onmouseover="show('Curve.<br>copy - копировать')" onmouseout="hide()">.copy</a>( <a href="#3.1" onmouseover="show('Curve.<br>source - источник, исходник')" onmouseout="hide()">source</a> )</pre>
Метод копирует в данный экземпляр другой объект Curve, переданный в аргументе <tt>source</tt>.<br><br>

<pre id="3.1fromJSON">.fromJSON ( json : Object ) : Curve</pre>
Copies the data from the given JSON object to this instance.<br><br>

<pre id="3.1getLength">.getLength( ) : Float</pre>
Get total curve arc length.<br><br>

<pre id="3.1getLengths">.getLengths( divisions : Integer ) : Array</pre>
Get list of cumulative segment lengths.<br><br>

<pre id="3.1getPoint">.getPoint( t : Float, optionalTarget : Vector ) : Vector</pre>
<div class=list>t - A position on the curve. Must be in the range [ 0, 1 ].</div>
<div class=list>optionalTarget — (optional) If specified, the result will be copied into this Vector, otherwise a new Vector will be created.</div>

Returns a vector for a given position on the curve.<br><br>

<pre id="3.1getPointAt">.getPointAt( u : Float, optionalTarget : Vector ) : Vector</pre>
<div class=list>u - A position on the curve according to the arc length. Must be in the range [ 0, 1 ].</div>
<div class=list>optionalTarget — (optional) If specified, the result will be copied into this Vector, otherwise a new Vector will be created.</div>
Returns a vector for a given position on the curve according to the arc length.<br><br>

<pre id="3.1getPoints">.getPoints( divisions : Integer ) : Array</pre>
<div class=list>divisions -- number of pieces to divide the curve into. Default is 5.</div>
Returns a set of divisions + 1 points using getPoint( t ).<br><br>

<pre id="3.1getSpacedPoints">.getSpacedPoints( divisions : Integer ) : Array</pre>
<div class=list>divisions -- number of pieces to divide the curve into. Default is 5.</div>
Returns a set of divisions + 1 equi-spaced points using getPointAt( u ).<br><br>

<pre id="3.1getTangent">.getTangent( t : Float ) : Vector</pre>
Returns a unit vector tangent at t. If the derived curve does not implement its tangent derivation, two points a small delta apart will be used to find its gradient which seems to give a reasonable approximation.<br><br>

<pre id="3.1getTangentAt">.getTangentAt( u : Float ) : Vector</pre>
Returns tangent at a point which is equidistant to the ends of the curve from the point given in .getTangent.<br><br>

<pre id="3.1getUtoTmapping">.getUtoTmapping( u : Float, distance : Float ) : Float</pre>
Given u in the range ( 0 .. 1 ), returns t also in the range ( 0 .. 1 ). u and t can then be used to give you points which are equidistant from the ends of the curve, using .getPoint.<br><br>

<pre id="3.1toJSON">.toJSON( ) : Object</pre>
Returns a JSON object representation of this instance.<br><br>

<pre id="3.1updateArcLengths">.updateArcLengths( ) : null</pre>
Update the cumlative segment distance cache.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/extras/Curve.js" target="_blank">Curve.js на github.com</a></div><br><br>


<span class="right_side"><a href="#3.1" title="Переход к родительскому классу"><tt>Curve &rarr;</tt></a></span>
<h3 id="3.2">CurvePath</h3>
An abstract base class further extending [page:Curve]. A CurvePath is simply an array of connected curves, but retains the api of a curve.

<h4>Конструктор</h4>
<pre>CurvePath( )</pre>
The constructor take no parameters.<br><br>


<h4>Свойства</h4>
See the base Curve class for common properties.
<div class=blockindent><br>
<pre id="3.2autoClose">.autoClose : boolean</pre>
Whether or not to automatically close the path.<br><br>

<pre id="3.2curves">.curves : array</pre>
The array of Curves.</div><br>

<h4>Методы</h4>
See the base Curve class for common methods.
<div class=blockindent><br>
<pre id="3.2add">.add ( curve : Curve ) : null</pre>
Add a curve to the .curves array.<br><br>

<pre id="3.2closePath">.closePath () : null</pre>
Adds a lineCurve to close the path.<br><br>

<pre id="3.2getCurveLengths">.getCurveLengths () : Float</pre>
Adds together the lengths of the curves in the .curves array.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/extras/CurvePath.js" target="_blank">CurvePath.js на github.com</a></div><br><br>


<h3 id="3.3">Font</h3>
Create a set of Shapes representing a font loaded in JSON format.<br>
This is used internally by the FontLoader.<br><br>

<h4>Примеры</h4>
<pre><a href="https://threejs.org/examples/webgl_geometry_text_shapes" target="_blank">geometry / text / shapes</a>
<a href="https://threejs.org/examples/webgl_shaders_vector" target="_blank">shaders / vector</a></pre><br>

<h4>Конструктор</h4>
<pre>Font( data )</pre>
<div class=list><tt>data</tt> -- JSON data representing the font.</div>
This constructor creates a new Font, which is an array of Shapes.<br><br>

<h4>Свойства</h4>
<div class=blockindent><br>
<pre id="3.3data">.data : array</pre>
The JSON data passed in the constructor.<br><br>

<pre id="3.3isFont">.isFont : Boolean</pre>
Used to check whether this or derived classes are fonts. Default is true.<br>
You should not change this, as it used internally by the renderer for optimisation.</div><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="3.3generateShapes">.generateShapes( text : String, size : Float, divisions : Integer ) : null</pre>
<div class=list>text -- string of text.</div>
<div class=list>size -- (optional) scale for the Shapes. Default is 100.</div>
<div class=list>divisions -- (optional) fineness of the Shapes. Default is 4.</div>
Creates an array of Shapes representing the text in the font.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/extras/core/Font.js" target="_blank">Font.js на github.com</a></div><br><br>


<h3 id="3.4">Interpolations</h3>

TODO<br><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="3.4CatmullRom">.CatmullRom ( t : Float, p0 : Float, p1 : Float, p2 : Float, p3 : Float ) : Float</pre>
<div class=list>t -- interpolation weight.</div>
<div class=list>p0, p1, p2, p3 -- the points defining the spline curve.</div>

Used internally by SplineCurve.<br><br>

<pre id="3.4QuadraticBezier">.QuadraticBezier( t : Float, p0 : Float, p1 : Float, p2 : Float ) : Float</pre>
<div class=list>t -- interpolation weight.</div>
<div class=list>p0, p1, p2 -- the starting, control and end points defining the curve.</div>

Used internally by QuadraticBezierCurve3, QuadraticBezierCurve and Font.<br><br>

<pre id="3.4CubicBezier">.CubicBezier ( t : Float, p0 : Float, p1 : Float, p2 : Float, p3 : Float ) : Float</pre>
<div class=list>t -- interpolation weight.</div>
<div class=list>p0, p1, p2, p3 -- the starting, control(twice) and end points defining the curve.</div>

Used internally by CubicBezierCurve3, CubicBezierCurve and Font.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/extras/core/Interpolations.js" target="_blank">Interpolations.js на github.com</a></div><br><br>


<span class="right_side"><a href="#3.2" title="Переход к родительскому классу"><tt>CurvePath &rarr;</tt></a></span>
<h3 id="3.5">Path</h3>
A 2D path representation. The class provides methods for creating paths and contours of 2D shapes similar to the 2D Canvas API.<br><br>

<h4>Пример</h4>
<pre>var path = new THREE.Path();<br>
  path.lineTo( 0, 0.8 );
  path.quadraticCurveTo( 0, 1, 0.2, 1 );
  path.lineTo( 1, 1 );<br>
  var points = path.getPoints();<br>
  var geometry = new THREE.BufferGeometry().setFromPoints( points );
  var material = new THREE.LineBasicMaterial( { color: 0xffffff } );<br>
  var line = new THREE.Line( geometry, material );
  scene.add( line );</pre><br>

<h4>Конструктор</h4>
<pre>Path( points : Array )</pre>
<div class=list>points -- (optional) array of Vector2s.</div>
Creates a Path from the points. The first point defines the offset, then successive points are added to the curves array as LineCurves.<br>
If no points are specified, an empty path is created and the .currentPoint is set to the origin.<br><br>

<h4>Свойства</h4>
Сведения об общих свойствах смотрите в описании базового класса <a href="#3.2">CurvePath</a>.
<div class=blockindent><br>
<pre id="3.5currentPoint"><span onclick="showClick(type_array)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('current point - текущая точка')" onmouseout="hide()">.currentPoint</a></span></pre>
The current offset of the path. Any new Curve added will start here.</div><br>

<h4>Методы</h4>
Сведения об общих методах смотрите в описании базового класса <a href="#3.2">CurvePath</a>.
<div class=blockindent><br>
<pre id="3.5absarc"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('absarc - сокращ. англ. слов abs(olute<br>center of the) arc - абсолютный центр дуги')" onmouseout="hide()">.absarc</a></span>( x : Float, y : Float, radius : Float, startAngle : Float, endAngle : Float, clockwise : Float )</pre>
<div class=list><tt>x</tt>, <tt>y</tt> -- координаты абсолютного центра дуги.</div>
<div class=list><tt>radius</tt> -- радиус дуги.</div>
<div class=list><tt>startAngle</tt> -- начальный угол, в радианах.</div>
<div class=list><tt>endAngle</tt> -- конечный угол, в радианах.</div>
<div class=list><tt>clockwise</tt> -- проводить ли дугу по часовой стрелке. Значением по умолчанию является <tt>false</tt>.</div>
Adds an absolutely positioned EllipseCurve to the path.<br><br>

<pre id="3.5absellipse">.absellipse ( x : Float, y : Float, xRadius : Float, yRadius : Float, startAngle : Float, endAngle : Float, clockwise : Float, rotation : Float ) : null</pre>
<div class=list><tt>x</tt>, <tt>y</tt> -- The absolute center of the ellipse.</div>
<div class=list><tt>xRadius</tt> -- The radius of the ellipse in the x axis.</div>
<div class=list><tt>yRadius</tt> -- The radius of the ellipse in the y axis.</div>
<div class=list><tt>startAngle</tt> -- начальный угол, в радианах.</div>
<div class=list><tt>endAngle</tt> -- конечный угол, в радианах.</div>
<div class=list><tt>clockwise</tt> -- проводить ли дугу по часовой стрелке. Значением по умолчанию является <tt>false</tt>.</div>
<div class=list><tt>rotation</tt> -- The rotation angle of the ellipse in radians, counterclockwise from the positive X axis. Optional, defaults to 0.</div>
Adds an absolutely positioned EllipseCurve to the path.<br><br>

<pre id="3.5arc">.arc ( x : Float, y : Float, radius : Float, startAngle : Float, endAngle : Float, clockwise : Float ) : null</pre>
<div class=list><tt>x</tt>, <tt>y</tt> -- The center of the arc offset from the last call.</div>
<div class=list><tt>radius</tt> -- радиус дуги.</div>
<div class=list><tt>startAngle</tt> -- начальный угол, в радианах.</div>
<div class=list><tt>endAngle</tt> -- конечный угол, в радианах.</div>
<div class=list><tt>clockwise</tt> -- проводить ли дугу по часовой стрелке. Значением по умолчанию является <tt>false</tt>.</div>
Adds an EllipseCurve to the path, positioned relative to .currentPoint.<br><br>

<pre id="3.5bezierCurveTo">.bezierCurveTo ( cp1X : Float, cp1Y : Float, cp2X : Float, cp2Y : Float, x : Float, y : Float ) : null</pre>
This creates a bezier curve from .currentPoint with (cp1X, cp1Y) and (cp2X, cp2Y) as control points and updates .currentPoint to x and y.<br><br>

<pre id="3.5ellipse">.ellipse ( x : Float, y : Float, xRadius : Float, yRadius : Float, startAngle : Float, endAngle : Float, clockwise : Float, rotation : Float ) : null</pre>
<div class=list><tt>x</tt>, <tt>y</tt> -- The center of the ellipse offset from the last call.</div>
<div class=list><tt>xRadius</tt> -- The radius of the ellipse in the x axis.</div>
<div class=list><tt>yRadius</tt> -- The radius of the ellipse in the y axis.</div>
<div class=list><tt>startAngle</tt> -- начальный угол, в радианах.</div>
<div class=list><tt>endAngle</tt> -- конечный угол, в радианах.</div>
<div class=list><tt>clockwise</tt> -- проводить ли дугу по часовой стрелке. Значением по умолчанию является <tt>false</tt>.</div>
<div class=list><tt>rotation</tt> -- The rotation angle of the ellipse in radians, counterclockwise from the positive X axis. Optional, defaults to 0.</div>
Adds an EllipseCurve to the path, positioned relative to .currentPoint.<br><br>

<pre id="3.5lineTo">.lineTo ( x : Float, y : Float ) : null</pre>
Connects a LineCurve from .currentPoint to x, y onto the path.<br><br>

<pre id="3.5moveTo">.moveTo ( x : Float, y : Float ) : null</pre>
Move the .currentPoint to x, y.<br><br>

<pre id="3.5quadraticCurveTo">.quadraticCurveTo ( cpX : Float, cpY : Float, x : Float, y : Float ) : null</pre>
Creates a quadratic curve from .currentPoint with cpX and cpY as control point and updates .currentPoint to x and y.<br><br>

<pre id="3.5setFromPoints">.setFromPoints ( vector2s : Array ) : null</pre>
<div class=list><tt>points</tt> - массив <a href="math.htm#18" onmouseover="show('Vector2')" onmouseout="hide()">двумерных векторов</a>.</div>
Points are added to the curves array as LineCurves.<br><br>

<pre id="3.5splineThru">.splineThru ( points : Array ) : null</pre>
<div class=list><tt>points</tt> - массив <a href="math.htm#18" onmouseover="show('Vector2')" onmouseout="hide()">двумерных векторов</a>.</div>
Connects a new SplineCurve onto the path.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/extras/core/Path.js" target="_blank">Path.js на github.com</a></div><br><br>


<span class="right_side"><a href="#3.5" title="Переход к родительскому классу"><tt>Path &rarr;</tt></a></span>
<h3 id="3.6">Shape</h3>
Defines an arbitrary 2d shape plane using paths with optional holes. It can be used with [page:ExtrudeGeometry], [page:ShapeGeometry], to get points, or to get triangulated faces.<br><br>

<h4>Пример</h4>
<pre>var heartShape = new THREE.Shape();<br>
heartShape.moveTo( 25, 25 );
heartShape.bezierCurveTo( 25, 25, 20, 0, 0, 0 );
heartShape.bezierCurveTo( 30, 0, 30, 35,30,35 );
heartShape.bezierCurveTo( 30, 55, 10, 77, 25, 95 );
heartShape.bezierCurveTo( 60, 77, 80, 55, 80, 35 );
heartShape.bezierCurveTo( 80, 35, 80, 0, 50, 0 );
heartShape.bezierCurveTo( 35, 0, 25, 25, 25, 25 );<br>
var extrudeSettings = { amount: 8, bevelEnabled: true, bevelSegments: 2, steps: 2, bevelSize: 1, bevelThickness: 1 };<br>
var geometry = new THREE.ExtrudeGeometry( heartShape, extrudeSettings );<br>
var mesh = new THREE.Mesh( geometry, new THREE.MeshPhongMaterial() );</pre>

<h5>Другие примеры</h5>
<pre><a href="https://threejs.org/examples/webgl_geometry_shapes" target="_blank">geometry / shapes</a>
<a href="https://threejs.org/examples/webgl_geometry_extrude_shapes" target="_blank">geometry / extrude / shapes</a>
<a href="https://threejs.org/examples/webgl_geometry_extrude_shapes2" target="_blank">geometry / extrude / shapes2</a></pre><br>

<h4>Конструктор</h4>
<pre>Shape( <span onclick="showClick(type_array)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('points - точки')" onmouseout="hide()">points</a></span> )</pre>
<div class=list><tt>points</tt> -- массив <a href="math.htm#18" onmouseover="show('Vector2')" onmouseout="hide()">двумерных векторов</a> (дополнительный, необязательный аргумент).</div>

Creates a Shape from the points. The first point defines the offset, then successive points are added to the curves array as LineCurves.<br>
If no points are specified, an empty shape is created and the .currentPoint is set to the origin.<br><br>

<h4>Свойства</h4>
Сведения об общих свойствах смотрите в описании базового класса <a href="#3.5">Path</a>.
<div class=blockindent><br>
<pre id="3.6holes">.holes : array</pre>
An array of paths that define the holes in the shape.<br><br>

<pre id="3.6uuid">.uuid : String</pre>
UUID of this instance. This gets automatically assigned, so this shouldn't be edited.</div><br>

<h4>Методы</h4>
Сведения об общих методах смотрите в описании базового класса <a href="#3.5">Path</a>.
<div class=blockindent><br>
<pre id="3.6extractPoints">.extractPoints ( divisions : Integer ) : Array</pre>
<div class=list><tt>divisions</tt> -- The fineness of the result.</div>

Call getPoints on the shape and the .holes array, and return an object of the form:
<pre>{
  shape
  holes
}</pre>
где <tt>shape</tt> и <tt>holes</tt> являются массивами <a href="math.htm#18" onmouseover="show('Vector2')" onmouseout="hide()">двумерных векторов</a>.<br><br>

<pre id="3.6getPointsHoles">.getPointsHoles ( divisions : Integer ) : Array</pre>
<div class=list>divisions -- The fineness of the result.</div>

Get an array of Vector2s that represent the holes in the shape.
</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/extras/core/Shape.js" target="_blank">Shape.js на github.com</a></div><br><br>


<span class="right_side"><a href="#3.2" title="Переход к родительскому классу"><tt>CurvePath &rarr;</tt></a></span>
<h3 id="3.7">ShapePath</h3>
This is class is used to convert a series of shapes to an array of Paths, for example an SVG shape to a path (see the example below). It is used internally by Font to convert a font in JSON format to a series of paths.

<h5>Другие примеры</h5>
<pre><a href="https://threejs.org/examples/webgl_geometry_extrude_shapes2" target="_blank">geometry / extrude / shapes2</a></pre><br>

<h4>Конструктор</h4>
<pre>ShapePath( )</pre>
Creates a new ShapePath. Unlike a Path, no points are passed in as the ShapePath is designed to be generated after creation.<br><br>

<h4>Свойства</h4>
<div class=blockindent><br>
<pre id="3.7subPaths">.subPaths : array</pre>
Array of Paths.<br><br>

<pre id="3.7currentPath">.currentPath : array</pre>
The current Path that is being generated.</div><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="3.7bezierCurveTo">.bezierCurveTo ( cp1X : Float, cp1Y : Float, cp2X : Float, cp2Y : Float, x : Float, y : Float ) : null</pre>
This creates a bezier curve from the currentPath's offset to x and y with cp1X, cp1Y and cp1X, cp1Y as control points and updates the currentPath's offset to x and y.<br><br>

<pre id="3.7lineTo">.lineTo ( x : Float, y : Float ) : null</pre>
This creates a line from the currentPath's offset to X and Y and updates the offset to X and Y.<br><br>

<pre id="3.7moveTo">.moveTo ( x : Float, y : Float ) : null</pre>
Starts a new Path and calls Path.moveTo( x, y ) on that Path. Also points currentPath to that Path.<br><br>

<pre id="3.7quadraticCurveTo">.quadraticCurveTo ( cpX : Float, cpY : Float, x : Float, y : Float ) : null</pre>
This creates a quadratic curve from the currentPath's offset to x and y with cpX and cpY as control point and updates the currentPath's offset to x and y.<br><br>

<pre id="3.7splineThru">.splineThru ( points : Array ) : null</pre>
<div class=list>points - An array of Vector2s</div>
Connects a new SplineCurve onto the currentPath.<br><br>

<pre id="3.7toShapes">.toShapes ( isCCW : Boolean, noHoles : Boolean ) : Array</pre>
<div class=list>isCCW -- Changes how solids and holes are generated</div>
<div class=list>noHoles -- Whether or not to generate holes</div>
Converts the subPaths array into an array of Shapes. By default solid shapes are defined clockwise (CW) and holes are defined counterclockwise (CCW). If isCCW is set to true, then those are flipped. If the paramater noHoles is set to true then all paths are set as solid shapes and isCCW is ignored.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/extras/core/Path.js" target="_blank">Path.js на github.com</a></div><br><br>


<h2 id="4">Дополнения к кривым</h2>


<span class="right_side"><a href="#4.5" title="Переход к родительскому классу"><tt>EllipseCurve &rarr;</tt></a></span>
<h3 id="4.1">ArcCurve</h3>
Псевдоним (алиас) для <a href="#4.5">EllipseCurve</a><br><br>

<h4>Свойства</h4>
Сведения об общих методах смотрите в описании базового класса <a href="#4.5">EllipseCurve</a>.
<div class=blockindent><br>
<pre id="4.1isArcCurve"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('is ArcCurve - является объектом ArcCurve')" onmouseout="hide()">.isArcCurve</a></span></pre>
Used to check whether this or derived classes are ArcCurves. Значением по умолчанию является <tt>true</tt>.<br>
You should not change this, as it used internally for optimisation.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/extras/curves/ArcCurve.js" target="_blank">ArcCurve.js на github.com</a></div><br><br>

<span class="right_side"><a href="#3.1" title="Переход к родительскому классу"><tt>Curve &rarr;</tt></a></span>
<h3 id="4.2">CatmullRomCurve3</h3>
Create a smooth 3d spline curve from a series of points using the <a href="https://en.wikipedia.org/wiki/Centripetal_Catmull-Rom_spline" target="_blank">Catmull-Rom algorithm</a>.<br><br>

<h4>Пример</h4>
<pre>// Create a closed wavey loop
// создаем замкнутый волновой цикл
var curve = new THREE.CatmullRomCurve3( [
	new THREE.Vector3( -10, 0, 10 ),
	new THREE.Vector3( -5, 5, 5 ),
	new THREE.Vector3( 0, 0, 0 ),
	new THREE.Vector3( 5, -5, 5 ),
	new THREE.Vector3( 10, 0, 10 )
] );<br>
var points = curve.getPoints( 50 );
var geometry = new THREE.BufferGeometry().setFromPoints( points );<br>
var material = new THREE.LineBasicMaterial( { color : 0xff0000 } );<br>
// Create the final object to add to the scene
// создаем конечный объект для добавления на сцену
var curveObject = new THREE.Line( geometry, material );</pre>
<h5>Другие примеры</h5>
<pre><a href="https://threejs.org/examples/webgl_geometry_extrude_splines" target="_blank">geometry / extrude / splines</a></pre><br>

<h4>Конструктор</h4>
<pre>CatmullRomCurve3( points : Array, closed : Boolean, curveType : String, tension : Float )</pre>
<div class=list><tt>points</tt> – An array of Vector3 points</div>
<div class=list><tt>closed</tt> – Whether the curve is closed. Значение по умолчанию является <tt>false</tt>.</div>
<div class=list><tt>curveType</tt> – Type of the curve. Default is centripetal.</div>
<div class=list><tt>tension</tt> – Tension of the curve. Значение по умолчанию равно <tt>0.5</tt>.</div><br>

<h4>Свойства</h4>
Сведения об общих свойствах смотрите в описании базового класса <a href="#3.1">Curve</a>.
<div class=blockindent><br>
<pre id="4.2isCatmullRomCurve3">.isCatmullRomCurve3 : Boolean</pre>
Used to check whether this or derived classes are CatmullRomCurve3s. Default is true.<br>
You should not change this, as it used internally for optimisation.<br><br>

<pre id="4.2points">.points : Array</pre>
The array of Vector3 points that define the curve. It needs at least two entries.<br><br>

<pre id="4.2closed">.closed : Boolean</pre>
The curve will loop back onto itself when this is true.<br><br>

<pre id="4.2curveType">.curveType : String</pre>
Possible values are centripetal, chordal and catmullrom.<br><br>

<pre id="4.2tension">.tension : float</pre>
When .type is catmullrom, defines catmullrom's tension.</div><br>

<h4>Методы</h4>
Сведения об общих методах смотрите в описании базового класса <a href="#3.1">Curve</a>.<br><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/extras/curves/CatmullRomCurve3.js" target="_blank">CatmullRomCurve3.js на github.com</a></div><br><br>


<span class="right_side"><a href="#3.1" title="Переход к родительскому классу"><tt>Curve &rarr;</tt></a></span>
<h3 id="4.3">CubicBezierCurve</h3>
Create a smooth 2d <a href="http://en.wikipedia.org/wiki/B%C3%A9zier_curve#mediaviewer/File:Bezier_curve.svg" target="_blank">cubic bezier curve</a>.
Статья Википедии <a href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve" target="_blank">о кривых Безье</a> на английском языке.
Статья Википедии <a href="https://ru.wikipedia.org/wiki/%D0%9A%D1%80%D0%B8%D0%B2%D0%B0%D1%8F_%D0%91%D0%B5%D0%B7%D1%8C%D0%B5" target="_blank">о кривых Безье</a> на русском языке.<br><br>

<h4>Пример</h4>
<pre>var curve = new THREE.CubicBezierCurve(
  new THREE.Vector2( -10, 0 ),
  new THREE.Vector2( -5, 15 ),
  new THREE.Vector2( 20, 15 ),
  new THREE.Vector2( 10, 0 )
);<br>
var points = curve.getPoints( 50 );
var geometry = new THREE.BufferGeometry().setFromPoints( points );<br>
var material = new THREE.LineBasicMaterial( { color : 0xff0000 } );<br>
// Create the final object to add to the scene
// создаем конечный объект для добавления на сцену
var curveObject = new THREE.Line( geometry, material );</pre>

<h4>Конструктор</h4>
<pre>CubicBezierCurve ( <a href="math.htm#18" onmouseover="show('Vector2.<br>v0 - сокращ. англ. слов vector с индексом 0')" onmouseout="hide()">v0</a>, <a href="math.htm#18" onmouseover="show('Vector2.<br>v1 - сокращ. англ. слов vector с индексом 1')" onmouseout="hide()">.v1</a>, <a href="math.htm#18" onmouseover="show('Vector2.<br>v2 - сокращ. англ. слов vector с индексом 2')" onmouseout="hide()">.v2</a>, <a href="math.htm#18" onmouseover="show('Vector2.<br>v3 - сокращ. англ. слов vector с индексом 3')" onmouseout="hide()">.v3</a> )</pre>
<div class=list><tt>v0</tt> – начальная точка.</div>
<div class=list><tt>v1</tt> – первая контрольная точка.</div>
<div class=list><tt>v2</tt> – вторая контрольная точка.</div>
<div class=list><tt>v3</tt> – конечная точка.</div><br>

<h4>Свойства</h4>
Сведения об общих свойствах смотрите в описании базового класса <a href="#3.1">Curve</a>.
<div class=blockindent><br>
<pre id="4.3isCubicBezierCurve"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('is CubicBezierCurve - ')" onmouseout="hide()">.isCubicBezierCurve</a></span></pre>
Used to check whether this or derived classes are CubicBezierCurves. Default is true.<br>
You should not change this, as it used internally for optimisation.<br><br>

<pre id="4.3v0"><a href="math.htm#18" onmouseover="show('Vector2.<br>v0 - сокращ. англ. слов vector с индексом 0')" onmouseout="hide()">.v0</a></pre>
Начальная точка.<br><br>

<pre id="4.3v1"><a href="math.htm#18" onmouseover="show('Vector2.<br>v1 - сокращ. англ. слов vector с индексом 1')" onmouseout="hide()">.v1</a></pre>
Первая контрольная точка.<br><br>

<pre id="4.3v2"><a href="math.htm#18" onmouseover="show('Vector2.<br>v2 - сокращ. англ. слов vector с индексом 2')" onmouseout="hide()">.v2</a></pre>
Вторая контрольная точка.<br><br>

<pre id="4.3v3"><a href="math.htm#18" onmouseover="show('Vector2.<br>v3 - сокращ. англ. слов vector с индексом 3')" onmouseout="hide()">.v3</a></pre>
Конечная точка.</div><br>

<h4>Методы</h4>
Сведения об общих методах смотрите в описании базового класса <a href="#3.1">Curve</a>.<br><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/extras/curves/CubicBezierCurve.js" target="_blank">CubicBezierCurve.js на github.com</a></div><br><br>


<span class="right_side"><a href="#3.1" title="Переход к родительскому классу"><tt>Curve &rarr;</tt></a></span>
<h3 id="4.4">CubicBezierCurve3</h3>
Create a smooth 3d <a href="http://en.wikipedia.org/wiki/B%C3%A9zier_curve#mediaviewer/File:Bezier_curve.svg" target="_blank">cubic bezier curve</a>.
Статья Википедии <a href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve" target="_blank">о кривых Безье</a> на английском языке.
Статья Википедии <a href="https://ru.wikipedia.org/wiki/%D0%9A%D1%80%D0%B8%D0%B2%D0%B0%D1%8F_%D0%91%D0%B5%D0%B7%D1%8C%D0%B5" target="_blank">о кривых Безье</a> на русском языке.<br><br>

<h4>Пример</h4>
<pre>var curve = new THREE.CubicBezierCurve3(
  new THREE.Vector3( -10, 0, 0 ),
  new THREE.Vector3( -5, 15, 0 ),
  new THREE.Vector3( 20, 15, 0 ),
  new THREE.Vector3( 10, 0, 0 )
);<br>
var points = curve.getPoints( 50 );
var geometry = new THREE.BufferGeometry().setFromPoints( points );<br>
var material = new THREE.LineBasicMaterial( { color : 0xff0000 } );<br>
// Create the final object to add to the scene
// создаем конечный объект для добавления на сцену
var curveObject = new THREE.Line( geometry, material );</pre>

<h4>Конструктор</h4>
<pre>CubicBezierCurve3 ( <a href="math.htm#19" onmouseover="show('Vector3.<br>v0 - сокращ. англ. слов vector с индексом 0')" onmouseout="hide()">v0</a>, <a href="math.htm#19" onmouseover="show('Vector3.<br>v1 - сокращ. англ. слов vector с индексом 1')" onmouseout="hide()">.v1</a>, <a href="math.htm#19" onmouseover="show('Vector3.<br>v2 - сокращ. англ. слов vector с индексом 2')" onmouseout="hide()">.v2</a>, <a href="math.htm#19" onmouseover="show('Vector3.<br>v3 - сокращ. англ. слов vector с индексом 3')" onmouseout="hide()">.v3</a> )</pre>
<div class=list><tt>v0</tt> – начальная точка.</div>
<div class=list><tt>v1</tt> – первая контрольная точка.</div>
<div class=list><tt>v2</tt> – вторая контрольная точка.</div>
<div class=list><tt>v3</tt> – конечная точка.</div><br>

<h4>Свойства</h4>
Сведения об общих свойствах смотрите в описании базового класса <a href="#3.1">Curve</a>.
<div class=blockindent><br>
<pre id="4.4isCubicBezierCurve3"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('is CubicBezierCurve - ')" onmouseout="hide()">.isCubicBezierCurve</a></span></pre>
Used to check whether this or derived classes are CubicBezierCurves. Default is true.<br>
You should not change this, as it used internally for optimisation.<br><br>

<pre id="4.4v0"><a href="math.htm#19" onmouseover="show('Vector3.<br>v0 - сокращ. англ. слов vector с индексом 0')" onmouseout="hide()">.v0</a></pre>
Начальная точка.<br><br>

<pre id="4.4v1"><a href="math.htm#19" onmouseover="show('Vector3.<br>v1 - сокращ. англ. слов vector с индексом 1')" onmouseout="hide()">.v1</a></pre>
Первая контрольная точка.<br><br>

<pre id="4.4v2"><a href="math.htm#19" onmouseover="show('Vector3.<br>v2 - сокращ. англ. слов vector с индексом 2')" onmouseout="hide()">.v2</a></pre>
Вторая контрольная точка.<br><br>

<pre id="4.4v3"><a href="math.htm#19" onmouseover="show('Vector3.<br>v3 - сокращ. англ. слов vector с индексом 3')" onmouseout="hide()">.v3</a></pre>
Конечная точка.</div><br>

<h4>Методы</h4>
Сведения об общих методах смотрите в описании базового класса <a href="#3.1">Curve</a>.<br><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/extras/curves/CubicBezierCurve3.js" target="_blank">CubicBezierCurve3.js на github.com</a></div><br><br>


<span class="right_side"><a href="#3.1" title="Переход к родительскому классу"><tt>Curve &rarr;</tt></a></span>
<h3 id="4.5">EllipseCurve</h3>
Creates a 2d curve in the shape of an ellipse. Setting the xRadius equal to the yRadius will result in a circle.<br><br>

<h4>Пример</h4>
<pre>var curve = new THREE.EllipseCurve(
	0,  0,            // ax, aY
	10, 10,           // xRadius, yRadius
	0,  2 * Math.PI,  // aStartAngle, aEndAngle
	false,            // aClockwise
	0                 // aRotation
);<br>
var points = curve.getPoints( 50 );
var geometry = new THREE.BufferGeometry().setFromPoints( points );<br>
var material = new THREE.LineBasicMaterial( { color : 0xff0000 } );<br>
// Create the final object to add to the scene
// создаем конечный объект для добавления на сцену
var ellipse = new THREE.Line( geometry, material );</pre><br>

<h4>Конструктор</h4>
<pre>EllipseCurve( <span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('')" onmouseout="hide()">aX</a></span>, <span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('')" onmouseout="hide()">aY</a></span>, <span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('')" onmouseout="hide()">xRadius</a></span>, <span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('')" onmouseout="hide()">yRadius</a></span>, <span onclick="showClick(type_rad)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('')" onmouseout="hide()">aStartAngle</a></span>, <span onclick="showClick(type_rad)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('')" onmouseout="hide()">aEndAngle</a></span>, <span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('')" onmouseout="hide()">aClockwise</a></span>, <span onclick="showClick(type_rad)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('')" onmouseout="hide()">aRotation</a></span> )</pre>
<div class=list>aX – The X center of the ellipse. Значение по умолчанию равно <tt>0</tt>.</div>
<div class=list>aY – The Y center of the ellipse. Значение по умолчанию равно <tt>0</tt>.</div>
<div class=list>xRadius – The radius of the ellipse in the x direction. Значение по умолчанию равно <tt>1</tt>.</div>
<div class=list>yRadius – The radius of the ellipse in the y direction. Значение по умолчанию равно <tt>1</tt>.</div>
<div class=list>aStartAngle – The start angle of the curve in radians starting from the middle right side. Значение по умолчанию равно <tt>0</tt>.</div>
<div class=list>aEndAngle – The end angle of the curve in radians starting from the middle right side. Значением по умолчанию является <tt>2&#215;Math.PI</tt>.</div>
<div class=list>aClockwise – рисовать ли эллипс в направлении по часовой стрелке. Значением по умолчанию является <tt>false</tt>.</div>
<div class=list>aRotation – The rotation angle of the ellipse in radians, counterclockwise from the positive X axis (optional). Значение по умолчанию равно <tt>0</tt>.</div>
<div class=note><b>Примечание:</b> When going clockwise it's best to set the start angle to (Math.PI * 2) and then work towards lower numbers.</div><br>

<h4>Свойства</h4>
Сведения об общих свойствах смотрите в описании базового класса <a href="#3.1">Curve</a>.
<div class=blockindent><br>
<pre id="4.5aX">.aX : Float</pre>
The X center of the ellipse.<br><br>

<pre id="4.5aY">.aY : Float</pre>
The Y center of the ellipse.<br><br>

<pre id="4.5xRadius">.xRadius : Radians</pre>
The radius of the ellipse in the x direction.<br><br>

<pre id="4.5yRadius">.yRadius : Radians</pre>
The radius of the ellipse in the y direction.<br><br>

<pre id="4.5aStartAngle">.aStartAngle : Float</pre>
The start angle of the curve in radians starting from the middle right side.<br><br>

<pre id="4.5aEndAngle">.aEndAngle : Float</pre>
The end angle of the curve in radians starting from the middle right side.<br><br>

<pre id="4.5aClockwise">.aClockwise : Boolean</pre>
Whether the ellipse is drawn clockwise.

<pre id="4.5aRotation">.aRotation : Float</pre>
The rotation angle of the ellipse in radians, counterclockwise from the positive X axis (optional). Default is 0.

<pre id="4.5isEllipseCurve">.isEllipseCurve : Boolean</pre>
Used to check whether this or derived classes are ellipses. Default is true.<br>

You should not change this, as it used internally for optimisation.</div><br>

<h4>Методы</h4>
Сведения об общих методах смотрите в описании базового класса <a href="#3.1">Curve</a>.<br><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/extras/curves/EllipseCurve.js" target="_blank">EllipseCurve.js на github.com</a></div><br><br>


<a name="4.7"></a>
		[page:Curve] &rarr;

		<h1>[name]</h1>

		<div class="desc">A curve representing a 2d line segment</div>

  <h4>Конструктор</h4>


		<h3>[name]( [page:Vector2 v1], [page:Vector2 v2] )</h3>
		<div>
			v1 – The start point<br/>
			v2 - The end point
		</div>


  <h4>Свойства</h4>

		<h3>[property:Vector2 v1]</h3>
		<h3>[property:Vector2 v2]</h3>


  <h4>Методы</h4>

		<h3>See [page:Curve] for inherited methods</h3>


  <h4>Исходники</h4>

		[link:https://github.com/mrdoob/three.js/blob/master/src/[path].js src/[path].js]<br><br>

<a name="4.8"></a>
		[page:Curve] &rarr;

		<h1>[name]</h1>

		<div class="desc">A curve representing a 3d line segment</div>

  <h4>Конструктор</h4>


		<h3>[name]( [page:Vector3 v1], [page:Vector3 v2] )</h3>
		<div>
			v1 – The start point<br/>
			v2 - The end point
		</div>


  <h4>Свойства</h4>

		<h3>[property:Vector3 v1]</h3>
		<h3>[property:Vector3 v2]</h3>


  <h4>Методы</h4>

		<h3>See [page:Curve] for inherited methods</h3>

  <h4>Исходники</h4>

		[link:https://github.com/mrdoob/three.js/blob/master/src/[path].js src/[path].js]<br><br>

<a name="4.9"></a>
		[page:Curve] &rarr;

		<h1>[name]</h1>

		<div class="desc">
			Create a smooth 2d <a href="http://en.wikipedia.org/wiki/B%C3%A9zier_curve#mediaviewer/File:B%C3%A9zier_2_big.gif" target="_blank">quadratic bezier curve</a>.
		</div>

  <h4>Пример</h4>

<pre>
var curve = new THREE.QuadraticBezierCurve(
	new THREE.Vector3( -10, 0, 0 ),
	new THREE.Vector3( 20, 15, 0 ),
	new THREE.Vector3( 10, 0, 0 )
);

var path = new THREE.Path( curve.getPoints( 50 ) );

var geometry = path.createPointsGeometry( 50 );
var material = new THREE.LineBasicMaterial( { color : 0xff0000 } );

//Create the final Object3d to add to the scene
var curveObject = new THREE.Line( geometry, material );
</pre>

  <h4>Конструктор</h4>


		<h3>[name]( [page:Vector2 v0], [page:Vector2 v1], [page:Vector2 v2] )</h3>
		<div>
			[page:Vector2 v0] – The starting point<br/>
			[page:Vector2 v1] – The middle control point<br/>
			[page:Vector2 v2] – The ending point<br/>
		</div>


  <h4>Свойства</h4>


		<h3>[property:Vector2 v0]</h3>

		<h3>[property:Vector2 v1]</h3>

		<h3>[property:Vector2 v2]</h3>


  <h4>Методы</h4>


		<h3>See [page:Curve] for inherited methods</h3>

  <h4>Исходники</h4>

		[link:https://github.com/mrdoob/three.js/blob/master/src/[path].js src/[path].js]<br><br>

<a name="4.10"></a>
		[page:Curve] &rarr;

		<h1>[name]</h1>

		<div class="desc">
			Create a smooth 3d <a href="http://en.wikipedia.org/wiki/B%C3%A9zier_curve#mediaviewer/File:B%C3%A9zier_2_big.gif" target="_blank">quadratic bezier curve</a>.
		</div>

  <h4>Пример</h4>

<pre>
var curve = new THREE.QuadraticBezierCurve3(
	new THREE.Vector3( -10, 0, 0 ),
	new THREE.Vector3( 20, 15, 0 ),
	new THREE.Vector3( 10, 0, 0 )
);

var geometry = new THREE.Geometry();
geometry.vertices = curve.getPoints( 50 );

var material = new THREE.LineBasicMaterial( { color : 0xff0000 } );

// Create the final Object3d to add to the scene
var curveObject = new THREE.Line( geometry, material );
</pre>

  <h4>Конструктор</h4>


		<h3>[name]( [page:Vector3 v0], [page:Vector3 v1], [page:Vector3 v2] )</h3>
		<div>
			[page:Vector3 v0] – The starting point<br/>
			[page:Vector3 v1] – The middle control point<br/>
			[page:Vector3 v2] – The ending point<br/>
		</div>



<h4>Свойства</h4>

		<h3>[property:Vector3 v0]</h3>

		<h3>[property:Vector3 v1]</h3>

		<h3>[property:Vector3 v2]</h3>


  <h4>Методы</h4>


		<h3>See [page:Curve] for inherited methods</h3>

  <h4>Исходники</h4>

		[link:https://github.com/mrdoob/three.js/blob/master/src/[path].js src/[path].js]<br><br>

<a name="4.11"></a>
		[page:Curve] &rarr;

		<h1>[name]</h1>

		<div class="desc">Create a smooth 2d spline curve from a series of points</div>

  <h4>Пример</h4>

<pre>
// Create a sine-like wave
var curve = new THREE.SplineCurve( [
	new THREE.Vector2( -10, 0 ),
	new THREE.Vector2( -5, 5 ),
	new THREE.Vector2( 0, 0 ),
	new THREE.Vector2( 5, -5 ),
	new THREE.Vector2( 10, 0 )
] );

var path = new THREE.Path( curve.getPoints( 50 ) );

var geometry = path.createPointsGeometry( 50 );
var material = new THREE.LineBasicMaterial( { color : 0xff0000 } );

// Create the final Object3d to add to the scene
var splineObject = new THREE.Line( geometry, material );
</pre>

<h4>Конструктор</h4>
<h3>[name]( [page:Array points] )</h3>
		<div>points – An array of [page:Vector2] points</div>

<h4>Свойства</h4>
<h3>[property:Array points]</h3>

<h4>Методы</h4>
See [page:Curve] for inherited methods

<h4>Исходники</h4>

		[link:https://github.com/mrdoob/three.js/blob/master/src/[path].js src/[path].js]<br><br>

<a name="4.12"></a>
		[page:Curve] &rarr;

		<h1>[name]</h1>

		<div class="desc">Create a smooth 3d spline curve from a series of points</div>

<h4>Пример</h4>

<pre>
//Create a closed bent a sine-like wave
var curve = new THREE.SplineCurve3( [
	new THREE.Vector3( -10, 0, 10 ),
	new THREE.Vector3( -5, 5, 5 ),
	new THREE.Vector3( 0, 0, 0 ),
	new THREE.Vector3( 5, -5, 5 ),
	new THREE.Vector3( 10, 0, 10 )
] );

var geometry = new THREE.Geometry();
geometry.vertices = curve.getPoints( 50 );

var material = new THREE.LineBasicMaterial( { color : 0xff0000 } );

//Create the final Object3d to add to the scene
var splineObject = new THREE.Line( geometry, material );
</pre>

		<h3>[example:webgl_geometry_extrude_splines geometry / extrude / splines ] (choose PipeSpline)</h3>

<h4>Конструктор</h4>
<h3>[name]( [page:Array points] )</h3>
		<div>points – An array of [page:Vector3] points</div>


  <h4>Свойства</h4>

		<h3>[property:Array points]</h3>

<h4>Методы</h4>
See [page:Curve] for inherited methods

<h4>Исходники</h4>
[link:https://github.com/mrdoob/three.js/blob/master/src/[path].js src/[path].js]<br><br>


<h2 id="5">Дополнения к объектам</h2>

<span class="right_side"><a href="core.htm#14" title="Переход к родительскому классу"><tt>Object3D &rarr;</tt></a></span>
<h3 id="5.1">ImmediateRenderObject</h3>
Базовый класс для немедленной визуализации объектов.<br><br>

<h4>Конструктор</h4>
<pre>ImmediateRenderObject( )</pre>
Конструктор создает новый ImmediateRenderObject.<br><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="5.1render"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('render - визуализировать')" onmouseout="hide()">.render</a></span>( <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('render callback - (функция) обратного вызова (для) визуализации')" onmouseout="hide()">renderCallback</a></span> )</pre>
<div class=list><tt>renderCallback</tt> -- A function to render the generated object.</div>
This function needs to be overridden to start the creation of the object and should call renderCallback when finished.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/extras/objects/ImmediateRenderObject.js" target="_blank">ImmediateRenderObject.js на github.com</a></div><br><br>

<br><br>
</body></html>
