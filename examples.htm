<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
<title>Three.js</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<link rel="stylesheet" type="text/css" href="1.css">
<script type="text/javascript" src="1.js"></script>
</head>
<body>
<h2 class=head1>Примеры</h2>

<h2 id="1">Контролы</h2>
<h3 id="1.1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OrbitControls</h3>
Орбитальный контрол (элемент управления) позволяет камере вращаться вокруг цели.<br>
Для его использования, как и всех файлов в директории <tt>/examples</tt>, нужно будет отдельно включить этот файл в HTML-код.<br><br>
<h4>Пример</h4>
<pre>var renderer = new THREE.WebGLRenderer();
renderer.setSize( window.innerWidth, window.innerHeight );
document.body.appendChild( renderer.domElement );<br>
var scene = new THREE.Scene();<br>
var  camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 10000 );<br>
var controls = new THREE.OrbitControls( camera );<br>
// controls.update() must be called after any manual changes to the camera's transform
// после любых ручных изменений состояния камеры должен быть вызван controls.update()
camera.position.set( 0, 20, 100 );
controls.update();<br>
function animate() {<br>
  requestAnimationFrame( animate );<br>
  // required if controls.enableDamping or controls.autoRotate are set to true
  // если controls.enableDamping или controls.autoRotate установлен как true, необходимо
  controls.update();<br>
  renderer.render( scene, camera );<br>
}</pre>
<h5>Другие примеры:</h5>
<pre><a href="https://threejs.org/examples/#misc_controls_orbit" target="_blank">misc / controls / orbit</a></pre><br>

<h4>Конструктор</h4>
<pre>OrbitControls( <a href="cameras.htm#1" onmouseover="show('Camera.<br>object - объект')" onmouseout="hide()">object</a>, <span class="lnk" onmouseover="show('domElement - элемент DOM (от англ. Document Object Model — «объектная модель документа»)')" onmouseout="hide()">domElement</span> )</pre>
<div class=list><tt><a href="cameras.htm#1" onmouseover="show('Camera.<br>object - объект')" onmouseout="hide()">object</a></tt> - камера, которой нужно управлять (обязательный аргумент).</div>

<div class=list><tt><span class="lnk" onmouseover="show('domElement - элемент DOM (от англ. Document Object Model — «объектная модель документа»)')" onmouseout="hide()">domElement</span></tt> - элемент HTML, используемый для прослушивателей (приемников) событий (дополнительный, необязательный аргумент).
По умолчанию это весь документ целиком, однако, если нужно чтобы элементы управления (контролы) работали от какого-либо определенного элемента (например, <tt>&lt;canvas&gt;</tt> - холст), укажите его в этом аргументе.<br>
Статья о <a href="https://ru.wikipedia.org/wiki/Document_Object_Model" target="_blank">DOM</a> в Википедии.</div><br>


<h4>Свойства</h4>
<div class=blockindent><br>
<pre id="1autoRotate"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('auto rotate - автоматическое вращение')" onmouseout="hide()">.autoRotate</a></span></pre>
Для автоматического вращения вокруг цели установите значение данного свойства как <tt>true</tt>.<br>
Обратите внимание, если это свойство включено, в цикле анимации нужно вызывать метод <tt><a href="#1update" onmouseover="show('OrbitControls.update')" onmouseout="hide()">update</a></tt>.<br><br>

<pre id="1autoRotateSpeed"><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('auto rotate speed - скорость автоматического вращения')" onmouseout="hide()">.autoRotateSpeed</a></span></pre>
Свойство определяет скорость вращения камеры вокруг цели, если свойство <tt><a href="#1autoRotate" onmouseover="show('OrbitControls.autoRotate')" onmouseout="hide()">autoRotate</a></tt> установлено как <tt>true</tt>.
Значение по умолчанию равно <tt>2.0</tt>, что равно 30 секундам на один оборот при 60 кадрах в секунду.<br>
Обратите внимание, если свойство <tt><a href="#1autoRotate" onmouseover="show('OrbitControls.autoRotate')" onmouseout="hide()">autoRotate</a></tt> включено, в цикле анимации нужно вызывать метод <tt><a href="#1update" onmouseover="show('OrbitControls.update')" onmouseout="hide()">update</a></tt>.<br><br>

<pre id="1dampingFactor"><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('damping factor - коэффициент демпфирования')" onmouseout="hide()">.dampingFactor</a></span></pre>
The damping inertia used if .enableDamping is set to true.<br>
Обратите внимание, для работы этого свойства в цикле анимации нужно вызывать метод <tt><a href="#1update" onmouseover="show('OrbitControls.update')" onmouseout="hide()">update</a></tt>.<br><br>

<pre id="1domElement">.domElement</pre>
The HTMLDOMElement used to listen for mouse / touch events. This must be passed in the constructor; changing it here will not set up new event listeners.<br>Default is the whole document.<br><br>

<pre id="1enabled">.enabled</pre>
Whether or not the controls are enabled.<br><br>

<pre id="1enableDamping">.enableDamping</pre>
Set to true to enable damping (inertia), which can be used to give a sense of weight to the controls. Default is false.<br>
Note that if this is enabled, you must call .update () in your animation loop.<br><br>

<pre id="1enableKeys">.enableKeys</pre>
Enable or disable the use of keyboard controls.<br><br>

<pre id="1enablePan">.enablePan</pre>
Enable or disable camera panning. Default is true.<br><br>

<pre id="1enableRotate">.enableRotate</pre>
Enable or disable horizontal and vertical rotation of the camera. Default is true.<br>
Note that it is possible to disable a single axis by setting the min and max of the polar angle or azimuth angle to the same value, which will cause the vertical or horizontal rotation to be fixed at that value.<br><br>

<pre id="1enableZoom">.enableZoom</pre>
Enable or disable zooming (dollying) of the camera.<br><br>

<pre id="1keyPanSpeed">.keyPanSpeed</pre>
How fast to pan the camera when the keyboard is used. Default is 7.0 pixels per keypress.<br><br>

<pre id="1keys">.keys</pre>
This object contains references to the keycodes for controlling camera panning. Default is the 4 arrow keys.
<pre>controls.keys = {
  LEFT: 37, //left arrow
  UP: 38, // up arrow
  RIGHT: 39, // right arrow
  BOTTOM: 40 // down arrow
}</pre>
See this page for a full list of keycodes.<br>

<pre id="1maxAzimuthAngle">.maxAzimuthAngle</pre>
How far you can orbit horizontally, upper limit. Range is - Math.PI to Math.PI ( or Infinity for no limit ) and default is Infinity;

<pre id="1maxDistance">.maxDistance</pre>
How far you can dolly out ( PerspectiveCamera only ). Default is Infinity.<br><br>

<pre id="1maxPolarAngle">.maxPolarAngle</pre>
How far you can orbit vertically, upper limit. Range is 0 to Math.PI radians, and default is Math.PI.<br><br>

<pre id="1maxZoom">.maxZoom</pre>
How far you can zoom out ( OrthographicCamera only ). Default is Infinity.<br><br>

<pre id="1minAzimuthAngle">.minAzimuthAngle</pre>
How far you can orbit horizontally, lower limit. Range is - Math.PI to Math.PI ( or - Infinity for no limit ) and default is - Infinity;<br><br>

<pre id="1minDistance">.minDistance</pre>
How far you can dolly in ( PerspectiveCamera only ). Default is 0.

<pre id="1minPolarAngle">.minPolarAngle</pre>
How far you can orbit vertically, lower limit. Range is 0 to Math.PI radians, and default is 0.<br><br>

<pre id="1minZoom">.minZoom</pre>
How far you can zoom in ( OrthographicCamera only ). Default is 0.<br><br>

<pre id="1mouseButtons">.mouseButtons</pre>
This object contains references to the mouse buttons used for the controls.
<pre>controls.mouseButtons = {
  ORBIT: THREE.MOUSE.LEFT,
  ZOOM: THREE.MOUSE.MIDDLE,
  PAN: THREE.MOUSE.RIGHT
}</pre>

<pre id="1object">.object</pre>
The camera ( or other object ) that is being controlled.<br><br>

<pre id="1position0">.position0</pre>
Used internally by the .saveState and .reset methods.<br><br>

<pre id="1rotateSpeed">.rotateSpeed</pre>
Speed of rotation. Default is 1.<br><br>

<pre id="1target0">.target0</pre>
Used internally by the .saveState and .reset methods.<br><br>

<pre id="1target">.target</pre>
The focus point of the controls, the .object orbits around this. It can be updated manually at any point to change the focus of the controls.<br><br>

<pre id="1zoom0">.zoom0</pre>
Used internally by the .saveState and .reset methods.<br><br>

<pre id="1zoomSpeed">.zoomSpeed</pre>
Speed of zooming / dollying. Default is 1.</div><br>


<h4>Методы</h4>
<div class=blockindent><br>
<pre id="1dispose">.dispose( )</pre>
Remove all the event listeners.<br><br>

<pre id="1getAzimuthalAngle">.getAzimuthalAngle( )</pre>
Get the current horizontal rotation, in radians.<br><br>

<pre id="1getPolarAngle">.getPolarAngle( )</pre>
Get the current vertical rotation, in radians.<br><br>

<pre id="1reset">.reset( )</pre>
Reset the controls to their state from either the last time the .saveState was called, or the initial state.<br><br>

<pre id="1saveState">.saveState( )</pre>
Save the current state of the controls. This can later be recovered with .reset.<br><br>

<pre id="1update">.update( )</pre>
Update the controls. Must be called after any manual changes to the camera's transform, or in the update loop if .autoRotate or .enableDamping are set.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/controls/OrbitControls.js" target="_blank">OrbitControls.js на github.com</a></div><br><br>




<h2 id="2">Геометрические элементы</h2>


<span class="right_side"><a href="core.htm#2" title="Переход к родительскому классу"><tt>BufferGeometry &rarr;</tt></a></span>
<h3 id="2.1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ConvexBufferGeometry</h3>

ConvexBufferGeometry can be used to generate a convex hull for a given array of 3D points.
The average time complexity for this task is considered to be O(nlog(n)).

<h4>Пример</h4>
<pre>var geometry = new THREE.ConvexBufferGeometry( points );
var material = new THREE.MeshBasicMaterial( {color: 0x00ff00} );
var mesh = new THREE.Mesh( geometry, material );
scene.add( mesh );</pre>
<h5>Другие примеры:</h5>
<pre><a href="https://threejs.org/examples/#webgl_geometry_convex" target="_blank">geometry / convex</a></pre><br>

<h4>Конструктор</h4>
<pre>ConvexBufferGeometry( <span onclick="showClick(type_array)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('points - точки')" onmouseout="hide()">points</a></span> )</pre>
<div class=list><tt><span onclick="showClick(type_array)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('points - точки')" onmouseout="hide()">points</a></span></tt>
 — массив <a href="math.htm#19" onmouseover="show('Vector3')" onmouseout="hide()">трехмерных векторов</a>, that the resulting convex hull will contain.</div>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/geometries/ConvexGeometry.js" target="_blank">ConvexGeometry.js на github.com</a></div><br><br>


<span class="right_side"><a href="core.htm#7" title="Переход к родительскому классу"><tt>Geometry &rarr;</tt></a></span>
<h3 id="2.2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ConvexGeometry</h3>
ConvexGeometry can be used to generate a convex hull for a given array of 3D points.
			The average time complexity for this task is considered to be O(nlog(n)).

<h4>Пример</h4>
<pre>var geometry = new THREE.ConvexGeometry( points );
var material = new THREE.MeshBasicMaterial( {color: 0x00ff00} );
var mesh = new THREE.Mesh( geometry, material );
scene.add( mesh );</pre><br>
<h5>Другие примеры:</h5>
<pre><a href="https://threejs.org/examples/#webgl_geometry_convex" target="_blank">geometry / convex</a></pre><br>

<h4>Конструктор</h4>
<pre>ConvexGeometry( <a class=popupspot href="JavaScript:hhctrl.TextPopup(type_array,'Arial,9',10,10,0xffffff,0xd69967)" title="points - точки">points</a> )</pre>
<div class=list>
<tt>points</tt> — Array of [page:Vector3 Vector3s</a> that the resulting convex hull will contain.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/geometries/ConvexGeometry.js" target="_blank">ConvexGeometry.js на github.com</a></div><br><br>


<span class="right_side"><a href="core.htm#2" title="Переход к родительскому классу"><tt>BufferGeometry &rarr;</tt></a></span>
<h3 id="2.3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DecalGeometry</h3>
DecalGeometry can be used to create a decal mesh that serves different kinds of purposes e.g. adding unique details to models, performing dynamic visual environmental changes or covering seams.<br><br>

<h4>Пример</h4>
<pre>var geometry =  new THREE.DecalGeometry( mesh, position, orientation, size );
var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );
var mesh = new THREE.Mesh( geometry, material );
scene.add( mesh );</pre>
<h5>Другие примеры:</h5>
<pre><a href="https://threejs.org/examples/#webgl_decals" target="_blank">decals</a></pre><br>

<h4>Конструктор</h4>
<pre>DecalGeometry( mesh, position, orientation, size )</pre>
<div class=list><tt>mesh</tt> — Any mesh object.</div>
<div class=list><tt>position</tt> — Position of the decal projector.</div>
<div class=list><tt>orientation</tt> — Orientation of the decal projector.</div>
<div class=list><tt>size</tt> — Size of the decal projector.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/geometries/DecalGeometry.js" target="_blank">DecalGeometry.js на github.com</a></div><br><br>


<h2 id="3">Загрузчики</h2>
<h3 id="3.1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BabylonLoader</h3>
Загрузчик для загрузки ресурсов в формате <em>.babylon</em><br>.
Файловый формат <a href="https://doc.babylonjs.com/generals/file_format_map_(.babylon)" target="_blank">babylon</a> используется JavaScript'овским
<a href="https://ru.wikipedia.org/wiki/%D0%A4%D1%80%D0%B5%D0%B9%D0%BC%D0%B2%D0%BE%D1%80%D0%BA" target="_blank">фреймворком</a> <a href="https://www.babylonjs.com/" target="_blank">Babylon.js</a>.<br><br>

<h4>Пример</h4>
<pre>// instantiate a loader (создаем экземпляр загрузчика)
var loader = new THREE.BabylonLoader();<br>
// load a Babylon resource (загружаем Babylon ресурс)
loader.load(
	// resource URL (URL-адрес ресурса)
	'models/babylon/skull.babylon',
	// Function when resource is loaded (функция при загрузке ресурса)
	function ( object ) {
		scene.add( object );
	},
	// Function called when download progresses
    // функция, вызываемая в процессе загрузки
	function ( xhr ) {
		console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );
	},
	// Function called when download errors
	// функция, вызываемая при ошибках загрузки
	function ( xhr ) {
		console.log( 'An error happened' );
	}
);</pre>
<h5>Другие примеры:</h5>
<pre><a href="https://threejs.org/examples/#webgl_loader_babylon" target="_blank">webgl_loader_babylon</a></pre><br>

<h4>Конструктор</h4>
<pre>BabylonLoader( <a href="loaders.htm#16.2" onmouseover="show('LoadingManager.<br>manager - менеджер, управляющий')" onmouseout="hide()">manager</a> )</pre>
<div class=list><tt><a href="loaders.htm#16.2" onmouseover="show('LoadingManager.<br>manager - менеджер, управляющий')" onmouseout="hide()">manager</a></tt>
— The [page:LoadingManager loadingManager</a> for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager</a>.</div>
Создает новый <tt>BabylonLoader</tt>.<br><br>

<h4>Свойства</h4>
<br><br>

<h4>Методы</h4>
<pre id="3.1load"><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_null,'Arial,9',10,10,0xffffff,0xd69967)" title="load - загрузить">.load</a>( [page:String url</a>, [page:Function onLoad</a>, [page:Function onProgress</a>, [page:Function onError</a> )</pre>
<div class=list><tt><span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('url - сокращ. англ. слов Uniform Resource Locator<br>- единообразный локатор (определитель<br>местонахождения) ресурса.')" onmouseout="hide()">url</a></span></tt> — строка, содержащая путь/URL-адрес babylon-файла (обязательный аргумент).</div>
		[page:function onLoad</a> — Will be called when load completes. The argument will be the loaded [page:Object3D</a>.<br />
		[page:function onProgress</a> — Will be called while load progresses. The argument will be the XMLHttpRequest instance, which contains .[page:Integer total</a> and .[page:Integer loaded</a> bytes.<br />
		[page:function onError</a> — Will be called when load errors.<br />
		</div>
		<div>
		Begin loading from url and call onLoad with the parsed response content.
		</div>

		<h3>[method:Object3D parse</a>( [page:Object json</a> )</h3>
		<div>
		[page:Object json</a> — The <em>JSON</em> structure to parse.
		</div>

		Parse a <em>JSON</em> structure and return an [page:Object3D object</a> or a [page:Scene scene</a>.<br />
		Found objects are converted to [page:Mesh</a> with a [page:BufferGeometry</a> and a default [page:MeshPhongMaterial</a>.<br />
		Lights are parsed accordingly.
		</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/BabylonLoader.js" target="_blank">BabylonLoader.js на github.com</a></div><br><br>





		[page:Loader</a> &rarr;
<h3 id="3.2">GLTFLoader</h3>
 A loader for loading glTF 2.0 resource.<br>
glTF (GL Transmission Format) is an open format specification for efficient delivery and loading of 3D content. Assets may be provided either in JSON (.gltf) or binary (.glb) format. External files store textures (.jpg, .png, ...) and additional binary data (.bin). A glTF asset may deliver one or more scenes, including meshes, materials, textures, skins, skeletons, morph targets, animations, lights, and/or cameras.<br><br>
<h4>Расширения</h4>
GLTFLoader supports the following glTF extensions:
<div class=blockindent>KHR_materials_pbrSpecularGlossiness<br>
KHR_lights (experimental)</div><br>

<h4>Example</h4>
<pre>// Instantiate a loader
	var loader = new THREE.GLTFLoader();

	// Load a glTF resource
	loader.load(
		// resource URL
		'models/gltf/duck/duck.gltf',
		// called when the resource is loaded
		function ( gltf ) {

			scene.add( gltf.scene );

			gltf.animations; // Array<THREE.AnimationClip>
			gltf.scene; // THREE.Scene
			gltf.scenes; // Array<THREE.Scene>
			gltf.cameras; // Array<THREE.Camera>

		},
		// called when loading is in progresses
		function ( xhr ) {

			console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );

		},
		// called when loading has errors
		function ( error ) {

			console.log( 'An error happened' );

		}
	);</pre>
<h5>Другие примеры:</h5>
<pre><a href="https://threejs.org/examples/#webgl_loader_gltf" target="_blank">webgl / loader / gltf</a></pre><br>

<h4>Совместимость с браузером</h4>
GLTFLoader relies on ES6 Promises, which are not supported in IE11. To use the loader in IE11, you must include a polyfill providing a Promise replacement.<br><br>

<h4>Конструктор</h4>
<pre>GLTFLoader( manager )</pre>
<div class=list></tt>manager</tt> — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.</div>
Создает новый GLTFLoader.

<h4>Свойства</h4>
<br><br>

<h4>Методы</h4>
#
.load ( url, onLoad, onProgress, onError )
url — A string containing the path/URL of the .gltf or .glb file.
onLoad — A function to be called after the loading is successfully completed. The function receives the loaded JSON response returned from parse.
onProgress — (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, that contains .total and .loaded bytes.
onError — (optional) A function to be called if an error occurs during loading. The function receives error as an argument.
Begin loading from url and call the callback function with the parsed response content.
#
.setPath ( path )
path — Base path for loading additional resources e.g. textures and .bin data.
Set the base path for additional resources.
#
.setCrossOrigin ( value )
value — The crossOrigin string to implement CORS for loading the url from a different domain that allows CORS.
#
.parse ( data, path, onLoad, onError )
data — glTF asset to parse, as an ArrayBuffer or JSON string.
path — The base path from which to find subsequent glTF resources such as textures and .bin data files.
onLoad — A function to be called when parse completes.
onError — (optional) A function to be called if an error occurs during parsing. The function receives error as an argument.
Parse a glTF-based ArrayBuffer or JSON String and fire onLoad callback when complete. The argument to onLoad will be an object that contains loaded parts: .scene, .scenes, .cameras, and .animations.

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/GLTFLoader.js" target="_blank">GLTFLoader.js на github.com</a></div><br><br>


<h3 id="3.3">MTLLoader</h3>
A loader for loading an <em>.mtl</em> resource, used internaly by [page:OBJMTLLoader</a> and [page:UTF8Loader</a>.
A loader for loading an .mtl resource, used internaly by OBJLoader and UTF8Loader.
The Material Template Library format (MTL) or .MTL File Format is a companion file format to .OBJ that describes surface shading (material) properties of objects within one or more .OBJ files.

<h4>Конструктор</h4>
<h3>MTLLoader( [page:LoadingManager loadingManager</a> )</h3>
		<div>
			[page:LoadingManager loadingManager</a> — LoadingManager to use. Defaults to [page:DefaultLoadingManager DefaultLoadingManager</a><br />
		</div>
		<div>
			Creates a new [name</a>.
		</div>

		<!-- <h4>Свойства</h4> -->


  <h4>Методы</h4>


		<h3>[method:null load</a>( [page:String url</a>, [page:Function onLoad</a>, [page:Function onProgress</a>, [page:Function onError</a> )</h3>
		<div>
			[page:String url</a> — required<br />
			[page:Function onLoad</a> — Will be called when load completes. The argument will be the loaded [page:MTLLoaderMaterialCreator MTLLoader.MaterialCreator</a> instance.<br />
			[page:Function onProgress</a> — Will be called while load progresses. The argument will be the XMLHttpRequest instance, which contains .[page:Integer total</a> and .[page:Integer loaded</a> bytes.<br />
			[page:Function onError</a> — Will be called when load errors.<br />
		</div>
		<div>
			Begin loading from url and return the loaded material.
		</div>


		<h3>[method:null setPath</a>( [page:String path</a> )</h3>
		<div>
			[page:String path</a> — required<br />
		</div>
		<div>
			 Set base path for resolving references. If set this path will be prepended to each loaded and found reference.
		</div>


		<h3>[method:null setTexturePath</a>( [page:String path</a> )</h3>
		<div>
			[page:String path</a> — required<br />
		</div>
		<div>
			Set base path for resolving texture references. If set this path will be prepended found texture reference. If not set and setPath is, it will be used as texture base path.
		</div>


		<h3>[method:null setCrossOrigin</a>( [page:boolean useCrossOrigin</a> )</h3>
		<div>
			[page:boolean useCrossOrigin</a> — required<br />
		</div>
		<div>
			Set to true if you need to load textures from a different origin.
		</div>


		<h3>[method:null setMaterialOptions</a>( [page:Object options</a> )</h3>
		<div>
			[page:Object options</a> — required
			<ul>
				<li>side: Which side to apply the material. THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide</li>
				<li>wrap: What type of wrapping to apply for textures. THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping</li>
				<li>normalizeRGB: RGBs need to be normalized to 0-1 from 0-255. Default: false, assumed to be already normalized</li>
				<li>ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's. Default: false</li>
			</ul>
		</div>
		<div>
			Set of options on how to construct the materials
		</div>


		<h3>[method:MTLLoaderMaterialCreator parse</a>( [page:String text</a> )</h3>
		<div>
			[page:String text</a> — The textual <em>mtl</em> structure to parse.
		</div>
Parse a <em>mtl</em> text structure and return a [page:MTLLoaderMaterialCreator</a> instance.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/MTLLoader.js" target="_blank">MTLLoader.js на github.com</a></div><br><br>



<h3 id="3.4">OBJLoader</h3>
A loader for loading an <em>.obj</em> resource.

<h4>Пример</h4>

    <pre>
				// instantiate a loader
				var loader = new THREE.OBJLoader();

				// load a resource
				loader.load(
					// resource URL
					'models/monster.obj',
					// Function when resource is loaded
					function ( object ) {
						scene.add( object );
					}
				);
    </pre>

				[example:webgl_loader_obj</a>


  <h4>Конструктор</h4>

		<h3>OBJLoader( [page:LoadingManager manager</a> )</h3>
		<div>
		[page:LoadingManager manager</a> — The [page:LoadingManager loadingManager</a> for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager</a>.
		</div>
		<div>
		Creates a new [name</a>.
		</div>

  <h4>Свойства</h4>


  <h4>Методы</h4>

		<h3>[method:null load</a>( [page:String url</a>, [page:Function onLoad</a>, [page:Function onProgress</a>, [page:Function onError</a> )</h3>
		<div>
		[page:String url</a> — required<br />
		[page:Function onLoad</a> — Will be called when load completes. The argument will be the loaded [page:Object3D</a>.<br />
		[page:Function onProgress</a> — Will be called while load progresses. The argument will be the XMLHttpRequest instance, which contains .[page:Integer total</a> and .[page:Integer loaded</a> bytes.<br />
		[page:Function onError</a> — Will be called when load errors.<br />
		</div>
		<div>
		Begin loading from url and call onLoad with the parsed response content.
		</div>

		<h3>[method:Object3D parse</a>( [page:String text</a> )</h3>
		<div>
		[page:String text</a> — The textual <em>obj</em> structure to parse.
		</div>
Returns an [page:Object3D</a>. It contains the parsed meshes as [page:Mesh</a> and lines as [page:LineSegments</a>.<br />
		All geometry is created as [page:BufferGeometry</a>. Default materials are created as [page:MeshPhongMaterial</a>.<br />
		If an <em>obj</em> object or group uses multiple materials while declaring faces geometry groups and an array of materials are used.
		</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/OBJLoader.js" target="_blank">OBJLoader.js на github.com</a></div><br><br>


<h3 id="3.5">OBJLoader2</h3>
A loader for loading a <em>.obj</em> resource.<br>
The OBJ file format is a simple data-format that represents 3D geometry in a human redeable format as, the position of each vertex, the UV position of each texture coordinate vertex, vertex normals, and the faces that make each polygon defined as a list of vertices, and texture vertices.

<h4>Пример</h4>
<pre>
		// instantiate the loader
		var loader = new THREE.OBJLoader2();

		// function called on successful load
		var intergrateIntoScene = function ( object ) {
			scene.add( object );
		};

		// load a resource from provided URL
		loader.load( 'obj/female02/female02.obj', intergrateIntoScene );
  </pre>

		[example:webgl_loader_obj2</a>


  <h4>Конструктор</h4>

		<h3>OBJLoader2( [page:LoadingManager manager</a> )</h3>
		<div>
		[page:LoadingManager manager</a> — The [page:LoadingManager loadingManager</a> for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager</a>.
		</div>
		<div>
			Use [name</a> to load OBJ data from files or to parse OBJ data from arraybuffer or text.
		</div>

  <h4>Свойства</h4>


  <h4>Методы</h4>

		<h3>[method:null load</a>( [page:String url</a>, [page:Function onLoad</a>, [page:Function onProgress</a>, [page:Function onError</a>, [page:Boolean useArrayBuffer</a> )</h3>
		<div>
			[page:String url</a> — URL of the file to load<br />
			[page:Function onLoad</a> — Called after loading was successfully completed. The argument will be the loaded [page:Object3D</a>.<br />
			[page:Function onProgress</a> — Called to report progress of loading. The argument will be the XMLHttpRequest instance, which contains .[page:Integer total</a> and .[page:Integer loaded</a> bytes.<br />
			[page:Function onError</a>  Called after an error occurred during loading.<br />
			[page:boolean useArrayBuffer</a> — Set this to false to force string based parsing<br />
		</div>
		<div>
			Use this convenient method to load an OBJ file at the given URL. Per default the fileLoader uses an arraybuffer
		</div>

		<h3>[method:Object3D parse</a>( [page:ArrayBuffer arrayBuffer</a> )</h3>
		<div>
			[page:ArrayBuffer arrayBuffer</a> — OBJ data as Uint8Array
		</div>
		<div>
			Default parse function: Parses OBJ file content stored in arrayBuffer and returns the [page:Object3D sceneGraphBaseNode</a>.
		</div>

		<h3>[method:Object3D parseText</a>( [page:String test</a> )</h3>
		<div>
			[page:String text</a> — OBJ data as string
		</div>
		<div>
			Legacy parse function: Parses OBJ file content stored in string and returns the [page:Object3D sceneGraphBaseNode</a>.
		</div>

		<h3>[method:null setMaterials</a> ( Array of [page:Material materials</a> )</h3>
		<div>
			Array of [page:Material materials</a> — Array of [page:Material Materials</a> from MTLLoader
		</div>
		<div>
			Set materials loaded by MTLLoader or any other supplier of an Array of [page:Material Materials</a>.
		</div>

		<h3>[method:null setPath</a> ( [page:String path</a> )</h3>
		<div>
			[page:String path</a> — The basePath
		</div>
		<div>
			Base path to use.
		</div>

		<h3>[method:null setSceneGraphBaseNode</a> ( [page:Object3D sceneGraphBaseNode</a> )</h3>
		<div>
			[page:Object3D sceneGraphBaseNode</a> — Scenegraph object where meshes will be attached
		</div>
		<div>
			Set the node where the loaded objects will be attached.
		</div>

		<h3>[method:null setDebug</a>( [page:Boolean parserDebug</a>, [page:Boolean meshCreatorDebug</a> )</h3>
		<div>
			[page:Boolean parserDebug</a> — Internal Parser will produce debug output<br>
			[page:Boolean meshCreatorDebug</a> — Internal MeshCreator will produce debug output
		</div>
Allows to set debug mode for the parser and the meshCreator.
		</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/OBJLoader2.js" target="_blank">OBJLoader2.js на github.com</a></div><br><br>


<h3 id="3.6">LoaderSupport</h3>
Supporting classes for file loaders and web worker based loaders.
<h4>Sub-Classes</h4>
<pre>LoaderSupport.Builder
LoaderSupport.LoadedMeshUserOverride
LoaderSupport.WorkerSupport
LoaderSupport.WorkerRunnerRefImpl
LoaderSupport.WorkerDirector
LoaderSupport.PrepData
LoaderSupport.LoaderBase
LoaderSupport.Callbacks
LoaderSupport.Validator
LoaderSupport.ConsoleLogger</pre>
<h4>Пример</h4>
webgl_loader_obj2_meshspray - Example using LoaderSupport.LoaderWorkerDirector and LoaderSupport.LoaderWorkerSupport.

<h3 id="3.6.1">Builder</h3>
<h4>Конструктор</h4>
Builder()
Builds one or many Mesh from one raw set of Arraybuffers, materialGroup descriptions and further parameters. Supports vertex, vertexColor, normal, uv and index buffers.
<h4>Методы</h4>
#
.setMaterials ( Array of materials )
Array of materials - Array of Materials
Set materials loaded by any supplier of an Array of Materials.
#
.processPayload ( Object payload )
payload - Raw Mesh or Material descriptions.
Delegates processing of the payload (mesh building or material update) to the corresponding functions (BW-compatibility).


#
.buildMeshes ( Object meshPayload )
meshPayload - Raw mesh description (buffers, params, materials) used to build one to many meshes.
Builds one or multiple meshes from the data described in the payload (buffers, params, material info).


#
.updateMaterials ( Object materialPayload )
materialPayload - Material update instructions
Updates the materials with contained material objects (sync) or from alteration instructions (async).


#
.getMaterialsJSON ()
Returns the mapping object of material name and corresponding jsonified material.


#
.getMaterials ()
Returns the mapping object of material name and corresponding material.


<h3 id="3.6.2">LoadedMeshUserOverride</h3>
<h4>Конструктор</h4>
LoadedMeshUserOverride( disregardMesh, bufferGeometry )
disregardMesh - Tell implementation to completely disregard this mesh
alteredMesh - Tell implementation that mesh(es) have been altered or added
Object to return by callback onMeshAlter. Used to disregard a certain mesh or to return one to many meshes.
<h4>Методы</h4>
#
.addMesh ( mesh )
mesh - Mesh
Add a mesh created within callback.
#
.isDisregardMesh ()
Answers if mesh shall be disregarded completely.
#
.providesAlteredMeshes ()
Answers if new mesh(es) were created.


<h3 id="3.6.3">WorkerSupport</h3>
<h4>Конструктор</h4>
WorkerSupport( logger )
logger - logger to be used
This class provides means to transform existing parser code into a web worker. It defines a simple communication protocol which allows to configure the worker and receive raw mesh data during execution.
<h4>Методы</h4>
#
.validate ( functionCodeBuilder, Array of libLocations, libPath, runnerImpl )
functionCodeBuilder - Function that is invoked with funcBuildObject and funcBuildSingelton that allows stringification of objects and singletons.
Array of libLocations - URL of libraries that shall be added to worker code relative to libPath.
libPath - Base path used for loading libraries.
runnerImpl - The default worker parser wrapper implementation (communication and execution). An extended class could be passed here.
Validate the status of worker code and the derived worker.
#
.setTerminateRequested ( terminateRequested )
terminateRequested - True or false.
Request termination of worker once parser is finished.
#
.setCallbacks ( builder, onLoad )
builder - The builder function. Default is LoaderSupport.Builder.
onLoad - The function that is called when parsing is complete.
Specify functions that should be build when new raw mesh data becomes available and when the parser is finished.
#
.run ( payload )
payload - Raw mesh description (buffers, params, materials) used to build one to many meshes.
Runs the parser with the provided configuration.


<h3 id="3.6.4">WorkerRunnerRefImpl</h3>
<h4>Конструктор</h4>
WorkerRunnerRefImpl()
Default implementation of the WorkerRunner responsible for creation and configuration of the parser within the worker.
<h4>Методы</h4>
#
.applyProperties ( parser, params )
parser - The parser instance
params - The parameter object
Applies values from parameter object via set functions or via direct assignment.
#
.run ( payload )
payload - Raw mesh description (buffers, params, materials) used to build one to many meshes.
Configures the Parser implementation according the supplied configuration object.


<h3 id="3.6.5">WorkerDirector</h3>
<h4>Конструктор</h4>
WorkerDirector( classDef, logger )
classDef - Class definition to be used for construction
logger - logger to be used
Orchestrate loading of multiple OBJ files/data from an instruction queue with a configurable amount of workers (1-16).
- Workflow:
- prepareWorkers
- enqueueForRun
- processQueue
- tearDown

<h4>Методы</h4>
#
.prepareWorkers ( globalCallbacks, maxQueueSize, maxWebWorkers )
globalCallbacks - Register global callbacks used by all web workers
maxQueueSize - Set the maximum size of the instruction queue (1-1024)
maxWebWorkers - Set the maximum amount of workers (1-16)
Create or destroy workers according limits. Set the name and register callbacks for dynamically created web workers.
#
.enqueueForRun ( runParams )
runParams
Store run instructions in internal instructionQueue.
#
.processQueue ()
Process the instructionQueue until it is depleted.
#
.tearDown ( callbackOnFinishedProcessing )
callbackOnFinishedProcessing - Function called once all workers finished processing.
Terminate all workers.
#
.getMaxQueueSize ()
Returns the maximum length of the instruction queue.
#
.getMaxWebWorkers ()
Returns the maximum number of workers.
#
.isRunning ()
Returns if any workers are running.
#
.setCrossOrigin ( crossOrigin )
crossOrigin - CORS value
Sets the CORS string to be used.

<h3 id="3.6.6">PrepData</h3>
<h4>Конструктор</h4>
PrepData( modelName )
modelName - Overall name of the model
Configuration instructions to be used by run method.
<h4>Методы</h4>
#
.setStreamMeshesTo ( streamMeshesTo )
streamMeshesTo - Object already attached to scenegraph where new meshes will be attached to
Set the node where the loaded objects will be attached directly.
#
.setMaterialPerSmoothingGroup ( materialPerSmoothingGroup )
materialPerSmoothingGroup
Tells whether a material shall be created per smoothing group.
#
.setUseIndices ( useIndices )
useIndices - Default is false
Instructs loaders to create indexed BufferGeometry.
#
.setDisregardNormals ( disregardNormals )
disregardNormals
Tells whether normals should be completely disregarded and regenerated.
#
.getCallbacks ()
Returns all callbacks as LoaderSupport.Callbacks.
#
.setCrossOrigin ( crossOrigin )
crossOrigin - CORS value
Sets the CORS string to be used.
#
.addResource ( resource )
resource
Add a resource description.
#
.setUseAsync ( useAsync )
useAsync
If true uses async loading with worker, if false loads data synchronously.


<h3 id="3.6.7">LoaderBase</h3>
<h4>Конструктор</h4>
LoaderBase( manager, logger )
manager - The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager. logger - logger to be used
Base class to be used by loaders.
<h4>Методы</h4>
#
.getLogger ()
Returns LoaderSupport.ConsoleLogger.
#
.setModelName ( modelName )
modelName
Set the name of the model.
#
.setPath ( path )
path - URL
The URL of the base path.
#
.setStreamMeshesTo ( streamMeshesTo )
streamMeshesTo - Object already attached to scenegraph where new meshes will be attached to
Set the node where the loaded objects will be attached directly.
#
.setMaterials ( Array of materials )
Array of materials - Array of Materials
Set materials loaded by MTLLoader or any other supplier of an Array of Materials.
#
.setUseIndices ( useIndices )
useIndices
Instructs loaders to create indexed BufferGeometry.
#
.setDisregardNormals ( disregardNormals )
disregardNormals
Tells whether normals should be completely disregarded and regenerated.
#
.onProgress ( type, text, numericalValue )
type - The type of event
text - Textual description of the event
numericalValue - Numerical value describing the progress
Announce feedback which is give to the registered LoaderSupport.Callbacks.


<h3 id="3.6.8">Callbacks</h3>
<h4>Конструктор</h4>
Callbacks()
Callbacks utilized by loaders and builder.
<h4>Методы</h4>
#
.setCallbackOnProgress ( callbackOnProgress )
callbackOnProgress - Callback function for described functionality
Register callback function that is invoked by internal function "announceProgress" to print feedback.
#
.setCallbackOnMeshAlter ( callbackOnMeshAlter )
callbackOnMeshAlter - Callback function for described functionality
Register callback function that is called every time a mesh was loaded. Use LoadedMeshUserOverride for alteration instructions (geometry, material or disregard mesh).
#
.setCallbackOnLoad ( callbackOnLoad )
callbackOnLoad - Callback function for described functionality
Register callback function that is called once loading of the complete OBJ file is completed.
#
.setCallbackOnLoadMaterials ( callbackOnLoadMaterials )
callbackOnLoadMaterials - Callback function for described functionality
Register callback function that is called when materials have been loaded.


<h3 id="3.6.9">Validator</h3>
<h4>Constructor</h4>
Validator()
Validation functions.
<h4>Методы</h4>
#
.isValid ( input )
input - Can be anything
If given input is null or undefined, false is returned otherwise true.
#
.verifyInput ( input, defaultValue )
input - Can be anything defaultValue - Can be anything
If given input is null or undefined, the defaultValue is returned otherwise the given input.


<h3 id="3.6.10">ConsoleLogger</h3>
<h4>Конструктор</h4>
ConsoleLogger( enabled, debug )
enabled - Tell if logger is enabled. debug - Toggle debug logging.
Logging wrapper for console.
<h4>Методы</h4>
#
.setDebug ( debug )
debug - True or False
Enable or disable debug logging.
#
.isDebug ()
Returns if is enabled and debug.
#
.setEnabled ( enabled )
enabled - True or False
Enable or disable info, debug and time logging.
#
.isEnabled ()
Returns if is enabled.
#
.logDebug ( message )
message - Message to log
Log a debug message if enabled and debug is set.
#
.logInfo ( message )
message - Message to log
Log an info message if enabled.
#
.logWarn ( message )
message - Message to log
Log a warn message (always).
#
.logError ( message )
message - Message to log
Log an error message (always).
#
.logTimeStart ( id )
id - Time identification
Start time measurement with provided id.
#
.logTimeEnd ( id )
id - Time identification
Stop time measurement started with provided id.


<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/LoaderSupport.js" target="_blank">LoaderSupport.js на github.com</a></div><br><br>


<h3 id="3.7">PCDLoader</h3>
A loader for <em>PCD</em> files. Loads ascii and binary.
			Compressed binary files are not supported.</div>

<h4>Пример</h4>

  <pre>

		// instantiate a loader
		var loader = new THREE.PCDLoader();

		// load a resource
		loader.load(
			// resource URL
			'pointcloud.pcd' ,
			// Function when resource is loaded
			function ( mesh ) {
				scene.add( mesh );
			}
		);
  </pre>

		[example:webgl_loader_pcd</a>


  <h4>Конструктор</h4>

		<h3>PCDLoader( [page:LoadingManager manager</a> )</h3>
		<div>
		[page:LoadingManager manager</a> — The [page:LoadingManager loadingManager</a> for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager</a>.
		</div>
		<div>
		Creates a new [name</a>.
		</div>

  <h4>Свойства</h4>

		<h3>[page:Boolean littleEndian</a></h3>
		<div>
		Default value is true.
		</div>

  <h4>Методы</h4>

		<h3>[method:null load</a>( [page:String url</a>, [page:Function onLoad</a>, [page:Function onProgress</a>, [page:Function onError</a> )</h3>
		<div>
		[page:String url</a> — required<br />
		[page:Function onLoad</a> — Will be called when load completes. The argument will be the loaded [page:Object3D</a>.<br />
		[page:Function onProgress</a> — Will be called while load progresses. The argument will be the XMLHttpRequest instance, which contains .[page:Integer total</a> and .[page:Integer loaded</a> bytes.<br />
		[page:Function onError</a> — Will be called when load errors.<br />
		</div>
		<div>
		Begin loading from url and call onLoad with the parsed response content.
		</div>

		<h3>[method:Object3D parse</a>( [page:Arraybuffer data</a>,[page:String url</a> )</h3>
		<div>
		[page:Arraybuffer data</a> — The binary structure to parse.
		</div>
		<div>
		[page:String url</a> — The file name or file url.
		</div>
Parse an <em>pcd</em> binary structure and return an [page:Object3D</a>.<br />
		The object is converted to [page:Points</a> with a [page:BufferGeometry</a> and a [page:PointsMaterial</a>.
		</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/PCDLoader.js" target="_blank">PCDLoader.js на github.com</a></div><br><br>


<h3 id="3.8">PDBLoader</h3>
A loader for loading a <em>.pdb</em> resource.<br>
		The <a href="http://en.wikipedia.org/wiki/Protein_Data_Bank_(file_format)">Protein Data Bank file format</a> is a textual file format describing the three-dimensional structures of molecules.
		</div>

  <h4>Пример</h4>

  <pre>
		// instantiate a loader
		var loader = new THREE.PDBLoader();

		// load a PDB resource
		loader.load(
			// resource URL
			'models/molecules/caffeine.pdb',
			// Function when resource is loaded
			function ( geometryAtoms, geometryBonds, json ) {
				console.log( 'This molecule has ' + json.atoms.length + ' atoms' );
			},
			// Function called when download progresses
			function ( xhr ) {
				console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );
			},
			// Function called when download errors
			function ( xhr ) {
				console.log( 'An error happened' );
			}
		);
  </pre>

		[example:webgl_loader_pdb</a>


  <h4>Конструктор</h4>

		<h3>PDBLoader( [page:LoadingManager manager</a> )</h3>
		<div>
		[page:LoadingManager manager</a> — The [page:LoadingManager loadingManager</a> for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager</a>.
		</div>
		<div>
		Creates a new PDBLoader.
		</div>

  <h4>Свойства</h4>


  <h4>Методы</h4>

		<h3>[method:null load</a>( [page:String url</a>, [page:Function onLoad</a>, [page:Function onProgress</a>, [page:Function onError</a> )</h3>
		<div>
		[page:String url</a> — required. URL to the <em>.pdb</em> file<br />
		[page:Function onLoad</a> — Will be called when load completes. The arguments will be an [page:BufferGeometry geometryAtoms</a>, [page:BufferGeometry geometryBonds</a> and the [page:Object JSON</a> structure.<br />
		[page:Function onProgress</a> — Will be called while load progresses. The argument will be the XMLHttpRequest instance, which contains .[page:Integer total</a> and .[page:Integer loaded</a> bytes.<br />
		[page:Function onError</a> — Will be called when load errors.<br />
		</div>
		<div>
		Begin loading from url and call onLoad with the parsed response content.
		</div>

		<h3>[method:Object parsePDB</a>( [page:String text</a> )</h3>
		<div>
		[page:String text</a> — The textual <em>pdb</em> structure to parse.
		</div>
		<div>
		Parse a <em>pdb</em> text and return a <em>JSON</em> structure.<br />
		</div>

		<h3>[method:null createModel</a>( [page:Object json</a>, [page:Function callback</a> )</h3>
		<div>
		[page:Object json</a> — The <em>(JSON) pdb</em> structure to parse.<br />
		[page:Function callback</a> — Will be called when parse completes, with three arguments: [page:BufferGeometry geometryAtoms</a>, [page:BufferGeometry geometryBonds</a> and the original [page:Object json</a>.<br />
		</div>
Parse a <em>(JSON) pdb</em> structure and return two [page:BufferGeometry</a>: one for atoms, one for bonds.
		</div><br>
<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/PDBLoader.js" target="_blank">PDBLoader.js на github.com</a></div><br><br>


<h3 id="3.9">SVGLoader</h3>
Загрузчик для загрузки ресурса в формате <em>.svg</em>.
<h4>Конструктор</h4>
<pre>SVGLoader( <a href="loaders.htm#16.2" title="LoadingManager">manager</a> )</pre>
<div class=list><a href="loaders.htm#16.2" title="LoadingManager">manager</a> — The [page:LoadingManager loadingManager</a> for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager</a>.</div>
Создает новый SVGLoader.<br><br>

<h4>Свойства</h4><br>

<h4>Методы</h4><br>
<div class=blockindent>
<pre id="2.10load"><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_null,'Arial,9',10,10,0xffffff,0xd69967)" title="load - загрузить">.load</a>( <a class=popupspot href="JavaScript:hhctrl.TextPopup(type_string,'Arial,9',10,10,0xffffff,0xd69967)" title="url - сокращ. от англ. слов Uniform Resource Locator — единообразный локатор (определитель местонахождения) ресурса">url</a>, <a class=popupspot href="JavaScript:hhctrl.TextPopup(type_func,'Arial,9',10,10,0xffffff,0xd69967)" title="on load - на загрузку">onLoad</a>, <a class=popupspot href="JavaScript:hhctrl.TextPopup(type_func,'Arial,9',10,10,0xffffff,0xd69967)" title="on progress - на ход процесса">onProgress</a>, <a class=popupspot href="JavaScript:hhctrl.TextPopup(type_func,'Arial,9',10,10,0xffffff,0xd69967)" title="on error - на ошибку">onError</a> )</pre>
<div class=indent1><tt><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_string,'Arial,9',10,10,0xffffff,0xd69967)" title="url - сокращ. от англ. слов Uniform Resource Locator — единообразный локатор (определитель местонахождения) ресурса">url</a></tt> — обязательный параметр</div>
<div class=indent1><tt><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_func,'Arial,9',10,10,0xffffff,0xd69967)" title="on load - на загрузку">onLoad</a></tt> — функция, которая должна быть вызвана по завершении загрузки. Её аргументом должен быть загруженный [page:SVGDocument</a>.</div>
<div class=indent1><tt><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_func,'Arial,9',10,10,0xffffff,0xd69967)" title="on progress - на ход процесса">onProgress</a></tt> — функция, которая будет вызвана во время хода процесса загрузки. Аргументом этой функции должен быть экземпляр XMLHttpRequest, which contains .[page:Integer total</a> and .[page:Integer loaded</a> bytes.</div>
<div class=indent1><tt><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_func,'Arial,9',10,10,0xffffff,0xd69967)" title="on error - на ошибку">onError</a></tt> — функция, которая будет вызвана при ошибках загрузки.</div>
Begin loading from url and call onLoad with the response content.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/SVGLoader.js" target="_blank">SVGLoader.js на github.com</a></div><br><br>


<h3 id="3.10">TGALoader</h3>
Class for loading a <em>.tga</em> [page:DataTexture texture</a>.

<h4>Пример</h4>

  <pre>
		// instantiate a loader
		var loader = new THREE.TGALoader();

		// load a resource
		var texture = loader.load(
			// resource URL
			'textures/crate_grey8.tga'
			// Function when resource is loaded
			function ( texture ) {
				console.log( 'Texture is loaded' );
			},
			// Function called when download progresses
			function ( xhr ) {
				console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );
			},
			// Function called when download errors
			function ( xhr ) {
				console.log( 'An error happened' );
			}
		);

		var material = new THREE.MeshPhongMaterial( {
			color: 0xffffff,
			map: texture
		} );
  </pre>

		[example:webgl_materials_texture_tga</a>

  <h4>Конструктор</h4>

		<h3>TGALoader( [page:LoadingManager manager</a> )</h3>
		<div>
		[page:LoadingManager manager</a> — The [page:LoadingManager loadingManager</a> for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager</a>.
		</div>
		<div>
		Creates a new TGALoader.
		</div>


  <h4>Методы</h4>

		<h3>[method:DataTexture load</a>( [page:String url</a>, [page:Function onLoad</a>, [page:Function onProgress</a>, [page:Function onError</a> )</h3>
		<div>
		[page:String url</a> — required<br />
		[page:Function onLoad</a> — Will be called when load completes. The argument will be the loaded [page:DataTexture</a>.<br />
		[page:Function onProgress</a> — Will be called while load progresses. The argument will be the XMLHttpRequest instance, which contains .[page:Integer total</a> and .[page:Integer loaded</a> bytes.<br />
		[page:Function onError</a> — Will be called when load errors.<br />
		</div>
Begin loading from url and pass the loaded [page:DataTexture texture</a> to onLoad. The [page:DataTexture texture</a> is also directly returned for immediate use (but may not be fully loaded).
		</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/TGALoader.js" target="_blank">TGALoader.js на github.com</a></div><br><br>


<h3 id="3.11">PRWMLoader</h3>
A loader for loading a .prwm resource.
Packed Raw WebGL Model is an open-source binary file format for nD geometries specifically designed for JavaScript and WebGL with a strong focus on fast parsing (from 1ms to 0.1ms in Chrome 59 on a MBP Late 2013). The parsing of PRWM file is especially fast when the endianness of the file is the same as the endianness of the client platform. More information on this here.<br><br>

<h4>Пример</h4>
// instantiate a loader
var loader = new THREE.PRWMLoader();

// load a resource
loader.load(
	// resource URL
	'models/nefertiti.le.prwm',
	// called when resource is loaded
	function ( bufferGeometry ) {

		var object = new THREE.Mesh( bufferGeometry, new THREE.MeshNormalMaterial() );
		scene.add( object );

	},
	// called when loading is in progresses
	function ( xhr ) {

		console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );

	},
	// called when loading has errors
	function ( error ) {

		console.log( 'An error happened' );

	}
);
webgl_loader_prwm

<h4>Конструктор</h4>
PRWMLoader( manager )
manager — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.
Creates a new PRWMLoader.

<h4>Свойства</h4>
<br><br>

<h4>Методы</h4>
#
.load ( url, onLoad, onProgress, onError )
url — A string containing the path/URL of the .prwm file. Any * character in the URL will be automatically replaced by le or be depending on the platform endianness.
onLoad — (optional) A function to be called after the loading is successfully completed. The function receives the loaded BufferGeometry as an argument.
onProgress — (optional) A function to be called while the loading is in progress. The function receives a XMLHttpRequest instance, which contains total and loaded bytes.
onError — (optional) A function to be called if an error occurs during loading. The function receives error as an argument.
Begin loading from url and call onLoad with the parsed response content.
#
.parse ( arrayBuffer )
arrayBuffer — ArrayBuffer containing the prwm data.
Parse a prwm file passed as an ArrayBuffer and directly return an instance of BufferGeometry.
PRWMLoader.isBigEndianPlatform( )
Return true if the endianness of the platform is Big Endian, false otherwise.

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/PRWMLoader.js" target="_blank">PRWMLoader.js на github.com</a></div>
<h4>Additional notes</h4>
This loader is additionally available on npm as three-prwm-loader.
<br><br>



<h2 id="4">Объекты</h2>
<span class="right_side"><a href="objects.htm#7" title="Переход к родительскому классу"><tt>Mesh &rarr;</tt></a></span>
<h3 id="4.1">LensFlare</h3>

Создает имитацию блика объектива камеры, зависящего от направления освещения.
Creates a simulated lens flare that tracks a light.
<div class="note">Примечание: Для работы LensFlare у <a href="renderers.htm#1.2" title="WebGLRenderer">WebGLRenderer</a> аргумент <tt>alpha</tt> должен быть установлен как <tt>true</tt>.</div>

<h4>Пример</h4>
<div>[example:webgl_lensflares lensflares]</div>

<h4>Конструктор</h4>
<pre>LensFlare( [page:Texture texture], [page:Float size], [page:Float distance], [page:Materials blending], [page:Color color] )</pre>
<div class=blockindent><tt>texture</tt> — THREE.Texture (optional) <br>
<tt>size</tt> — size in pixels (-1 = use texture.width) <br>
<tt>distance</tt> — (0-1) from light source (0 = at light source) <br>
<tt>blending</tt> — [page:Materials Blending Mode] - Defaults to THREE.NormalBlending <br>
<tt>color</tt> — The color of the lens flare.</div>
Automatically adds a lens flare to the lensFlares array if a texture is set.

<h4>Свойства</h4>



		<pre>[property:array lensFlares]</pre>
		<div>
		The array of flares as set by [page:LensFlare.add]
		</div>

		<pre>[property:Vector3 positionScreen]</pre>
		<div>
		The position of the lens flare on the screen.
		</div>

		<pre>[property:Function customUpdateCallback]</pre>
		<div>
		A custom update callback
		</div>

  <h4>Методы</h4>


		<pre>[method:null add]( [page:Texture texture], [page:Float size], [page:Float distance], [page:Materials blending], [page:Color color] )</pre>
		<div>
		Adds a lens flare. See the constructor for details on the parameters.
		</div>


		<pre>[method:null updateLensFlares]()</pre>
		<div>
		Updates the lens flare based on the [page:LensFlare.positionScreen positionScreen] property.
		</div>

		<pre>[method:Lens Flare clone]()</pre>
		<div>
		Returns a clone of this LensFlare object and its descendants.
		</div>


<h4>Исходники</h4>
[link:https://github.com/mrdoob/three.js/blob/master/src/[path].js src/[path].js]<br><br>

<h2 id="5">Экспортеры</h2>
<h3 id="5.1">GLTFExporter</h3>
 An exporter for glTF 2.0.<br>

glTF (GL Transmission Format) is an open format specification for efficient delivery and loading of 3D content. Assets may be provided either in JSON (.gltf) or binary (.glb) format. External files store textures (.jpg, .png, ...) and additional binary data (.bin). A glTF asset may deliver one or more scenes, including meshes, materials, textures, skins, skeletons, morph targets, animations, lights, and/or cameras.<br><br>

<h4>Пример</h4>
// Instantiate a exporter
var exporter = new THREE.GLTFExporter( defaultOptions );

// Parse the input and generate the glTF output
exporter.parse( scene, function ( gltf ) {
	console.log( gltf );
	downloadJSON( gltf );
}, options );
misc_exporter_gltf

<h4>Конструктор</h4>
GLTFExporter( )
Creates a new GLTFExporter.

<h4>Методы</h4>
#
.parse ( input, onCompleted, options )
input — Scenes or objects to export. Valid options:

    Export scenes
    exporter.parse( scene1, ...)
    exporter.parse( [ scene1, scene2 ], ...)
    Export objects (It will create a new Scene to hold all the objects)
    exporter.parse( object1, ...)
    exporter.parse( [ object1, object2 ], ...)
    Mix scenes and objects (It will export the scenes as usual but it will create a new scene to hold all the single objects).
    exporter.parse( [ scene1, object1, object2, scene2 ], ...)

onCompleted — Will be called when the export completes. The argument will be the generated glTF JSON or binary ArrayBuffer.
options - Export options

    trs - bool. Export position, rotation and scale instead of matrix per node. Default is false
    onlyVisible - bool. Export only visible objects. Default is true.
    truncateDrawRange - bool. Export just the attributes within the drawRange, if defined, instead of exporting the whole array. Default is true.
    binary - bool. Export in binary (.glb) format, returning an ArrayBuffer. Default is false.
    embedImages - bool. Export with images embedded into the glTF asset. Default is true.
    animations - Array<AnimationClip>. List of animations to be included in the export.

Generates a .gltf (JSON) or .glb (binary) output from the input (Scene or Objects)
<h4>Исходники</h4>
examples/js/exporters/GLTFExporter.js



<h2 id="6">Плагины</h2>

<span class="right_side"><a href="cameras.htm#1" title="Переход к родительскому классу: Camera"><tt>Camera &rarr;</tt></a></span>
<h3 id="6.1">CombinedCamera</h3>
A general purpose camera, for setting FOV, Lens Focal Length, and switching between perspective and orthographic views easily. Use this only if you do not wish to manage both an Orthographic and Perspective Camera.

<h4>Примеры</h4>
<div>[example:canvas_camera_orthographic2 camera / orthographic2 </a></div>
<pre>//Create combined camera - создаем комбинированную камеру
camera = new THREE.CombinedCamera( window.innerWidth / 2, window.innerHeight / 2, 70, 1, 1000, - 500, 1000 );</pre>

<h4>Конструктор</h4>
<pre>CombinedCamera(<a class=popupspot href="JavaScript:hhctrl.TextPopup(type_number,'Arial,9',10,10,0xffffff,0xd69967)">width</a>, <a class=popupspot href="JavaScript:hhctrl.TextPopup(type_number,'Arial,9',10,10,0xffffff,0xd69967)">height</a>, <a class=popupspot href="JavaScript:hhctrl.TextPopup(type_number,'Arial,9',10,10,0xffffff,0xd69967)">fov</a>, <a class=popupspot href="JavaScript:hhctrl.TextPopup(type_number,'Arial,9',10,10,0xffffff,0xd69967)">near</a>, <a class=popupspot href="JavaScript:hhctrl.TextPopup(type_number,'Arial,9',10,10,0xffffff,0xd69967)">far</a>, <a class=popupspot href="JavaScript:hhctrl.TextPopup(type_number,'Arial,9',10,10,0xffffff,0xd69967)">orthoNear</a>, <a class=popupspot href="JavaScript:hhctrl.TextPopup(type_number,'Arial,9',10,10,0xffffff,0xd69967)">orthoFar</a>)</pre>
<div class="blockindent"><tt>width</tt> — Camera frustum width.<br>
<tt>height</tt> — Camera frustum height.<br>
<tt>fov</tt> — Camera frustum vertical field of view in perspective view.<br>
<tt>near</tt> — Camera frustum near plane in perspective view.<br>
<tt>far</tt> — Camera frustum far plane in perspective view.<br>
<tt>orthoNear</tt> — Camera frustum near plane in orthographic view.<br>
<tt>orthoFar</tt> — Camera frustum far plane in orthographic view.</div>
Creates a CombinedCamera. This initializes 2 cameras, an OrthographicCamera and a PerspectiveCamera. The default is the perspective Camera.

<h4>Свойства</h4>
<pre><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_number,'Arial,9',10,10,0xffffff,0xd69967)">.fov</a></pre>
Gets or sets the camera frustum vertical field of view in perspective view.

<pre><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_number,'Arial,9',10,10,0xffffff,0xd69967)">.left</a></pre>
Gets or sets the camera frustum left plane in orthographic view.

<pre><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_number,'Arial,9',10,10,0xffffff,0xd69967)">.right</a></pre>
Gets or sets the camera frustum right plane in orthographic view.

<pre><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_number,'Arial,9',10,10,0xffffff,0xd69967)">.top</a></pre>
Gets or sets the camera frustum top plane in orthographic view.

<pre><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_number,'Arial,9',10,10,0xffffff,0xd69967)">.bottom</a></pre>
Gets or sets the camera frustum bottom plane in orthographic view.

<pre><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_number,'Arial,9',10,10,0xffffff,0xd69967)">.zoom</a></pre>
Gets or sets the zoom factor of the camera.

<pre><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_number,'Arial,9',10,10,0xffffff,0xd69967)">.near</a></pre>
Gets camera frustum near plane.

<pre><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_number,'Arial,9',10,10,0xffffff,0xd69967)">.far</a></pre>
Gets camera frustum far plane.

<pre>[property:Matrix4 projectionMatrix</a></pre>
This is the matrix which contains the projection.

<pre>[property:OrthographicCamera cameraO</a></pre>
Gets or sets the internal OrthographicCamera used as camera.

<pre>[property:PerspectiveCamera cameraP</a></pre>
Gets or sets the internal PerspectiveCamera used as camera.

<pre>[property:boolean inOrthographicMode</a></pre>
Gets whether the combinedCamera is in Orthographic Mode.

<pre>[property:boolean inPerspectiveMode</a></pre>
Gets whether the combinedCamera is in Perspective Mode.

<h4>Методы</h4>
<pre>[method:null setFov</a>([page:Number fov</a>)</pre>
<div class="blockindent">fov —  Camera frustum vertical field of view in perspective view.</div>
sets the camera frustum vertical field of view in perspective view.

<pre>[method:null setZoom</a>([page:Number zoom</a>)</pre>
<div class="blockindent">zoom — The zoom factor.</div>
Sets the zoomfactor.

<pre>[method:null setLens</a>([page:number focalLength</a>, [page:Number filmGauge</a>)</pre>
<div class="blockindent">focalLength — The focal length of a lens is defined as the distance from the optical center of a lens (or, the secondary principal point for a complex lens like a camera lens) to the focal point (sensor) when the lens is focused on an object at infinity. <br>
		filmGauge — the size of the frame in mm. (default is *35*)</div>
Sets the fov based on lens data.

<pre>[method:null toFrontView</a>()</pre>
Sets the camera to view the front of the target.

<pre>[method:null toBackView</a>()</pre>
Sets the camera to view the back of the target.

<pre>[method:null toLeftView</a>()</pre>
Sets the camera to view the left of the target.

<pre>[method:null toRightView</a>()</pre>
Sets the camera to view the right of the target.

<pre>[method:null toTopView</a>()</pre>
Sets the camera to view the top.

<pre>[method:null toBottomView</a>()</pre>
Sets the camera to view the bottom.

<pre>[method:null setSize</a>([page:Number width</a>, [page:Number height</a>)</pre>
<div class="blockindent">width — The width of the orthographic view.<br>
height — The height of the orthographic view.</div>
Sets the size of the orthographic view.

<pre>[method:null toOrthographic</a>()</pre>
Change the camera to orthographic view.

<pre>[method:null toPerspective</a>()</pre>
Change the camera to Perspective view.

<pre>[method:null updateProjectionMatrix</a>()</pre>
Updates the ProjectionMatrix.


<h4>Source</h4>
<div class=blockindent><a href="src/cameras/CombinedCamera.js.txt">CombinedCamera.js в этом справочнике</a><br>
<a href="https://github.com/mrdoob/three.js/blob/dev/examples/js/cameras/CombinedCamera.js" target="_blank">CombinedCamera.js на github.com</a></div><br>


<h3 id="6.2">Lut</h3>
Represents a lookup table for colormaps. It is used to determine the color values from a range of data values.

<h4>Пример</h4>
		<pre>var lut = new THREE.Lut( "rainbow", 512 );</pre>
		<pre>var data = [0, 10.1, 4.2, 3.4, 63, 28</a>;</pre>
		<pre>lut.setMax(63);</pre>
		<pre>color = lut.getColor(10);</pre>

<h4>Конструктор</h4>
<pre>Lut( colormap, numberOfColors )</pre>
<div class="blockindent">colormap — optional argument that sets a colormap from predefined colormaps. Available colormaps are : "rainbow", "cooltowarm", "blackbody".<br>
numberOfColors — optional argument that sets the number of colors used to represent the data array.</div>

<h4>Свойства</h4>

<pre>[property:Float minV</a></pre>
The minimum value to be represented with the lookup table. Default is 0.

<pre>[property:Float maxV</a></pre>
The maximum value to be represented with the lookup table. Default is 1.

<pre>.[legend</a></pre>
The legend of the lookup table.

<h4>Методы</h4>
<pre>[method:null copy</a>( [page:Lut lut</a> ) [page:Lut this</a></pre>
<div class="blockindent">color — Lut to copy.</div>
Copies given lut.
<pre>.setLegendOn [parameters</a></pre>
<div class="blockindent">parameters — { layout: value, position: { x: value, y: value, z: value }, dimensions: { width: value, height: value } }
		layout — Horizontal or vertical layout. Default is vertical.<br>
		position — The position x,y,z of the legend.<br>
		dimensions — The dimensions (width and height) of the legend.</div>
Sets this Lut with the legend on.


<pre>.setLegendOff</pre>
Sets this Lut with the legend off.


<pre>.setLegendLabels [parameters, callback</a></pre>
<div class="blockindent">parameters — { fontsize: value, fontface: value, title: value, um: value, ticks: value, decimal: value, notation: value }
		fontsize — Font size to be used for labels.<br>
		fontface — Font type to be used for labels.<br>
		title — The title of the legend.<br>
		um — The unit of measurements of the legend.<br>
		ticks — The number of ticks to be displayed.<br>
		decimal — The number of decimals to be used for legend values.<br>
		notation — Legend notation: standard (default) or scientific.<br>
		callback — An optional callback to be used to format the legend labels.</div>
Sets the labels of the legend of this Lut.

<pre>[method:Lut setminV</a>( [page:Float minV</a> )</pre>
<div class="blockindent">minV — The minimum value to be represented with the lookup table.</div>
Sets this Lut with the minimum value to be represented.

<pre>[method:Lut setmaxV</a>( [page:Float maxV</a> )</pre>
<div class="blockindent">maxV — The maximum value to be represented with the lookup table.</div>
Sets this Lut with the maximum value to be represented.

<pre>[method:Lut changeNumberOfColors</a>( [page:Float numberOfColors</a> )</pre>
<div class="blockindent">numberOfColors — The number of colors to be used to represent the data array.</div>
Sets this Lut with the number of colors to be used.


<pre>[method:Lut changeColorMap</a>( [page:Float colorMap</a> )</pre>
<div class="blockindent">colorMap — The name of the color map to be used to represent the data array.</div>
Sets this Lut with the colormap to be used.

<pre>[method:Lut addColorMap</a>( colorMapName, arrayOfColors )</pre>
Insert a new color map into the set of available color maps.

<pre>[method:Lut getColor</a>( value ) [page:Lut this</a></pre>
<div class="blockindent">value — the data value to be displayed as a color.</div>
Returns a Three.Color.

<h4>Исходники</h4>
[link:https://github.com/mrdoob/three.js/blob/master/examples/js/math/[path</a>.js examples/js/math/[path</a>.js</a><br><br>


<span class="right_side"><a href="materials.htm#3" title="Переход к родительскому классу: Material"><tt>Material &rarr;</tt></a></span>
<h3 id="6.3">SpriteCanvasMaterial</h3>
Create a material that can draw custom sprites using a 2d canvas.

<h4>Конструктор</h4>
<pre>SpriteCanvasMaterial( [page:Object parameters</a> )</pre>
parameters is an object that can be used to set up the default properties
<div class="blockindent"><tt>color</tt> — the color of the sprite<br>
<tt>program</tt> — the program used to draw the sprite</div>

<h4>Свойства</h4>
<pre>[property:Color color</a></pre>
The color of the sprite. The material will set up the color for the context before calling the material's program.

<h4>Методы</h4>
<pre>[method:null program</a>([page:CanvasRenderingContext2D context</a>, [page:Color color</a>)</pre>
<div class="blockindent"><tt>context</tt> — The canvas context<br>
<tt>color</tt> — The color of the sprite</div>
Define a program that will use the context to draw the sprite.

<h4>Исходники</h4>
[link:https://github.com/mrdoob/three.js/blob/master/examples/js/renderers/CanvasRenderer.js examples/js/renderers/CanvasRenderer.js</a>


<h2 id="7">QuickHull</h2>
<h3 id="7.1">Face</h3>
Represents a section bounded by a specific amount of half-edges. The current implmentation assumes that a face always consist of three edges.<br><br>

<h4>Конструктор</h4>
<pre>Face()</pre>
<br><br>

<h4>Свойства</h4>
<div class=blockindent><br>
<pre>[property:Vector3 normal</a></pre>
The normal vector of the face. Default is a [page:Vector3</a> at (0, 0, 0).<br><br>


		<h3>[property:Vector3 midpoint</a></h3>
		<div>
			The midpoint or centroid of the face. Default is a [page:Vector3</a> at (0, 0, 0).
		</div>

		<h3>[property:Float area</a></h3>
		<div>
			The area of the face. Default is 0.
		</div>

		<h3>[property:Float constant</a></h3>
		<div>
			Signed distance from face to the origin. Default is 0.
		</div>

		<h3>[property:VertexNode outside</a></h3>
		<div>
			Reference to a vertex in a vertex list this face can see. Default is null.
		</div>

		<h3>[property:Integer mark</a></h3>
		<div>
			Marks if a face is visible or deleted. Default is 'Visible'.
		</div>

		<h3>[property:HalfEdge edge</a></h3>
Reference to the base edge of a face. To retrieve all edges, you can use the 'next' reference of the current edge. Default is null.
		</div>

<h4>Методы</h4>
<div class=blockindent><br>
		<h3>[method:Face create</a>( [page:VertexNode a</a>, [page:VertexNode b</a>, [page:VertexNode c</a> )</h3>
		[page:VertexNode a</a> - First vertex of the face.<br /><br />
		[page:VertexNode b</a> - Second vertex of the face.<br /><br />
		[page:VertexNode c</a> - Third vertex of the face.<br /><br />

		<div>Creates a face.</div>

		<h3>[method:HalfEdge getEdge</a>( [page:Integer i</a> )</h3>
		[page:Integer i</a> - The index of the edge.<br /><br />

		<div>Returns an edge by the given index.</div>

		<h3>[method:Face compute</a> ()</h3>

		<div>Computes all properties of the face.</div>

<h3>[method:Float distanceToPoint</a>( [page:Vector3 point</a> )</h3>
		[page:Vector3 point</a> - Any point in 3D space.<br /><br />
Returns the signed distance from a given point to the plane representation of this face.</div><br>

<h4>Исходники</h4>

		[link:https://github.com/mrdoob/three.js/blob/master/examples/js/QuickHull.js examples/js/QuickHull.js</a>


		<h3 id="7.2">HalfEdge</h3>
The basis for a half-edge data structure, also known as doubly connected edge list (DCEL).

<h4>Конструктор</h4>
<h3>HalfEdge( [page:VertexNode vertex</a>, [page:Face face</a> )</h3>
		[page:VertexNode vertex</a> - [page:VertexNode</a> A reference to its destination vertex.<br /><br />
		[page:Face face</a> - [page:Face</a> A reference to its face.<br />

		</div>

  <h4>Свойства</h4>

		<h3>[property:VertexNode vertex</a></h3>
		<div>
			Reference to the destination vertex. The origin vertex can be obtained by querying the destination of its twin, or of the previous half-edge. Default is undefined.
		</div>

		<h3>[property:HalfEdge prev</a></h3>
		<div>
			Reference to the previous half-edge of the same face. Default is null.
		</div>

		<h3>[property:HalfEdge next</a></h3>
		<div>
			Reference to the next half-edge of the same face. Default is null.
		</div>

		<h3>[property:HalfEdge twin</a></h3>
		<div>
			Reference to the twin half-edge to reach the opposite face. Default is null.
		</div>

		<h3>[property:Face face</a></h3>
		<div>
			 Each half-edge bounds a single face and thus has a reference to that face. Default is undefined.
		</div>

  <h4>Методы</h4>

		<h3>[method:VertexNode head</a>()</h3>
		<div>Returns the destintation vertex.</div>

		<h3>[method:VertexNode tail</a>()</h3>
		<div>Returns the origin vertex.</div>

		<h3>[method:Float length</a>()</h3>
		<div>Returns the [link:https://en.wikipedia.org/wiki/Euclidean_distance Euclidean length</a>
		(straight-line length) of the edge.</div>

		<h3>[method:Float lengthSquared</a>()</h3>
		<div>Returns the square of the [link:https://en.wikipedia.org/wiki/Euclidean_distance Euclidean length</a>
		(straight-line length) of the edge.</div>

		<h3>[method:HalfEdge setTwin</a>( [page:HalfEdge edge</a> )</h3>
		[page:HalfEdge edge</a> - Any half-edge.<br /><br />

		<div>Sets the twin edge of this half-edge. It also ensures that the twin reference of the given half-edge is correctly set.</div>

		<h2>Source</h2>

		[link:https://github.com/mrdoob/three.js/blob/master/examples/js/QuickHull.js examples/js/QuickHull.js</a>


<h3 id="7.3">QuickHull</h3>
General information about the Quickhull algorithm: Dirk Gregorius. March 2014, Game Developers Conference: [link:http://media.steampowered.com/apps/valve/2014/DirkGregorius_ImplementingQuickHull.pdf Implementing QuickHull</a>.

  <h4>Конструктор</h4>
<h3>QuickHull()</h3>

<h4>Свойства</h4>

		<h3>[property:Float tolerance</a></h3>
		<div>
			The epsilon value that is used for internal comparative operations. The calculation of this value depends on the size of the geometry. Default is -1.
		</div>

		<h3>[property:Array faces</a></h3>
		<div>
			The generated faces of the convex hull. Default is an empty array.
		</div>

		<h3>[property:Array newFaces</a></h3>
		<div>
			This array holds the faces that are generated within a single iteration. Default is an empty array.
		</div>

		<h3>[property:VertexList assigned</a></h3>
		<div>
			This [page:VertexList vertex list</a> holds all vertices that are assigned to a face. Default is an empty vertex list.
		</div>

		<h3>[property:VertexList unassigned</a></h3>
		<div>
			This [page:VertexList vertex list</a> holds all vertices that are not assigned to a face. Default is an empty vertex list.
		</div>

		<h3>[property:Array vertices</a></h3>
		<div>
			The internal representation of the given geometry data (an array of [page:VertexNode vertices</a>).
		</div>

  <h4>Методы</h4>

		<h3>[method:QuickHull setFromPoints</a>( [page:Array points</a> )</h3>
		[page:Array points</a> - Array of [page:Vector3 Vector3s</a> that the resulting convex hull will contain.<br /><br />

		<div>Computes to convex hull for the given array of points.</div>

		<h3>[method:QuickHull setFromObject</a>( [page:Object3D object</a> )</h3>
		[page:Object3D object</a> - [page:Object3D</a> to compute the convex hull of.<br /><br />

		<div>Computes the convex hull of an [page:Object3D</a> (including its children),
		accounting for the world transforms of both the object and its childrens.</div>

		<h3>[method:QuickHull makeEmpty</a>()</h3>

		<div>Makes this convex hull empty.</div>

		<h3>[method:QuickHull addVertexToFace</a>( [page:VertexNode vertex</a>, [page:Face face</a>	)</h3>
		[page:VertexNodeNode vertex</a> - The vetex to add.<br /><br />
		[page:Face face</a> - The target face.<br /><br />

		<div>Adds a vertex to the 'assigned' list of vertices and assigns it to the given face.</div>

		<h3>[method:QuickHull removeVertexFromFace</a>( [page:VertexNode vertex</a>, [page:Face face</a>	)</h3>
		[page:VertexNode vertex</a> - The vetex to remove.<br /><br />
		[page:Face face</a> - The target face.<br /><br />

		<div>Removes a vertex from the 'assigned' list of vertices and from the given face. It also makes sure that the link from 'face' to the first vertex it sees in 'assigned' is linked correctly after the removal.</div>

		<h3>[method:VertexNode removeAllVerticesFromFace</a>( [page:Face face</a>	)</h3>
		[page:Face face</a> - The given face.<br /><br />

		<div>Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertext list.</div>

		<h3>[method:QuickHull deleteFaceVertices</a>( [page:Face face</a>, [page:Face absorbingFace</a>	)</h3>
		[page:Face face</a> - The given face.<br /><br />
		[page:Face absorbingFace</a> - An optional face that tries to absorb the vertices of the first face.<br /><br />

		<div>Removes all the visible vertices that 'face' is able to see.
			<ul>
				<li>If 'absorbingFace' doesn't exist, then all the removed vertices will be added to the 'unassigned' vertex list.</li>
				<li>If 'absorbingFace' exists, then this method will assign all the vertices of 'face' that can see 'absorbingFace'.</li>
				<li>If a vertex cannot see 'absorbingFace', it's added to the 'unassigned' vertex list.</li>
			</ul>
		</div>

		<h3>[method:QuickHull resolveUnassignedPoints</a>( [page:Array newFaces</a>	)</h3>
		[page:Face newFaces</a> - An array of new faces.<br /><br />

		<div>Reassigns as many vertices as possible from the unassigned list to the new faces.</div>

		<h3>[method:Object computeExtremes</a>()</h3>

		<div>Computes the extremes values (min/max vectors) which will be used to compute the inital hull.</div>

		<h3>[method:QuickHull computeInitialHull</a>()</h3>

		<div>Computes the initial simplex assigning to its faces all the points that are candidates to form part of the hull.</div>

		<h3>[method:QuickHull reindexFaces</a>()</h3>

		<div>Removes inactive (e.g. deleted) faces from the internal face list.</div>

		<h3>[method:VertexNode nextVertexToAdd</a>()</h3>

		<div>Finds the next vertex to create faces with the current hull.
			<ul>
				<li>Let the initial face be the first face existing in the 'assigned' vertex list.</li>
				<li>If a face doesn't exist then return since there're no vertices left.</li>
				<li>Otherwise for each vertex that face sees find the one furthest away from it.</li>
			</ul>
		</div>

		<h3>[method:QuickHull computeHorizon</a>( [page:Vector3 eyePoint</a>, [page:HalfEdge crossEdge</a>, [page:Face face</a>, [page:Array horizon</a>	)</h3>
		[page:Vector3 eyePoint</a> - The 3D-coordinates of a point.<br /><br />
		[page:HalfEdge crossEdge</a> - The edge used to jump to the current face.<br /><br />
		[page:Face face</a> - The current face being tested.<br /><br />
		[page:Array horizon</a> - The edges that form part of the horizon in CCW order.<br /><br />

		<div>Computes a chain of half edges in CCW order called the 'horizon'. For an edge to be part of the horizon it must join a face that can see 'eyePoint' and a face that cannot see 'eyePoint'.</div>

		<h3>[method:HalfEdge addAdjoiningFace</a>( [page:VertexNode eyeVertex</a>, [page:HalfEdge horizonEdge</a> )</h3>
		[page:VertexNode eyeVertex</a> - The vertex that is added to the hull.<br /><br />
		[page:HalfEdge horizonEdge</a> - A single edge of the horizon.<br /><br />

		<div>Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order.
			All the half edges are created in CCW order thus the face is always pointing outside the hull</div>

		<h3>[method:QuickHull addNewFaces</a>( [page:VertexNode eyeVertex</a>, [page:HalfEdge horizonEdge</a> )</h3>
		[page:VertexNode eyeVertex</a> - The vertex that is added to the hull.<br /><br />
		[page:HalfEdge horizon</a> - An array of half-edges that form the horizon.<br /><br />

		<div>Adds 'horizon.length' faces to the hull, each face will be linked with the horizon opposite face and the face on the left/right.</div>

		<h3>[method:QuickHull addVertexToHull</a>( [page:VertexNode eyeVertex</a> )</h3>
		[page:VertexNode eyeVertex</a> - The vertex that is added to the hull.<br /><br />

		<div>Adds a vertex to the hull with the following algorithm
			<ul>
				<li>Compute the 'horizon' which is a chain of half edges. For an edge to belong to this group it must be the edge connecting a face that can see 'eyeVertex' and a face which cannot see 'eyeVertex'.</li>
				<li>All the faces that can see 'eyeVertex' have its visible vertices removed from the assigned vertex list.</li>
				<li>A new set of faces is created with each edge of the 'horizon' and 'eyeVertex'. Each face is connected with the opposite horizon face and the face on the left/right.</li>
				<li>The vertices removed from all the visible faces are assigned to the new faces if possible.</li>
			</ul>
		</div>

		<h3>[method:QuickHull cleanup</a>()</h3>

		<div>Cleans up internal properties after computing the convex hull.</div>

		<h3>[method:QuickHull compute</a>()</h3>

		<div>Starts the execution of the quick hull algorithm.</div>

		<h2>Source</h2>

		[link:https://github.com/mrdoob/three.js/blob/master/examples/js/QuickHull.js examples/js/QuickHull.js</a>


<h3 id="7.4">VertexNode</h3>
A vertex as a double linked list node.

<h4>Конструктор</h4>

<h3>VertexNode( [page:Vector3 point</a> )</h3>
		[page:Vector3 point</a> - [page:Vector3</a> A point (x, y, z) in 3D space.<br /><br />

		</div>

  <h4>Свойства</h4>

		<h3>[property:Vector3 point</a></h3>
		<div>
			A point (x, y, z) in 3D space. Default is undefined.
		</div>

		<h3>[property:VertexNode prev</a></h3>
		<div>
			Reference to the previous vertex in the double linked list. Default is null.
		</div>

		<h3>[property:VertexNode next</a></h3>
		<div>
			Reference to the next vertex in the double linked list. Default is null.
		</div>

		<h3>[property:Face face</a></h3>
		<div>
			Reference to the face that is able to see this vertex. Default is undefined.
		</div>

		<h2>Source</h2>

		[link:https://github.com/mrdoob/three.js/blob/master/examples/js/QuickHull.js examples/js/QuickHull.js</a>


<h3 id="7.5">VertexList</h3>
A doubly linked list of vertices.

<h4>Конструктор</h4>
<h3>VertexList()</h3>

  <h4>Свойства</h4>

		<h3>[property:VertexNode head</a></h3>
		<div>
			Reference to the first vertex of the linked list. Default is null.
		</div>

		<h3>[property:VertexNode tail</a></h3>
		<div>
			Reference to the last vertex of the linked list. Default is null.
		</div>

  <h4>Методы</h4>

		<h3>[method:VertexNode first</a>()</h3>
		<div>Returns the head reference.</div>

		<h3>[method:VertexNode last</a>()</h3>
		<div>Returns the tail reference.</div>

		<h3>[method:VertexList clear</a>()</h3>
		<div>Clears the linked list.</div>

		<h3>[method:VertexList insertBefore</a>( [page:Vertex target</a>, [page:Vertex vertex</a> )</h3>
		[page:Vertex target</a> - The target vertex. It's assumed that this vertex belongs to the linked list.<br /><br />
		[page:Vertex vertex</a> - The vertex to insert.<br /><br />

		<div>Inserts a vertex <strong>before</strong> a target vertex.</div>

		<h3>[method:VertexList insertAfter</a>( [page:Vertex target</a>, [page:Vertex vertex</a> )</h3>
		[page:Vertex target</a> - The target vertex. It's assumed that this vertex belongs to the linked list.<br /><br />
		[page:Vertex vertex</a> - The vertex to insert.<br /><br />

		<div>Inserts a vertex <strong>after</strong> a target vertex.</div>

		<h3>[method:VertexList append</a>( [page:Vertex vertex</a> )</h3>
		[page:Vertex vertex</a> - The vertex to append.<br /><br />

		<div>Appends a vertex to the end of the linked list.</div>

		<h3>[method:VertexList appendChain</a>( [page:Vertex vertex</a> )</h3>
		[page:Vertex vertex</a> - The head vertex of a chain of vertices.<br /><br />

		<div>Appends a chain of vertices where the given vertex is the head.</div>

		<h3>[method:VertexList remove</a>( [page:Vertex vertex</a> )</h3>
		[page:Vertex vertex</a> - The vertex to remove.<br /><br />

		<div>Removes a vertex from the linked list.</div>

		<h3>[method:VertexList removeSubList</a>( [page:Vertex a</a>, [page:Vertex b</a> )</h3>
		[page:Vertex a</a> - The head of the sublist.<br /><br />
		[page:Vertex b</a> - The tail of the sublist.<br /><br />

		<div>Removes a sublist of vertices from the linked list.</div>

		<h3>[method:Boolean isEmpty</a>()</h3>

		<div>Returns true if the linked list is empty.</div>

		<h2>Source</h2>

		[link:https://github.com/mrdoob/three.js/blob/master/examples/js/QuickHull.js examples/js/QuickHull.js</a>


<h2 id="8">Визуализаторы</h2>
<h3 id="8.1">CanvasRenderer</h3>
The Canvas renderer displays your beautifully crafted scenes <em>not</em> using WebGL, but draws it using the (slower) <a href="http://drafts.htmlwg.org/2dcontext/html5_canvas_CR/Overview.html">Canvas 2D Context</a> API.

<div class=note><b>Примечание:</b> Визуализатор Canvas уже устарел и больше не является частью основных элементов <em>three.js</em>.
Если, все же потребуется его использование, можно найти его здесь: <a href="https://github.com/mrdoob/three.js/blob/master/examples/js/renderers/CanvasRenderer.js" target="_blank">examples/js/renderers/CanvasRenderer.js</a>.</div>
Этот визуализатор может быть хорошей альтернативой <a href="renderers.htm#1" onmouseover="show('WebGLRenderer')" onmouseout="hide()">WebGLRenderer</a>'у для простых сцен:
<pre>function webglAvailable() {
  try {
    var canvas = document.createElement( 'canvas' );
    return !!( window.WebGLRenderingContext && (
      canvas.getContext( 'webgl' ) ||
      canvas.getContext( 'experimental-webgl' ) )
    );
  } catch ( e ) {
    return false;
 }
}<br>
if ( webglAvailable() ) {
  renderer = new THREE.WebGLRenderer();
} else {
  renderer = new THREE.CanvasRenderer();
}</pre>
<div class=note><b>Примечание:</b> both WebGLRenderer and CanvasRenderer are embedded in the web page using an HTML5 &lt;canvas&gt; tag. The "Canvas" in CanvasRenderer means it uses Canvas 2D instead of WebGL.</div>
Don't confuse either CanvasRenderer with the SoftwareRenderer example, which simulates a screen buffer in a Javascript array.<br><br>

<h4>Конструктор</h4>
<pre>CanvasRenderer( <span onclick="showClick(type_obj)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('parameters - параметры')" onmouseout="hide()">parameters</a></span> )</pre>
        <div>parameters is an optional object with properties defining the renderer's behaviour. The constructor also accepts no parameters at all. In all cases, it will assume sane defaults when parameters are missing.</div>

		<div>
		canvas — A [page:Canvas</a> where the renderer draws its output.
		</div><br>

<h4>Свойства</h4>
<div class=blockindent><br>
<pre id="8.1info"><span onclick="showClick(type_obj)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('info - информация, сведения')" onmouseout="hide()">.info</a></span></pre>
An object with a series of statistical information about the graphics board memory and the rendering process. Useful for debugging or just for the sake of curiosity. The object contains the following fields:
<div class=blockindent>render:
<div class=blockindent>vertices<br>
faces</div></div><br>

<pre id="8.1domElement">[property:DOMElement domElement</a></pre>
A [page:Canvas</a> where the renderer draws its output.<br>
This is automatically created by the renderer in the constructor (if not provided already); you just need to add it to your page.<br><br>

<pre id="8.1autoClear"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('auto clear - автоматическая очистка')" onmouseout="hide()">.autoClear</a></span></pre>
Defines whether the renderer should automatically clear its output before rendering.<br><br>

<pre id="8.1sortObjects"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('sort objects - сортировка объектов')" onmouseout="hide()">.sortObjects</a></span></pre>
Defines whether the renderer should sort objects. Значением по умолчанию является <tt>true</tt>.
<div class=note><b>Примечание:</b> Sorting is used to attempt to properly render objects that have some degree of transparency.  By definition, sorting objects may not work in all cases.  Depending on the needs of application, it may be neccessary to turn off sorting and use other methods to deal with transparency rendering e.g. manually determining the object rendering order.</div><br>

<pre id="8.1sortElements"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('sort elements - сортировка элементов')" onmouseout="hide()">.sortElements</a></span></pre>
Defines whether the renderer should sort the face of each object. Значением по умолчанию является <tt>true</tt>.</div><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="8.1render"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('render - представить, изобразить')" onmouseout="hide()">.render</a></span>( <a href="scenes.htm#3" onmouseover="show('Scene.<br>scene - сцена')" onmouseout="hide()">scene</a>, <a href="cameras.htm#1" onmouseover="show('Camera.<br>camera - камера')" onmouseout="hide()">camera</a> )</pre>
<div class=list><tt><a href="scenes.htm#3" onmouseover="show('Scene.<br>scene - сцена')" onmouseout="hide()">scene</a></tt> -- отображаемая сцена.</div>
<div class=list><tt><a href="cameras.htm#1" onmouseover="show('Camera.<br>camera - камера')" onmouseout="hide()">camera</a></tt> -- камера для просмотра сцены.</div>
Метод визуализирует (отображает) сцену, используя камеру.<br><br>

<pre id="8.1clear"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('clear - очистить')" onmouseout="hide()">.clear</a></span>()</pre>
Tells the renderer to clear its color drawing buffer with the clearcolor.<br><br>

<pre id="8.1setClearColor">[method:null setClearColor</a>([page:Color color</a>, [page:number alpha</a>)</pre>
<div class=list>color -- The color to clear the canvas with.</div>
<div class=list>alpha -- The alpha channel to clear the canvas with.</div>
This set the clearColor and the clearAlpha.<br><br>

<pre id="8.1setSize"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('set size - установить размер')" onmouseout="hide()">.setSize</a></span>( <span onclick="showClick(type_number)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('width - ширина')" onmouseout="hide()">width</a></span>, <span onclick="showClick(type_number)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('height - высота')" onmouseout="hide()">height</a></span> )</pre>
<div class=list><tt><span onclick="showClick(type_number)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('width - ширина')" onmouseout="hide()">width</a></span></tt> -- ширина холста для рисования.</div>
<div class=list><tt><span onclick="showClick(type_number)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('height - высота')" onmouseout="hide()">height</a></span></tt> -- высота холста для рисования.</div>
This set the size of the drawing canvas and if updateStyle is set, then the css of the canvas is updated too.<br><br>

<pre id="8.1setClearColorHex">[method:null setClearColorHex</a>([page:number hex</a>, [page:number alpha</a>)</pre>
<div class=list>hex -- The the hexadecimal value of the color to clear the canvas with.</div>
<div class=list>alpha -- The alpha channel to clear the canvas with.</div>
This set the clearColor and the clearAlpha.<br><br>

<pre id="8.1getClearColorHex">[method:number getClearColorHex</a>()</pre>
Returns the [page:number hex</a> color.<br><br>

<pre id="8.1getClearAlpha"><span onclick="showClick(type_number)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('get clear alpha - получить чистое (значение) альфа(-канала)')" onmouseout="hide()">.getClearAlpha</a></span>()</pre>
Метод возвращает значение альфа-канала.<br><br>

<h5>Пустые методы для обеспечения совместимости с <a href="renderers.htm#1" onmouseover="show('WebGLRenderer')" onmouseout="hide()">WebGLRenderer</a></h5>
<pre><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('clear color - очистка (буфера) цвета')" onmouseout="hide()">.clearColor</a></span>()
<span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('clear depth - очистка (буфера) глубины')" onmouseout="hide()">.clearDepth</a></span>()
<span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('clear stencil - очистка (буфера) трафарета')" onmouseout="hide()">.clearStencil</a></span>()
<span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('set face culling - установить отбраковку граней')" onmouseout="hide()">.setFaceCulling</a></span>()
<span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('supports vertex textures - поддерживать текстуры вершин')" onmouseout="hide()">.supportsVertexTextures</a></span>()
<span onclick="showClick(type_number)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('get max anisotropy - получить максимальную анизотропию')" onmouseout="hide()">.getMaxAnisotropy</a></span>() - возвращает <tt>1</tt>.</pre></div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/renderers/CanvasRenderer.js" target="_blank">CanvasRenderer.js на github.com</a></div><br><br>


<h2 id="9">Подсобные функции (утилиты)</h2>
<h3 id="9.1">SceneUtils</h3>
Класс, содержащий полезные служебные функции для работы со сценой.
A class containing useful utility functions for scene manipulation.<br><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="9.1createMultiMaterialObject">.createMultiMaterialObject ( geometry, materials )</pre>
<div class=list><tt>geometry</tt> -- The geometry for the set of materials.</div>
<div class=list><tt>materials</tt> -- The materials for the object.</div>
Creates a new Group that contains a new mesh for each material defined in materials. Beware that this is not the same as an array of materials which defines multiple materials for 1 mesh.<br>
This is mostly useful for objects that need both a material and a wireframe implementation.<br><br>

<pre id="9.1attach">.attach ( child, scene, parent )</pre>
<div class=list><tt>child</tt> -- The object to add to the parent</div>
<div class=list><tt>scene</tt> -- The scene to detach the object on.</div>
<div class=list><tt>parent</tt> -- The parent to attach the object from.</div>
Attaches the object to the parent without the moving the object in the worldspace. Beware that to do this the matrixWorld needs to be updated, this can be done by calling the updateMatrixWorld method on the parent object.<br><br>

<pre id="9.1detach">.detach ( child, parent, scene )</pre>
<div class=list><tt>child</tt> -- The object to remove from the parent</div>
<div class=list><tt>scene</tt> -- The scene to attach the object on.</div>
<div class=list><tt>parent</tt> -- The parent to detach the object from.</div>
Detaches the object from the parent and adds it back to the scene without moving in worldspace. Beware that to do this the matrixWorld needs to be updated, this can be done by calling the updateMatrixWorld method on the parent object.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/utils/SceneUtils.js" target="_blank">SceneUtils.js на github.com</a></div><br><br>

<br><br>
</body></html>
