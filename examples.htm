<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
<title>Three.js - Примеры</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<link rel="stylesheet" type="text/css" href="1.css">
<script type="text/javascript" src="1.js"></script>
</head>
<body>
<h2 class=head1>Примеры</h2>
<div class=below>Здесь даются примеры реализации различных подсобных объектов и функций.<br><br>
<table width=100%>
<tr><td width=50%>
<div class=blockindent>Контролы (элементы управления)
<div class=list><a href="#1.1">OrbitControls</a> - элемент управления, позволяющий камере вращаться вокруг цели.</div></div>
<div class=blockindent>Геометрические элементы
<div class=list><a href="#2.1">ConvexBufferGeometry</a> - </div>
<div class=list><a href="#2.2">ConvexGeometry</a> - </div>
<div class=list><a href="#2.3">DecalGeometry</a> - </div></div>
<div class=blockindent>Загрузчики
<div class=list><a href="#3.1">BabylonLoader</a> - загрузка в формате <tt>babylon</tt></div>
<div class=list><a href="#3.2">GLTFLoader</a> - загрузка в формате <tt>glTF 2.0</tt></div>
<div class=list><a href="#3.3">MTLLoader</a> - загрузка в формате <tt>mtl</tt></div>
<div class=list><a href="#3.4">OBJLoader</a> - загрузка в формате <tt>mtl</tt></div>
<div class=list><a href="#3.5">OBJLoader2</a> - </div>
<div class=list><a href="#3.6">LoaderSupport</a> - </div>
<div class=list><a href="#3.7">PCDLoader</a> - </div>
<div class=list><a href="#3.8">PDBLoader</a> - загрузка в формате <tt>pdb</tt></div>
<div class=list><a href="#3.9">SVGLoader</a> - загрузка в формате <tt>svg</tt></div>
<div class=list><a href="#3.10">TGALoader</a> - загрузка в формате <tt>tga</tt></div>
<div class=list><a href="#3.11">PRWMLoader</a> - загрузка в формате <tt>prwm</tt></div></div>
</td>
<td width=50%>
<div class=blockindent>Объекты
<div class=list><a href="#4.1">LensFlare</a> -  имитация блика объектива камеры</div></div>
<div class=blockindent>Экспортеры
<div class=list><a href="#5.1">GLTFExporter</a> - </div></div>
<div class=blockindent>Плагины
<div class=list><a href="#6.1">LookupTable</a> - </div>
<div class=list><a href="#6.2">SpriteCanvasMaterial</a> - </div></div>
<div class=blockindent>QuickHull
<div class=list><a href="#7.1">Face</a> - </div>
<div class=list><a href="#7.2">HalfEdge</a> - </div>
<div class=list><a href="#7.3">QuickHull</a> - </div>
<div class=list><a href="#7.4">VertexNode</a> - </div>
<div class=list><a href="#7.5">VertexList</a> - </div></div>
<div class=blockindent>Визуализаторы (рендереры)
<div class=list><a href="#8.1">CanvasRenderer</a> - </div></div>
<div class=blockindent>Подсобные функции (утилиты)
<div class=list><a href="#9.1">SceneUtils</a> - полезные функции для работы со сценой</div></div>
</td></tr></table>
</div>

<h2 id="1">Контролы</h2>
<h3 id="1.1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OrbitControls</h3>
Орбитальный контрол (элемент управления) позволяет камере вращаться вокруг цели.<br>
Для его использования, как и всех файлов в директории <tt>/examples</tt>, нужно будет отдельно включить этот файл в HTML-код.<br><br>
<h4>Пример</h4>
<pre>var renderer = new THREE.WebGLRenderer();
renderer.setSize( window.innerWidth, window.innerHeight );
document.body.appendChild( renderer.domElement );<br>
var scene = new THREE.Scene();<br>
var  camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 10000 );<br>
var controls = new THREE.OrbitControls( camera );<br>
// controls.update() must be called after any manual changes to the camera's transform
// после любых ручных изменений состояния камеры должен быть вызван controls.update()
camera.position.set( 0, 20, 100 );
controls.update();<br>
function animate() {<br>
  requestAnimationFrame( animate );<br>
  // required if controls.enableDamping or controls.autoRotate are set to true
  // если controls.enableDamping или controls.autoRotate установлен как true, необходимо
  controls.update();<br>
  renderer.render( scene, camera );<br>
}</pre>
<h5>Другие примеры:</h5>
<pre><a href="https://threejs.org/examples/#misc_controls_orbit" target="_blank">misc / controls / orbit</a></pre><br>

<h4>Конструктор</h4>
<pre>OrbitControls( <a href="cameras.htm#1" onmouseover="show('Camera.<br>object - объект')" onmouseout="hide()">object</a>, <span class="lnk" onmouseover="show('domElement - элемент DOM (от англ. Document Object Model — «объектная модель документа»)')" onmouseout="hide()">domElement</span> )</pre>
<div class=list><tt><a href="cameras.htm#1" onmouseover="show('Camera.<br>object - объект')" onmouseout="hide()">object</a></tt> - камера, которой нужно управлять (обязательный аргумент).</div>

<div class=list><tt><span class="lnk" onmouseover="show('domElement - элемент DOM (от англ. Document Object Model — «объектная модель документа»)')" onmouseout="hide()">domElement</span></tt> - элемент HTML, используемый для прослушивателей (приемников) событий (дополнительный, необязательный аргумент).
По умолчанию это весь документ целиком, однако, если нужно чтобы элементы управления (контролы) работали от какого-либо определенного элемента (например, <tt>&lt;canvas&gt;</tt> - холст), укажите его в этом аргументе.<br>
Статья о <a href="https://ru.wikipedia.org/wiki/Document_Object_Model" target="_blank">DOM</a> в Википедии.</div><br>


<h4>Свойства</h4>
<div class=blockindent><br>
<pre id="1autoRotate"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('auto rotate - автоматическое вращение')" onmouseout="hide()">.autoRotate</a></span></pre>
Для автоматического вращения вокруг цели установите значение данного свойства как <tt>true</tt>.<br>
Обратите внимание, если это свойство включено, в цикле анимации нужно вызывать метод <tt><a href="#1update" onmouseover="show('OrbitControls.update')" onmouseout="hide()">update</a></tt>.<br><br>

<pre id="1autoRotateSpeed"><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('auto rotate speed - скорость автоматического вращения')" onmouseout="hide()">.autoRotateSpeed</a></span></pre>
Свойство определяет скорость вращения камеры вокруг цели, если свойство <tt><a href="#1autoRotate" onmouseover="show('OrbitControls.autoRotate')" onmouseout="hide()">autoRotate</a></tt> установлено как <tt>true</tt>.
Значение по умолчанию равно <tt>2.0</tt>, что равно 30 секундам на один оборот при 60 кадрах в секунду.<br>
Обратите внимание, если свойство <tt><a href="#1autoRotate" onmouseover="show('OrbitControls.autoRotate')" onmouseout="hide()">autoRotate</a></tt> включено, в цикле анимации нужно вызывать метод <tt><a href="#1update" onmouseover="show('OrbitControls.update')" onmouseout="hide()">update</a></tt>.<br><br>

<pre id="1dampingFactor"><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('damping factor - коэффициент демпфирования (затухания)')" onmouseout="hide()">.dampingFactor</a></span></pre>
Затухающая инерция используется, если для параметра <tt><a href="#1enableDamping" onmouseover="show('OrbitControls.enableDamping')" onmouseout="hide()">enableDamping</a></tt> установлено как <tt>true</tt>.<br>
Обратите внимание, для работы этого свойства в цикле анимации нужно вызывать метод <tt><a href="#1update" onmouseover="show('OrbitControls.update')" onmouseout="hide()">update</a></tt>.<br><br>

<pre id="1domElement"><span class="lnk" onmouseover="show('domElement - HTML элемент DOM (от англ. Document Object Model — «объектная модель документа»)')" onmouseout="hide()">.domElement</span></pre>
DOM элемент HTML, используется для прослушивания (приема) событий от мышки / касаний. Он должен быть передан в конструкторе; его изменение здесь не создаст новых приемников событий.<br>
Значением по умолчанию является весь документ.<br>
Статья о <a href="https://ru.wikipedia.org/wiki/Document_Object_Model" target="_blank">DOM</a> в Википедии.<br><br>

<pre id="1enabled"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('enabled - включить (управление)')" onmouseout="hide()">.enabled</a></span></pre>
Свойство определяет, будет или нет включено управление.<br><br>

<pre id="1enableDamping"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('enable damping - включить затухание')" onmouseout="hide()">.enableDamping</a></span></pre>
Установите значение этого свойства как <tt>true</tt> для включения затухания (инерции), которое может быть использовано чтобы придать ощущение веса элементам управления. Значением по умолчанию является <tt>false</tt>.<br>
Обратите внимание, если данное свойство включено (т.е. <tt>true</tt>), в каждом цикле анимации требуется вызывать <a href="#1update" onmouseover="show('OrbitControls.update')" onmouseout="hide()">update( )</a>.<br><br>

<pre id="1enableKeys"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('enable keys - включить клавиши<br>(в смысле - отслеживать нажатия<br>клавиш клавиатуры)')" onmouseout="hide()">.enableKeys</a></span></pre>
Включает или отключает использование управления от клавиатуры.<br><br>

<pre id="1enablePan"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('enable pan - включить панорамирование')" onmouseout="hide()">.enablePan</a></span></pre>
Включает или отключает панорамирование камерой. Значением по умолчанию является <tt>true</tt>.<br><br>

<pre id="1enableRotate"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('enable rotate - включить поворот')" onmouseout="hide()">.enableRotate</a></span></pre>
Включает или отключает горизонтальный и вертикальный поворот камеры. Значением по умолчанию является <tt>true</tt>.<br>
Обратите внимание, что можно отключать одну ось установкой минимального и максимального значения <a href="#1minPolarAngle" onmouseover="show('OrbitControls.minPolarAngle')" onmouseout="hide()">полярного</a>
или <a href="#1minAzimuthAngle" onmouseover="show('OrbitControls.minAzimuthAngle')" onmouseout="hide()">азимутального</a> углов на одно и тоже значение,
что приведет к тому, что вертикальное или горизонтальное вращение будет зафиксировано в этом значении.<br><br>

<pre id="1enableZoom"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('enable zoom - включить масштабирование')" onmouseout="hide()">.enableZoom</a></span></pre>
Включает или отключает масштабирование (наезд - отъезд) камеры.<br><br>

<pre id="1keyPanSpeed"><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('key pan speed - скорость панорамирования (от) клавиши')" onmouseout="hide()">.keyPanSpeed</a></span></pre>
Свойство определяет скорость панорамирования камеры при использовании клавиатуры для её управления. Значение по умолчанию равно <tt>7.0</tt> пикселов на одно нажатие клавиши.<br><br>

<pre id="1keys"><span onclick="showClick(type_obj)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('keys - ключи, клавиши, кнопки')" onmouseout="hide()">.keys</a></span></pre>
Этот объект содержит ссылки на коды клавиш, используемых для управления панорамированием камеры.
<pre>controls.keys = {
  LEFT: 37, // left arrow (стрелка влево)
  UP: 38, // up arrow (стрелка вверх)
  RIGHT: 39, // right arrow (стрелка вправо)
  BOTTOM: 40 // down arrow (стрелка вниз)
}</pre>
Вот <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode" target="_blank">полный список кодов нажатий клавиш клавиатуры</a>.<br><br>

<pre id="1maxAzimuthAngle"><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('max azimuth angle - максимальный азимутальный угол')" onmouseout="hide()">.maxAzimuthAngle</a></span></pre>
Свойство определяет, насколько велика может быть орбита по горизонтали, верхний предел. Возможный диапазон от <tt>- Math.PI</tt> до <tt>Math.PI</tt> (или <tt>Infinity</tt> для снятия ограничений). Значением по умолчанию является <tt>Infinity</tt>.<br><br>

<pre id="1maxDistance"><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('max distance - максимальное расстояние')" onmouseout="hide()">.maxDistance</a></span></pre>
Свойство определяет, насколько далеко может отъехать камера (только для <a href="cameras.htm#4" onmouseover="show('PerspectiveCamera')" onmouseout="hide()">камеры с перспективной проекцией</a>).
Значением по умолчанию является <tt>Infinity</tt> (бесконечность).<br><br>

<pre id="1maxPolarAngle"><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('max polar angle - максимальный полярный угол')" onmouseout="hide()">.maxPolarAngle</a></span></pre>
Свойство определяет, насколько велика может быть орбита по вертикали, верхний предел. Возможный диапазон от <tt>0</tt> до <tt>Math.PI</tt>, в радианах.
Значением по умолчанию является <tt>Math.PI</tt>.<br><br>

<pre id="1maxZoom"><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('max zoom - максимальное увеличение')" onmouseout="hide()">.maxZoom</a></span></pre>
How far you can zoom out (только для <a href="cameras.htm#3" onmouseover="show('OrthographicCamera')" onmouseout="hide()">камеры с ортографической проекцией</a>).
Значением по умолчанию является <tt>Infinity</tt> (бесконечность).<br><br>

<pre id="1minAzimuthAngle"><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('min azimuth angle - минимальный азимутальный угол')" onmouseout="hide()">.minAzimuthAngle</a></span></pre>
How far you can orbit horizontally, lower limit. Range is - Math.PI to Math.PI ( or - Infinity for no limit ) and default is - Infinity;<br><br>

<pre id="1minDistance"><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('min distance - минимальное расстояние')" onmouseout="hide()">.minDistance</a></span></pre>
How far you can dolly in (только для <a href="cameras.htm#4" onmouseover="show('PerspectiveCamera')" onmouseout="hide()">камеры с перспективной проекцией</a>). Значение по умолчанию равно <tt>0</tt>.<br><br>

<pre id="1minPolarAngle"><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('min polar angle - минимальный полярный угол')" onmouseout="hide()">.minPolarAngle</a></span></pre>
How far you can orbit vertically, lower limit. Range is 0 to Math.PI radians.
Значение по умолчанию равно <tt>0</tt>.<br><br>

<pre id="1minZoom"><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('min zoom - минимальное увеличение')" onmouseout="hide()">.minZoom</a></span></pre>
How far you can zoom in (только для <a href="cameras.htm#3" onmouseover="show('OrthographicCamera')" onmouseout="hide()">камеры с ортографической проекцией</a>). Значение по умолчанию равно <tt>0</tt>.<br><br>

<pre id="1mouseButtons"><span onclick="showClick(type_obj)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('mouse buttons - кнопки мышки')" onmouseout="hide()">.mouseButtons</a></span></pre>
Этот объект содержит ссылки на кнопки мышки, используемые для управления камерой.
<pre>controls.mouseButtons = {
  ORBIT: THREE.MOUSE.LEFT,
  ZOOM: THREE.MOUSE.MIDDLE,
  PAN: THREE.MOUSE.RIGHT
}</pre>

<pre id="1object"><a href="cameras.htm#1" onmouseover="show('Camera.<br>object - объект')" onmouseout="hide()">.object</a></pre>
Камера, которой управляет контрол.<br><br>

<pre id="1panningMode"><span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('panning mode - режим панорамирования')" onmouseout="hide()">.panningMode</a></span></pre>
Режим панорамирования. Определяет, как изменяется позиция камеры при панорамировании.
Возможными вариантами является THREE.ScreenSpacePanning, при котором камера панорамирует в экранном пространстве,
и THREE.HorizontalPanning, при котором камера панорамирует в плоскости, ортогональной (перпендикулярной) направлению вверх камеры.
Значением по умолчанию является THREE.ScreenSpacePanning.<br><br>

<pre id="1panSpeed"><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('pan speed - скорость панорамирования')" onmouseout="hide()">.panSpeed</a></span></pre>
Скорость панорамирования. Значение по умолчанию равно <tt>1</tt>.<br><br>

<pre id="1position0"><a href="math.htm#19" onmouseover="show('Vector3.<br>position 0 - позиция 0')" onmouseout="hide()">.position0</a></pre>
Данное свойство используется внутри контрола методами <tt><a href="#1saveState" onmouseover="show('OrbitControls.saveState')" onmouseout="hide()">saveState</a></tt>
и <tt><a href="#1reset" onmouseover="show('OrbitControls.reset')" onmouseout="hide()">reset</a></tt>reset.<br><br>

<pre id="1rotateSpeed"><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('rotate speed - скорость поворота')" onmouseout="hide()">.rotateSpeed</a></span></pre>
Скорость поворота. Значение по умолчанию равно <tt>1</tt>.<br><br>

<pre id="1target0"><a href="math.htm#19" onmouseover="show('Vector3.<br>target 0 - цель 0')" onmouseout="hide()">.target0</a></pre>
Данное свойство используется внутри контрола методами <tt><a href="#1saveState" onmouseover="show('OrbitControls.saveState')" onmouseout="hide()">saveState</a></tt>
и <tt><a href="#1reset" onmouseover="show('OrbitControls.reset')" onmouseout="hide()">reset</a></tt>reset.<br><br>

<pre id="1target"><a href="math.htm#19" onmouseover="show('Vector3.<br>target - цель')" onmouseout="hide()">.target</a></pre>
Точка фокуса элемента управления, вокруг которой вращается <a href="#1object" onmouseover="show('OrbitControls.object')" onmouseout="hide()">камера</a>.
Для смены фокуса элемента управления её можно в любой момент обновить вручную.<br><br>

<pre id="1zoom0"><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('zoom 0 - масштабирование 0')" onmouseout="hide()">.zoom0</a></span></pre>
Данное свойство используется внутри контрола методами <tt><a href="#1saveState" onmouseover="show('OrbitControls.saveState')" onmouseout="hide()">saveState</a></tt>
и <tt><a href="#1reset" onmouseover="show('OrbitControls.reset')" onmouseout="hide()">reset</a></tt>reset.<br><br>

<pre id="1zoomSpeed"><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('zoom speed - скорость масштабирования')" onmouseout="hide()">.zoomSpeed</a></span></pre>
Скорость масштабирования / наезда - отъезда камеры. Значение по умолчанию равно <tt>1</tt>.</div><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="1dispose"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('dispose - удалить, отбросить')" onmouseout="hide()">.dispose</a></span>( )</pre>
Метод удаляет все прослушиватели (приемники) событий.<br><br>

<pre id="1getAzimuthalAngle"><span onclick="showClick(type_rad)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('get azimuthal angle - получить азимутальный угол')" onmouseout="hide()">.getAzimuthalAngle</a></span>( )</pre>
Получает текущий угол поворота по горизонтали, в радианах.<br><br>

<pre id="1getPolarAngle"><span onclick="showClick(type_rad)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('get polar angle - получить полярный угол')" onmouseout="hide()">.getPolarAngle</a></span>( )</pre>
Получает текущий угол поворота по вертикали, в радианах.<br><br>

<pre id="1reset"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('reset - сброс')" onmouseout="hide()">.reset</a></span>( )</pre>
Метод сбрасывает состояние элемента управления либо в его состояние, сохраненное последним вызовом <tt><a href="#1saveState" onmouseover="show('OrbitControls.saveState')" onmouseout="hide()">saveState</a></tt>, либо в исходное состояние.<br><br>

<pre id="1saveState"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('save state - сохранить состояние')" onmouseout="hide()">.saveState</a></span>( )</pre>
Сохраняет текущее состояние элемента управления. Впоследствии оно может быть восстановлено с помощью метода <tt><a href="#1reset" onmouseover="show('OrbitControls.reset')" onmouseout="hide()">reset</a></tt>.<br><br>

<pre id="1update"><span onclick="showClick('false')"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('update - обновление')" onmouseout="hide()">.update</a></span>( )</pre>
Метод обновляет элемент управления. Должен вызываться после любых изменений состояния камеры вручную или в цикле обновления,
если установлены <tt><a href="#1autoRotate" onmouseover="show('OrbitControls.autoRotate')" onmouseout="hide()">autoRotate</a></tt>
или <tt><a href="#1enableDamping" onmouseover="show('OrbitControls.enableDamping')" onmouseout="hide()">enableDamping</a></tt>.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/controls/OrbitControls.js" target="_blank">OrbitControls.js на github.com</a></div><br><br>


<h2 id="2">Геометрические элементы</h2>

<span class="right_side"><a href="core.htm#2" title="Переход к родительскому классу"><tt>BufferGeometry &rarr;</tt></a></span>
<h3 id="2.1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ConvexBufferGeometry</h3>
ConvexBufferGeometry можно использовать для создания выпуклой оболочки по заданному массиву трехмерных точек.
Среднее время сложности этой задачи считается как <tt>O(nlog(n))</tt>.<br><br>

<h4>Пример</h4>
<pre>var geometry = new THREE.ConvexBufferGeometry( points );
var material = new THREE.MeshBasicMaterial( {color: 0x00ff00} );
var mesh = new THREE.Mesh( geometry, material );
scene.add( mesh );</pre>
<h5>Другие примеры:</h5>
<pre><a href="https://threejs.org/examples/#webgl_geometry_convex" target="_blank">geometry / convex</a></pre><br>

<h4>Конструктор</h4>
<pre>ConvexBufferGeometry( <span onclick="showClick(type_array)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('points - точки')" onmouseout="hide()">points</a></span> )</pre>
<div class=list><tt><span onclick="showClick(type_array)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('points - точки')" onmouseout="hide()">points</a></span></tt>
 — массив <a href="math.htm#19" onmouseover="show('Vector3')" onmouseout="hide()">трехмерных векторов</a>, который будет содержать получающаяся выпуклая оболочка.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/geometries/ConvexGeometry.js" target="_blank">ConvexGeometry.js на github.com</a></div><br><br>


<span class="right_side"><a href="core.htm#7" title="Переход к родительскому классу"><tt>Geometry &rarr;</tt></a></span>
<h3 id="2.2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ConvexGeometry</h3>
ConvexGeometry можно использовать для создания выпуклой оболочки по заданному массиву трехмерных точек.
Среднее время сложности этой задачи считается как <tt>O(nlog(n))</tt>.<br><br>

<h4>Пример</h4>
<pre>var geometry = new THREE.ConvexGeometry( points );
var material = new THREE.MeshBasicMaterial( {color: 0x00ff00} );
var mesh = new THREE.Mesh( geometry, material );
scene.add( mesh );</pre><br>
<h5>Другие примеры:</h5>
<pre><a href="https://threejs.org/examples/#webgl_geometry_convex" target="_blank">geometry / convex</a></pre><br>

<h4>Конструктор</h4>
<pre>ConvexGeometry( <span onclick="showClick(type_array)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('points - точки')" onmouseout="hide()">points</a></span> )</pre>
<div class=list><tt><span onclick="showClick(type_array)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('points - точки')" onmouseout="hide()">points</a></span></tt>
 — массив <a href="math.htm#19" onmouseover="show('Vector3')" onmouseout="hide()">трехмерных векторов</a>, который будет содержать получающаяся выпуклая оболочка.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/geometries/ConvexGeometry.js" target="_blank">ConvexGeometry.js на github.com</a></div><br><br>


<span class="right_side"><a href="core.htm#2" title="Переход к родительскому классу"><tt>BufferGeometry &rarr;</tt></a></span>
<h3 id="2.3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DecalGeometry</h3>
DecalGeometry можно использовать для создания сетки (mesh) с <a href="https://ru.wikipedia.org/wiki/%D0%94%D0%B5%D0%BA%D0%B0%D0%BB%D1%8C" target="_blank">декалью</a>, которая служит различным видам целей, например добавление уникальных элементов к моделям, выполнение динамически видимых изменений окружающей среды или облицовка стыков.
performing dynamic visual environmental changes or covering seams.<br><br>

<h4>Пример</h4>
<pre>var geometry =  new THREE.DecalGeometry( mesh, position, orientation, size );
var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );
var mesh = new THREE.Mesh( geometry, material );
scene.add( mesh );</pre>
<h5>Другие примеры:</h5>
<pre><a href="https://threejs.org/examples/#webgl_decals" target="_blank">decals</a></pre><br>

<h4>Конструктор</h4>
<pre>DecalGeometry( <a href="objects.htm#7" onmouseover="show('Mesh.<br>mesh - сетка')" onmouseout="hide()">mesh</a>, <a href="math.htm#19" onmouseover="show('Vector3.<br>position - позиция')" onmouseout="hide()">position</a>, <a href="math.htm#5" onmouseover="show('Euler.<br>orientation - ориентация, направление')" onmouseout="hide()">orientation</a>, <a href="math.htm#19" onmouseover="show('Vector3.<br>size - размер')" onmouseout="hide()">size</a> )</pre>
<div class=list><tt>mesh</tt> — любой объект сетка (mesh).</div>
<div class=list><tt>position</tt> — позиция Position of the decal projector.</div>
<div class=list><tt>orientation</tt> — ориентация Orientation of the decal projector.</div>
<div class=list><tt>size</tt> — размер Size of the decal projector.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/geometries/DecalGeometry.js" target="_blank">DecalGeometry.js на github.com</a></div><br><br>


<h2 id="3">Загрузчики</h2>
<h3 id="3.1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BabylonLoader</h3>
Загрузчик для загрузки ресурсов в формате <em>babylon</em>.<br>
Файловый формат <a href="https://doc.babylonjs.com/generals/file_format_map_(.babylon)" target="_blank">babylon</a> используется JavaScript'овским
<a href="https://ru.wikipedia.org/wiki/%D0%A4%D1%80%D0%B5%D0%B9%D0%BC%D0%B2%D0%BE%D1%80%D0%BA" target="_blank">фреймворком</a> <a href="https://www.babylonjs.com/" target="_blank">Babylon.js</a>.<br><br>

<h4>Пример</h4>
<pre>// instantiate a loader (создаем экземпляр загрузчика)
var loader = new THREE.BabylonLoader();<br>
// load a Babylon resource (загружаем Babylon ресурс)
loader.load(
  // resource URL (URL-адрес ресурса)
  'models/babylon/skull.babylon',
  // Function when resource is loaded (функция при загрузке ресурса)
  function ( object ) {
    scene.add( object );
  },
  // Function called when download progresses
  // функция, вызываемая в процессе загрузки
  function ( xhr ) {
    console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );
  },
  // Function called when download errors
  // функция, вызываемая при ошибках загрузки
  function ( xhr ) {
    console.log( 'An error happened' );
  }
);</pre>
<h5>Другие примеры:</h5>
<pre><a href="https://threejs.org/examples/#webgl_loader_babylon" target="_blank">webgl_loader_babylon</a></pre><br>

<h4>Конструктор</h4>
<pre>BabylonLoader( <a href="loaders.htm#16.2" onmouseover="show('LoadingManager.<br>manager - менеджер, управляющий')" onmouseout="hide()">manager</a> )</pre>
<div class=list><tt><a href="loaders.htm#16.2" onmouseover="show('LoadingManager.<br>manager - менеджер, управляющий')" onmouseout="hide()">manager</a></tt>
— <a href="loaders.htm#16.2" onmouseover="show('LoadingManager')" onmouseout="hide()">менеджер загрузки</a>, используемый для загрузки.
Значением по умолчанию является <a href="loaders.htm#16.2" onmouseover="show('LoadingManager')" onmouseout="hide()">THREE.DefaultLoadingManager</a>.</div>
Создает новый <tt>BabylonLoader</tt>.<br><br>

<h4>Свойства</h4>
<br><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="3.1load"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('load - загрузить')" onmouseout="hide()">.load</a></span>( <span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('url - сокращ. англ. слов Uniform Resource Locator<br>- единообразный локатор (определитель<br>местонахождения) ресурса.')" onmouseout="hide()">url</a></span>, <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on load - на загрузку')" onmouseout="hide()">onLoad</a></span>, <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on progress - на ход процесса')" onmouseout="hide()">onProgress</a></span>, <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on error - на ошибку')" onmouseout="hide()">onError</a></span> )</pre>
<div class=list><tt><span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('url - сокращ. англ. слов Uniform Resource Locator<br>- единообразный локатор (определитель<br>местонахождения) ресурса.')" onmouseout="hide()">url</a></span></tt>
— строка, содержащая путь/URL-адрес babylon-файла (обязательный аргумент).</div>
<div class=list><tt><span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on load - на загрузку')" onmouseout="hide()">onLoad</a></span></tt> — функция, которая будет вызвана после успешного завершения загрузки, дополнительный, необязательный параметр. В качестве аргумента, эта функция получает загруженный <a href="core.htm#14" onmouseover="show('Object3D')" onmouseout="hide()">Object3D</a>.</div>
<div class=list><tt><span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on progress - на ход процесса')" onmouseout="hide()">onProgress</a></span></tt>
- функция, которая будет вызываться пока идет процесс загрузки.
Аргументом будет экземпляр XMLHttpRequest, что содержит сведения о загрузке <tt><span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('total - полный (размер ресурса)')" onmouseout="hide()">total</a></span></tt>
и <tt><span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('loaded - загружено, в данном случае<br>размер загруженного ресурса')" onmouseout="hide()">loaded</a></span></tt> в байтах.</div>
<div class=list><tt><span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on error - на ошибку')" onmouseout="hide()">onError</a></span></tt> — функция, которая будет вызвана в случае ошибки при загрузке, дополнительный, необязательный параметр. Функция принимает ошибку в качестве аргумента.</div>
Начинает загрузку с URL-адреса и после её успешного завершения вызывает функцию, указанную в <tt>onLoad</tt>, с .
Begin loading from url and call onLoad with the parsed response content.<br><br>

<pre id="3.1parse"><a href="core.htm#14" onmouseover="show('Object3D.<br>parse - разбор, структурный анализ')" onmouseout="hide()">.parse</a>( <span onclick="showClick(type_obj)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('json - сокр. от англ. слов JavaScript Object Notation —<br>текстовый формат описания объекта, основанный на JavaScript')" onmouseout="hide()">json</a></span> )</pre>
<div class=list><tt><span onclick="showClick(type_obj)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('json - сокр. от англ. слов JavaScript Object Notation —<br>текстовый формат описания объекта, основанный на JavaScript')" onmouseout="hide()">json</a></span></tt>
— анализируемая JSON-структура.</div>
Метод проводит анализ JSON-структуры и возвращает <a href="core.htm#14" onmouseover="show('Object3D')" onmouseout="hide()">объект</a> или <a href="scenes.htm#3" onmouseover="show('Scene')" onmouseout="hide()">сцену</a>.<br>
Найденные объекты конвертируются в <a href="objects.htm#7" onmouseover="show('Mesh')" onmouseout="hide()">Mesh</a> c <a href="core.htm#2" onmouseover="show('BufferGeometry')" onmouseout="hide()">BufferGeometry</a>
и по умолчанию с <a href="materials.htm#8" onmouseover="show('MeshPhongMaterial')" onmouseout="hide()">MeshPhongMaterial</a>.<br>
Освещение обрабатывается соответственно.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/BabylonLoader.js" target="_blank">BabylonLoader.js на github.com</a></div><br><br>


<span class="right_side"><a href="loaders.htm#12" title="Переход к родительскому классу"><tt>Loader &rarr;</tt></a></span>
<h3 id="3.2">GLTFLoader</h3>
Загрузчик для загрузки ресурсов в формате <em>glTF 2.0</em>.<br>
Формат <a href="https://www.khronos.org/gltf" target="_blank">glTF (GL Transmission Format)</a> это <a href="https://github.com/KhronosGroup/glTF/tree/master/specification/2.0" target="_blank">спецификация открытого формата</a> для эффективной передачи и загрузки 3D content.
Ресурсы могут быть предоставлены либо в формате JSON (с расширением <tt>.gltf</tt>), либо в бинарном формате (<tt>.glb</tt>). Текстуры (<tt>.jpg</tt>, <tt>.png</tt>, ...) и дополнительные бинарные данные (<tt>.bin</tt>) хранятся во внешних файлах.
Ресурс glTF может представить одну или несколько сцен, включая сетки (mesh), материалы, текстуры, оболочки (skin), "скелеты", цели морфинга, анимации, освещение и/или камеры.<br><br>

<h4>Расширения</h4>
GLTFLoader поддерживает следующие <a href="https://github.com/KhronosGroup/glTF/tree/master/extensions/" target="_blank">расширения glTF</a>:
<div class=blockindent>KHR_draco_mesh_compression<br>
KHR_materials_pbrSpecularGlossiness<br>
KHR_materials_unlit<br>
KHR_lights (экспериментально)</div><br>

<h4>Пример</h4>
<div><a class='link' onclick='javascript:spoiler1(this)'>... показать</a>
<div style='display:none;'>
<pre>// Instantiate a loader (создание экземпляра загрузчика)
var loader = new THREE.GLTFLoader();<br>
// Optional: Provide a DRACOLoader instance to decode compressed mesh data
// опционально: предоставление экземпляра DRACOLoader для декодирования сжатых данных сетки
THREE.DRACOLoader.setDecoderPath( '/examples/js/libs/draco' );
loader.setDRACOLoader( new THREE.DRACOLoader() );<br>
// Load a glTF resource (загрузка ресурсов в формате glTF)
loader.load(
  // resource URL (URL-адрес ресурса)
  'models/gltf/duck/duck.gltf',
  // called when the resource is loaded (вызывается по завершении загрузки)
  function ( gltf ) {<br>
    scene.add( gltf.scene );<br>
    gltf.animations; // Array (массив) &#60;THREE.AnimationClip>
    gltf.scene; // THREE.Scene
    gltf.scenes; // Array (массив) &#60;THREE.Scene>
    gltf.cameras; // Array (массив) &#60;THREE.Camera>
    gltf.asset; // Object (объект)<br>
  },
  // called when loading is in progresses (вызывается во время загрузки)
  function ( xhr ) {<br>
    console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );<br>
  },
  // called when loading has errors (вызывается при ошибках в загрузке)
  function ( error ) {<br>
    console.log( 'An error happened' );
  }
);</pre></div></div>
<h5>Другие примеры:</h5>
<pre><a href="https://threejs.org/examples/#webgl_loader_gltf" target="_blank">webgl / loader / gltf</a></pre><br>

<h4>Совместимость с браузером</h4>
GLTFLoader полагается на <a href="https://learn.javascript.ru/promise" target="_blank">обещания (Promise)</a> от ES6, которые не поддерживаются в IE11.
Для использования загрузчика в IE11, нужно подключить полифилл предоставляющий подмену Promise (обещания).<br><br>

<h4>Конструктор</h4>
<pre>GLTFLoader( <a href="loaders.htm#16.2" onmouseover="show('LoadingManager.<br>manager - менеджер, управляющий')" onmouseout="hide()">manager</a> )</pre>
<div class=list><tt><a href="loaders.htm#16.2" onmouseover="show('LoadingManager.<br>manager - менеджер, управляющий')" onmouseout="hide()">manager</a></tt>
— <a href="loaders.htm#16.2" onmouseover="show('LoadingManager')" onmouseout="hide()">менеджер загрузки</a>, используемый для загрузки.
Значением по умолчанию является <a href="loaders.htm#16.2" onmouseover="show('LoadingManager')" onmouseout="hide()">THREE.DefaultLoadingManager</a>.</div>
Создает новый GLTFLoader.<br><br>

<h4>Свойства</h4>
<br><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="3.2load"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('load - загрузить')" onmouseout="hide()">.load</a></span>( <span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('url - сокращ. англ. слов Uniform Resource Locator<br>- единообразный локатор (определитель<br>местонахождения) ресурса.')" onmouseout="hide()">url</a></span>, <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on load - на загрузку')" onmouseout="hide()">onLoad</a></span>, <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on progress - на ход процесса')" onmouseout="hide()">onProgress</a></span>, <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on error - на ошибку')" onmouseout="hide()">onError</a></span> )</pre>
<div class=list><tt>url</tt> — строка, содержащая путь/URL-адрес <tt>.gltf</tt> или <tt>.glb</tt> файла.</div>
<div class=list><tt>onLoad</tt> — A function to be called after the loading is successfully completed. The function receives the loaded JSON response returned from parse.</div>
<div class=list><tt>onProgress</tt> — (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, that contains .total and .loaded bytes.</div>
<div class=list><tt>onError</tt> — (optional) A function to be called if an error occurs during loading. The function receives error as an argument.</div>
Begin loading from url and call the callback function with the parsed response content.<br><br>

<pre id="3.2setPath">.setPath ( path )</pre>
<div class=list><tt>path</tt> — Base path for loading additional resources e.g. textures and .bin data.</div>
Set the base path for additional resources.<br><br>

<pre id="3.2setCrossOrigin">.setCrossOrigin ( value )</pre>
<div class=list><tt>value</tt> — The crossOrigin string to implement CORS for loading the url from a different domain that allows CORS.</div><br>

<pre id="3.2parse">.parse ( data, path, onLoad, onError )</pre>
<div class=list><tt>data</tt> — glTF asset to parse, as an ArrayBuffer or JSON string.</div>
<div class=list><tt>path</tt> — The base path from which to find subsequent glTF resources such as textures and .bin data files.</div>
<div class=list><tt>onLoad</tt> — A function to be called when parse completes.</div>
<div class=list><tt>onError</tt> — (optional) A function to be called if an error occurs during parsing. The function receives error as an argument.</div>
Parse a glTF-based ArrayBuffer or JSON String and fire onLoad callback when complete. The argument to onLoad will be an object that contains loaded parts: .scene, .scenes, .cameras, and .animations.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/GLTFLoader.js" target="_blank">GLTFLoader.js на github.com</a></div><br><br>


<h3 id="3.3">MTLLoader</h3>
Загрузчик для загрузки ресурсов в формате <em>.mtl</em>, который используется загрузчиками
<a href="#3.4" onmouseover="show('OBJLoader')" onmouseout="hide()">OBJLoader</a> и <a href="#" onmouseover="show('UTF8Loader')" onmouseout="hide()">UTF8Loader</a>.
Формат MTL (Material Template Library, т.е. библиотека шаблонов материала) или файловый формат <tt>.MTL</tt> - это формат, сопутствующий файлам <a href="https://ru.wikipedia.org/wiki/Obj" target="_blank">формата <tt>.OBJ</tt></a>,
который описывает свойства поверхности затенения (материала) объектов в одном или нескольких файлах <tt>.OBJ</tt>.<br><br>

<h4>Конструктор</h4>
<pre>MTLLoader( <a href="loaders.htm#16.2" onmouseover="show('LoadingManager.<br>manager - менеджер, управляющий')" onmouseout="hide()">loadingManager</a> )</pre>
<div class=list><tt><a href="loaders.htm#16.2" onmouseover="show('LoadingManager.<br>manager - менеджер, управляющий')" onmouseout="hide()">manager</a></tt>
— <a href="loaders.htm#16.2" onmouseover="show('LoadingManager')" onmouseout="hide()">менеджер загрузки</a>, используемый для загрузки.
Значением по умолчанию является <a href="loaders.htm#16.2" onmouseover="show('LoadingManager')" onmouseout="hide()">THREE.DefaultLoadingManager</a>.</div>
Создает новый MTLLoader.<br><br>

<h4>Свойства</h4>
<br><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="3.3load"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('load - загрузить')" onmouseout="hide()">.load</a></span>( <span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('url - сокращ. англ. слов Uniform Resource Locator<br>- единообразный локатор (определитель<br>местонахождения) ресурса.')" onmouseout="hide()">url</a></span>, <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on load - на загрузку')" onmouseout="hide()">onLoad</a></span>, <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on progress - на ход процесса')" onmouseout="hide()">onProgress</a></span>, <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on error - на ошибку')" onmouseout="hide()">onError</a></span> )</pre>
<div class=list><tt>url</tt> —  строка, содержащая путь/URL-адрес <tt>.mtl</tt> файла.</div>
<div class=list><tt>onLoad</tt> — функция, которая будет вызвана после успешного завершения загрузки, дополнительный, необязательный параметр.
В качестве аргумента, эта функция получает загруженный экземпляр <tt>MTLLoader.MaterialCreator</tt>.</div>
<div class=list><tt>onProgress</tt> —  функция, которая будет вызываться пока идет процесс загрузки. Аргументом будет экземпляр XMLHttpRequest, что содержит сведения о загрузке <tt><span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('total - полный (размер ресурса)')" onmouseout="hide()">total</a></span></tt>
и <tt><span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('loaded - загружено, в данном случае<br>размер загруженного ресурса')" onmouseout="hide()">loaded</a></span></tt> в байтах.</div>
<div class=list><tt>onError</tt> — функция, которая будет вызвана в случае ошибки при загрузке, дополнительный, необязательный параметр. Функция принимает ошибку в качестве аргумента.</div>
Начинает загрузку с переданного url-адреса и возвращает загруженный материал.<br><br>

<pre id="3.3setPath"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('set path - установить путь')" onmouseout="hide()">.setPath</a></span>( <span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('path - путь')" onmouseout="hide()">path</a></span> )</pre>
<div class=list><tt>path</tt> — обязательный параметр.</div>
Устанавливает базовый путь для решающих ссылок. Если это установлено, этот путь будет добавлен к каждой загруженной и найденной ссылке.<br><br>

<pre id="3.3setTexturePath"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('set texture path - установить путь (к) текстуре')" onmouseout="hide()">.setTexturePath</a></span>( [page:String path</a> )</pre>
<div class=list><tt>path</tt> — обязательный параметр.</div>
Устанавливает базовый путь для решающих ссылок к текстуре. Если он установлен, этот путь будет добавлен к каждой загруженной и найденной ссылке к текстуре.
Если не установлен, а <tt>setPath</tt> имеется, он будет использоваться в качестве базового пути к текстуре.<br><br>

<pre id="3.3setCrossOrigin"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('set cross origin - установить перекрестный источник')" onmouseout="hide()">.setCrossOrigin</a></span>( <span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('use cross origin - использовать перекрестный источник')" onmouseout="hide()">useCrossOrigin</a></span> )</pre>
<div class=list><tt>useCrossOrigin</tt> — обязательный параметр.</div>
Установите значение <tt>true</tt>, если нужно загрузить текстуры из другого источника.<br><br>

<pre id="3.3setMaterialOptions"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('set material options - установить параметры материала')" onmouseout="hide()">.setMaterialOptions</a></span>( <span onclick="showClick(type_obj)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('options - опции, параметры, варианты')" onmouseout="hide()">options</a></span> )</pre>
<div class=list><tt>options</tt> — обязательный параметр.<br>
&nbsp; &#9679; &nbsp; <tt>side</tt>: Which side to apply the material. THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide<br>
&nbsp; &#9679; &nbsp; <tt>wrap</tt>: What type of wrapping to apply for textures. THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping<br>
&nbsp; &#9679; &nbsp; <tt>normalizeRGB</tt>: RGBs need to be normalized to 0-1 from 0-255. Default: false, assumed to be already normalized<br>
&nbsp; &#9679; &nbsp; <tt>ignoreZeroRGBs</tt>: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's. Default: false</div>
Устанавливает параметры построения материалов.
Set of options on how to construct the materials<br><br>

<pre id="3.3parse">[method:MTLLoaderMaterialCreator parse</a>( [page:String text</a> )</pre>
<div class=list>[page:String text</a> — The textual <em>mtl</em> structure to parse.</div>
Parse a <em>mtl</em> text structure and return a [page:MTLLoaderMaterialCreator</a> instance.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/MTLLoader.js" target="_blank">MTLLoader.js на github.com</a></div><br><br>


<h3 id="3.4">OBJLoader</h3>
Загрузчик для загрузки ресурсов в формате <em>obj</em>.<br>
The <a href="https://en.wikipedia.org/wiki/Wavefront_.obj_file" target="_blank">OBJ file format</a> is a simple data-format that represents 3D geometry in a human readable format as the position of each vertex, the UV position of each texture coordinate vertex, vertex normals, and the faces that make each polygon defined as a list of vertices, and texture vertices.<br>
Статья Википедии <a href="https://ru.wikipedia.org/wiki/Obj" target="_blank">о формате obj</a> на русском языке.<br><br>

<h4>Пример</h4>
<pre>// instantiate a loader
var loader = new THREE.OBJLoader();<br>
// load a resource
loader.load(
  // resource URL
  'models/monster.obj',
  // called when resource is loaded
  function ( object ) {
     scene.add( object );
  },<br>
  // called when loading is in progresses
  function ( xhr ) {
    console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );<br>
  },<br>
  // called when loading has errors
  function ( error ) {
     console.log( 'An error happened' );
  }
);</pre>
<h5>Другие примеры:</h5>
<pre><a href="https://threejs.org/examples/#webgl_loader_obj" target="_blank">webgl / loader / obj</a></pre><br>

<h4>Конструктор</h4>
<pre>OBJLoader( [page:LoadingManager manager</a> )</pre>
<div class=list>[page:LoadingManager manager</a> — The [page:LoadingManager loadingManager</a> for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager</a>.</div>
Создает новый OBJLoader.<br><br>

<h4>Свойства</h4>
<br><br>

<h4>Методы</h4>

		<h3>[method:null load</a>( [page:String url</a>, [page:Function onLoad</a>, [page:Function onProgress</a>, [page:Function onError</a> )</h3>
		<div>
		[page:String url</a> — required<br />
		[page:Function onLoad</a> — Will be called when load completes. The argument will be the loaded [page:Object3D</a>.<br />
		[page:Function onProgress</a> — Will be called while load progresses. The argument will be the XMLHttpRequest instance, which contains .[page:Integer total</a> and .[page:Integer loaded</a> bytes.<br />
		[page:Function onError</a> — Will be called when load errors.<br />
		</div>
		<div>
		Begin loading from url and call onLoad with the parsed response content.
		</div>

		<h3>[method:Object3D parse</a>( [page:String text</a> )</h3>
		<div>
		[page:String text</a> — The textual <em>obj</em> structure to parse.
		</div>
Returns an [page:Object3D</a>. It contains the parsed meshes as [page:Mesh</a> and lines as [page:LineSegments</a>.<br />
		All geometry is created as [page:BufferGeometry</a>. Default materials are created as [page:MeshPhongMaterial</a>.<br />
		If an <em>obj</em> object or group uses multiple materials while declaring faces geometry groups and an array of materials are used.
		</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/OBJLoader.js" target="_blank">OBJLoader.js на github.com</a></div><br><br>


<h3 id="3.5">OBJLoader2</h3>
A loader for loading a <em>.obj</em> resource.<br>
The OBJ file format is a simple data-format that represents 3D geometry in a human redeable format as, the position of each vertex, the UV position of each texture coordinate vertex, vertex normals, and the faces that make each polygon defined as a list of vertices, and texture vertices.

<h4>Пример</h4>
<pre>
		// instantiate the loader
		var loader = new THREE.OBJLoader2();

		// function called on successful load
		var intergrateIntoScene = function ( object ) {
			scene.add( object );
		};

		// load a resource from provided URL
		loader.load( 'obj/female02/female02.obj', intergrateIntoScene );
  </pre>

		[example:webgl_loader_obj2</a>


  <h4>Конструктор</h4>

		<h3>OBJLoader2( [page:LoadingManager manager</a> )</h3>
		<div>
		[page:LoadingManager manager</a> — The [page:LoadingManager loadingManager</a> for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager</a>.
		</div>
		<div>
			Use [name</a> to load OBJ data from files or to parse OBJ data from arraybuffer or text.
		</div>

  <h4>Свойства</h4>


  <h4>Методы</h4>

		<h3>[method:null load</a>( [page:String url</a>, [page:Function onLoad</a>, [page:Function onProgress</a>, [page:Function onError</a>, [page:Boolean useArrayBuffer</a> )</h3>
		<div>
			[page:String url</a> — URL of the file to load<br />
			[page:Function onLoad</a> — Called after loading was successfully completed. The argument will be the loaded [page:Object3D</a>.<br />
			[page:Function onProgress</a> — Called to report progress of loading. The argument will be the XMLHttpRequest instance, which contains .[page:Integer total</a> and .[page:Integer loaded</a> bytes.<br />
			[page:Function onError</a>  Called after an error occurred during loading.<br />
			[page:boolean useArrayBuffer</a> — Set this to false to force string based parsing<br />
		</div>
		<div>
			Use this convenient method to load an OBJ file at the given URL. Per default the fileLoader uses an arraybuffer
		</div>

		<h3>[method:Object3D parse</a>( [page:ArrayBuffer arrayBuffer</a> )</h3>
		<div>
			[page:ArrayBuffer arrayBuffer</a> — OBJ data as Uint8Array
		</div>
		<div>
			Default parse function: Parses OBJ file content stored in arrayBuffer and returns the [page:Object3D sceneGraphBaseNode</a>.
		</div>

		<h3>[method:Object3D parseText</a>( [page:String test</a> )</h3>
		<div>
			[page:String text</a> — OBJ data as string
		</div>
		<div>
			Legacy parse function: Parses OBJ file content stored in string and returns the [page:Object3D sceneGraphBaseNode</a>.
		</div>

		<h3>[method:null setMaterials</a> ( Array of [page:Material materials</a> )</h3>
		<div>
			Array of [page:Material materials</a> — Array of [page:Material Materials</a> from MTLLoader
		</div>
		<div>
			Set materials loaded by MTLLoader or any other supplier of an Array of [page:Material Materials</a>.
		</div>

		<h3>[method:null setPath</a> ( [page:String path</a> )</h3>
		<div>
			[page:String path</a> — The basePath
		</div>
		<div>
			Base path to use.
		</div>

		<h3>[method:null setSceneGraphBaseNode</a> ( [page:Object3D sceneGraphBaseNode</a> )</h3>
		<div>
			[page:Object3D sceneGraphBaseNode</a> — Scenegraph object where meshes will be attached
		</div>
		<div>
			Set the node where the loaded objects will be attached.
		</div>

		<h3>[method:null setDebug</a>( [page:Boolean parserDebug</a>, [page:Boolean meshCreatorDebug</a> )</h3>
		<div>
			[page:Boolean parserDebug</a> — Internal Parser will produce debug output<br>
			[page:Boolean meshCreatorDebug</a> — Internal MeshCreator will produce debug output
		</div>
Allows to set debug mode for the parser and the meshCreator.
		</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/OBJLoader2.js" target="_blank">OBJLoader2.js на github.com</a></div><br><br>


<h3 id="3.6">LoaderSupport</h3>
Вспомогательные классы для загрузчиков файлов и
Supporting classes for file loaders and web worker based loaders.
<h4>Подклассы</h4>
<pre><a href="#3.6.1" onmouseover="show('LoaderSupport.Builder')" onmouseout="hide()">LoaderSupport.Builder</a>
<a href="#3.6.2" onmouseover="show('LoaderSupport.LoadedMeshUserOverride')" onmouseout="hide()">LoaderSupport.LoadedMeshUserOverride</a>
<a href="#3.6.3" onmouseover="show('LoaderSupport.WorkerSupport')" onmouseout="hide()">LoaderSupport.WorkerSupport</a>
<a href="#3.6.4" onmouseover="show('LoaderSupport.WorkerRunnerRefImpl')" onmouseout="hide()">LoaderSupport.WorkerRunnerRefImpl</a>
<a href="#3.6.5" onmouseover="show('LoaderSupport.WorkerDirector')" onmouseout="hide()">LoaderSupport.WorkerDirector</a>
<a href="#3.6.6" onmouseover="show('LoaderSupport.PrepData')" onmouseout="hide()">LoaderSupport.PrepData</a>
<a href="#3.6.7" onmouseover="show('LoaderSupport.LoaderBase')" onmouseout="hide()">LoaderSupport.LoaderBase</a>
<a href="#3.6.8" onmouseover="show('LoaderSupport.Callbacks')" onmouseout="hide()">LoaderSupport.Callbacks</a>
<a href="#3.6.9" onmouseover="show('LoaderSupport.Validator')" onmouseout="hide()">LoaderSupport.Validator</a></pre>

<h4>Пример</h4>
<tt><a href="https://threejs.org/examples/#webgl_loader_obj2_meshspray" target="_blank">webgl / loader / obj2 / meshspray</a></tt>
- пример использования <tt><a href="#3.6.5" onmouseover="show('LoaderSupport.WorkerDirector')" onmouseout="hide()">LoaderSupport.WorkerDirector</a></tt> и <tt><a href="#3.6.3" onmouseover="show('LoaderSupport.WorkerSupport')" onmouseout="hide()">LoaderSupport.WorkerSupport</a></tt>.<br><br>

<h3 id="3.6.1">Builder</h3>
<h4>Конструктор</h4>
<pre>Builder( )</pre>
Builds one or many Mesh from one raw set of Arraybuffers, materialGroup descriptions and further parameters. Supports vertex, vertexColor, normal, uv and index buffers.<br><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="3.6.1setLogging"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('set logging - установка ведения журнала (логирования)')" onmouseout="hide()">.setLogging</a></span>( <span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('enabled - включено')" onmouseout="hide()">enabled</a></span>, <span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('debug - отладка')" onmouseout="hide()">debug</a></span> )</pre>
<div class=list><tt>enabled</tt> - True or false.</div>
<div class=list><tt>debug</tt> - True or false.</div>
Метод включает или отключает ведение журнала (логирование) в общем (за исключением предупреждений и ошибок), плюс включает или отключает логирование ошибок.<br><br>

<pre id="3.6.1init"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('init - сокращ. англ. слова initialize - инициализация')" onmouseout="hide()">.init</a></span>( )</pre>
Initializes the Builder (currently only default material initialisation).<br><br>

<pre id="3.6.1setMaterials">.setMaterials ( Array of materials )</pre>
Array of materials - Array of Materials
Set materials loaded by any supplier of an Array of Materials.<br><br>

<pre id="3.6.1processPayload">.processPayload ( Object payload )</pre>
<div class=list>payload - Raw Mesh or Material descriptions.</div>
Delegates processing of the payload (mesh building or material update) to the corresponding functions (BW-compatibility).<br><br>

<pre id="3.6.1buildMeshes">.buildMeshes ( Object meshPayload )</pre>
<div class=list>meshPayload - Raw mesh description (buffers, params, materials) used to build one to many meshes.</div>
Builds one or multiple meshes from the data described in the payload (buffers, params, material info).<br><br>

<pre id="3.6.1updateMaterials">.updateMaterials ( Object materialPayload )</pre>
<div class=list>materialPayload - Material update instructions</div>
Updates the materials with contained material objects (sync) or from alteration instructions (async).<br><br>

<pre id="3.6.1getMaterialsJSON">.getMaterialsJSON ()</pre>
Returns the mapping object of material name and corresponding jsonified material.<br><br>

<pre id="3.6.1getMaterials">.getMaterials ()</pre>
Returns the mapping object of material name and corresponding material.</div><br>


<h3 id="3.6.2">LoadedMeshUserOverride</h3>
<h4>Конструктор</h4>
<pre>LoadedMeshUserOverride( disregardMesh, bufferGeometry )</pre>
<div class=list>disregardMesh - Tell implementation to completely disregard this mesh</div>
<div class=list>alteredMesh - Tell implementation that mesh(es) have been altered or added</div>
Object to return by callback onMeshAlter. Used to disregard a certain mesh or to return one to many meshes.<br><br>

<h4>Методы</h4>
#
.addMesh ( mesh )
mesh - Mesh
Add a mesh created within callback.
#
.isDisregardMesh ()
Answers if mesh shall be disregarded completely.
#
.providesAlteredMeshes ()
Answers if new mesh(es) were created.


<h3 id="3.6.3">WorkerSupport</h3>
<h4>Конструктор</h4>
WorkerSupport( logger )
logger - logger to be used
This class provides means to transform existing parser code into a web worker. It defines a simple communication protocol which allows to configure the worker and receive raw mesh data during execution.
<h4>Методы</h4>
#
.validate ( functionCodeBuilder, Array of libLocations, libPath, runnerImpl )
functionCodeBuilder - Function that is invoked with funcBuildObject and funcBuildSingelton that allows stringification of objects and singletons.
Array of libLocations - URL of libraries that shall be added to worker code relative to libPath.
libPath - Base path used for loading libraries.
runnerImpl - The default worker parser wrapper implementation (communication and execution). An extended class could be passed here.
Validate the status of worker code and the derived worker.
#
.setTerminateRequested ( terminateRequested )
terminateRequested - True or false.
Request termination of worker once parser is finished.
#
.setCallbacks ( builder, onLoad )
builder - The builder function. Default is LoaderSupport.Builder.
onLoad - The function that is called when parsing is complete.
Specify functions that should be build when new raw mesh data becomes available and when the parser is finished.
#
.run ( payload )
payload - Raw mesh description (buffers, params, materials) used to build one to many meshes.
Runs the parser with the provided configuration.


<h3 id="3.6.4">WorkerRunnerRefImpl</h3>
<h4>Конструктор</h4>
WorkerRunnerRefImpl()
Default implementation of the WorkerRunner responsible for creation and configuration of the parser within the worker.
<h4>Методы</h4>
#
.applyProperties ( parser, params )
parser - The parser instance
params - The parameter object
Applies values from parameter object via set functions or via direct assignment.
#
.run ( payload )
payload - Raw mesh description (buffers, params, materials) used to build one to many meshes.
Configures the Parser implementation according the supplied configuration object.


<h3 id="3.6.5">WorkerDirector</h3>
<h4>Конструктор</h4>
WorkerDirector( classDef, logger )
classDef - Class definition to be used for construction
logger - logger to be used
Orchestrate loading of multiple OBJ files/data from an instruction queue with a configurable amount of workers (1-16).
- Workflow:
- prepareWorkers
- enqueueForRun
- processQueue
- tearDown

<h4>Методы</h4>
#
.prepareWorkers ( globalCallbacks, maxQueueSize, maxWebWorkers )
globalCallbacks - Register global callbacks used by all web workers
maxQueueSize - Set the maximum size of the instruction queue (1-1024)
maxWebWorkers - Set the maximum amount of workers (1-16)
Create or destroy workers according limits. Set the name and register callbacks for dynamically created web workers.
#
.enqueueForRun ( runParams )
runParams
Store run instructions in internal instructionQueue.
#
.processQueue ()
Process the instructionQueue until it is depleted.
#
.tearDown ( callbackOnFinishedProcessing )
callbackOnFinishedProcessing - Function called once all workers finished processing.
Terminate all workers.
#
.getMaxQueueSize ()
Returns the maximum length of the instruction queue.
#
.getMaxWebWorkers ()
Returns the maximum number of workers.
#
.isRunning ()
Returns if any workers are running.
#
.setCrossOrigin ( crossOrigin )
crossOrigin - CORS value
Sets the CORS string to be used.

<h3 id="3.6.6">PrepData</h3>
<h4>Конструктор</h4>
PrepData( modelName )
modelName - Overall name of the model
Configuration instructions to be used by run method.
<h4>Методы</h4>
#
.setStreamMeshesTo ( streamMeshesTo )
streamMeshesTo - Object already attached to scenegraph where new meshes will be attached to
Set the node where the loaded objects will be attached directly.
#
.setMaterialPerSmoothingGroup ( materialPerSmoothingGroup )
materialPerSmoothingGroup
Tells whether a material shall be created per smoothing group.
#
.setUseIndices ( useIndices )
useIndices - Default is false
Instructs loaders to create indexed BufferGeometry.
#
.setDisregardNormals ( disregardNormals )
disregardNormals
Tells whether normals should be completely disregarded and regenerated.
#
.getCallbacks ()
Returns all callbacks as LoaderSupport.Callbacks.
#
.setCrossOrigin ( crossOrigin )
crossOrigin - CORS value
Sets the CORS string to be used.
#
.addResource ( resource )
resource
Add a resource description.
#
.setUseAsync ( useAsync )
useAsync
If true uses async loading with worker, if false loads data synchronously.


<h3 id="3.6.7">LoaderBase</h3>
<h4>Конструктор</h4>
LoaderBase( manager, logger )
manager - The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager. logger - logger to be used
Base class to be used by loaders.
<h4>Методы</h4>
#
.getLogger ()
Returns LoaderSupport.ConsoleLogger.
#
.setModelName ( modelName )
modelName
Set the name of the model.
#
.setPath ( path )
path - URL
The URL of the base path.
#
.setStreamMeshesTo ( streamMeshesTo )
streamMeshesTo - Object already attached to scenegraph where new meshes will be attached to
Set the node where the loaded objects will be attached directly.
#
.setMaterials ( Array of materials )
Array of materials - Array of Materials
Set materials loaded by MTLLoader or any other supplier of an Array of Materials.
#
.setUseIndices ( useIndices )
useIndices
Instructs loaders to create indexed BufferGeometry.
#
.setDisregardNormals ( disregardNormals )
disregardNormals
Tells whether normals should be completely disregarded and regenerated.
#
.onProgress ( type, text, numericalValue )
type - The type of event
text - Textual description of the event
numericalValue - Numerical value describing the progress
Announce feedback which is give to the registered LoaderSupport.Callbacks.


<h3 id="3.6.8">Callbacks</h3>
<h4>Конструктор</h4>
Callbacks()
Callbacks utilized by loaders and builder.
<h4>Методы</h4>
#
.setCallbackOnProgress ( callbackOnProgress )
callbackOnProgress - Callback function for described functionality
Register callback function that is invoked by internal function "announceProgress" to print feedback.
#
.setCallbackOnMeshAlter ( callbackOnMeshAlter )
callbackOnMeshAlter - Callback function for described functionality
Register callback function that is called every time a mesh was loaded. Use LoadedMeshUserOverride for alteration instructions (geometry, material or disregard mesh).
#
.setCallbackOnLoad ( callbackOnLoad )
callbackOnLoad - Callback function for described functionality
Register callback function that is called once loading of the complete OBJ file is completed.
#
.setCallbackOnLoadMaterials ( callbackOnLoadMaterials )
callbackOnLoadMaterials - Callback function for described functionality
Register callback function that is called when materials have been loaded.


<h3 id="3.6.9">Validator</h3>

<h4>Конструктор</h4>
<pre>Validator( )</pre>
Функции проверки.<br><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="3.6.9isValid"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('is valid - является допустимым')" onmouseout="hide()">.isValid</a></span>( <span onclick="showClick(type_obj)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('input - вход, ввод')" onmouseout="hide()">input</a></span> )</pre>
<div class=list><tt>input</tt> - значение может быть любым.</div>
If given input is null or undefined, false is returned otherwise true.<br><br>

<pre id="3.6.9verifyInput"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('')" onmouseout="hide()">.verifyInput</a></span>( <span onclick="showClick(type_obj)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('input - вход, ввод')" onmouseout="hide()">input</a></span>, <span onclick="showClick(type_obj)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('default value - значение по умолчанию')" onmouseout="hide()">defaultValue</a></span> )</pre>
<div class=list><tt>input</tt> - значение может быть любым.</div>
<div class=list><tt>defaultValue</tt> - значение может быть любым.</div>
If given input is null or undefined, the defaultValue is returned otherwise the given input.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/LoaderSupport.js" target="_blank">LoaderSupport.js на github.com</a></div><br><br>


<h3 id="3.7">PCDLoader</h3>
A loader for <em>PCD</em> files. Loads ascii and binary.
			Compressed binary files are not supported.</div>

<h4>Пример</h4>

  <pre>

		// instantiate a loader
		var loader = new THREE.PCDLoader();

		// load a resource
		loader.load(
			// resource URL
			'pointcloud.pcd' ,
			// Function when resource is loaded
			function ( mesh ) {
				scene.add( mesh );
			}
		);
  </pre>

		[example:webgl_loader_pcd</a>


  <h4>Конструктор</h4>

		<h3>PCDLoader( [page:LoadingManager manager</a> )</h3>
		<div>
		[page:LoadingManager manager</a> — The [page:LoadingManager loadingManager</a> for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager</a>.
		</div>
		<div>
		Creates a new [name</a>.
		</div>

  <h4>Свойства</h4>

		<h3>[page:Boolean littleEndian</a></h3>
		<div>
		Default value is true.
		</div>

  <h4>Методы</h4>

		<h3>[method:null load</a>( [page:String url</a>, [page:Function onLoad</a>, [page:Function onProgress</a>, [page:Function onError</a> )</h3>
		<div>
		[page:String url</a> — required<br />
		[page:Function onLoad</a> — Will be called when load completes. The argument will be the loaded [page:Object3D</a>.<br />
		[page:Function onProgress</a> — Will be called while load progresses. The argument will be the XMLHttpRequest instance, which contains .[page:Integer total</a> and .[page:Integer loaded</a> bytes.<br />
		[page:Function onError</a> — Will be called when load errors.<br />
		</div>
		<div>
		Begin loading from url and call onLoad with the parsed response content.
		</div>

		<h3>[method:Object3D parse</a>( [page:Arraybuffer data</a>,[page:String url</a> )</h3>
		<div>
		[page:Arraybuffer data</a> — The binary structure to parse.
		</div>
		<div>
		[page:String url</a> — The file name or file url.
		</div>
Parse an <em>pcd</em> binary structure and return an [page:Object3D</a>.<br />
		The object is converted to [page:Points</a> with a [page:BufferGeometry</a> and a [page:PointsMaterial</a>.
		</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/PCDLoader.js" target="_blank">PCDLoader.js на github.com</a></div><br><br>


<h3 id="3.8">PDBLoader</h3>
A loader for loading a <em>.pdb</em> resource.<br>
		The <a href="http://en.wikipedia.org/wiki/Protein_Data_Bank_(file_format)">Protein Data Bank file format</a> is a textual file format describing the three-dimensional structures of molecules.
		</div>

  <h4>Пример</h4>

  <pre>
		// instantiate a loader
		var loader = new THREE.PDBLoader();

		// load a PDB resource
		loader.load(
			// resource URL
			'models/molecules/caffeine.pdb',
			// Function when resource is loaded
			function ( geometryAtoms, geometryBonds, json ) {
				console.log( 'This molecule has ' + json.atoms.length + ' atoms' );
			},
			// Function called when download progresses
			function ( xhr ) {
				console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );
			},
			// Function called when download errors
			function ( xhr ) {
				console.log( 'An error happened' );
			}
		);
  </pre>

		[example:webgl_loader_pdb</a>


  <h4>Конструктор</h4>

		<h3>PDBLoader( [page:LoadingManager manager</a> )</h3>
		<div>
		[page:LoadingManager manager</a> — The [page:LoadingManager loadingManager</a> for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager</a>.
		</div>
		<div>
		Creates a new PDBLoader.
		</div>

  <h4>Свойства</h4>


  <h4>Методы</h4>

		<h3>[method:null load</a>( [page:String url</a>, [page:Function onLoad</a>, [page:Function onProgress</a>, [page:Function onError</a> )</h3>
		<div>
		[page:String url</a> — required. URL to the <em>.pdb</em> file<br />
		[page:Function onLoad</a> — Will be called when load completes. The arguments will be an [page:BufferGeometry geometryAtoms</a>, [page:BufferGeometry geometryBonds</a> and the [page:Object JSON</a> structure.<br />
		[page:Function onProgress</a> — Will be called while load progresses. The argument will be the XMLHttpRequest instance, which contains .[page:Integer total</a> and .[page:Integer loaded</a> bytes.<br />
		[page:Function onError</a> — Will be called when load errors.<br />
		</div>
		<div>
		Begin loading from url and call onLoad with the parsed response content.
		</div>

		<h3>[method:Object parsePDB</a>( [page:String text</a> )</h3>
		<div>
		[page:String text</a> — The textual <em>pdb</em> structure to parse.
		</div>
		<div>
		Parse a <em>pdb</em> text and return a <em>JSON</em> structure.<br />
		</div>

		<h3>[method:null createModel</a>( [page:Object json</a>, [page:Function callback</a> )</h3>
		<div>
		[page:Object json</a> — The <em>(JSON) pdb</em> structure to parse.<br />
		[page:Function callback</a> — Will be called when parse completes, with three arguments: [page:BufferGeometry geometryAtoms</a>, [page:BufferGeometry geometryBonds</a> and the original [page:Object json</a>.<br />
		</div>
Parse a <em>(JSON) pdb</em> structure and return two [page:BufferGeometry</a>: one for atoms, one for bonds.
		</div><br>
<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/PDBLoader.js" target="_blank">PDBLoader.js на github.com</a></div><br><br>


<h3 id="3.9">SVGLoader</h3>
Загрузчик для загрузки ресурса в формате <em>.svg</em>.
<h4>Конструктор</h4>
<pre>SVGLoader( <a href="loaders.htm#16.2" title="LoadingManager">manager</a> )</pre>
<div class=list><a href="loaders.htm#16.2" title="LoadingManager">manager</a> — The [page:LoadingManager loadingManager</a> for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager</a>.</div>
Создает новый SVGLoader.<br><br>

<h4>Свойства</h4><br>

<h4>Методы</h4><br>
<div class=blockindent>
<pre id="2.10load"><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_null,'Arial,9',10,10,0xffffff,0xd69967)" title="load - загрузить">.load</a>( <a class=popupspot href="JavaScript:hhctrl.TextPopup(type_string,'Arial,9',10,10,0xffffff,0xd69967)" title="url - сокращ. от англ. слов Uniform Resource Locator — единообразный локатор (определитель местонахождения) ресурса">url</a>, <a class=popupspot href="JavaScript:hhctrl.TextPopup(type_func,'Arial,9',10,10,0xffffff,0xd69967)" title="on load - на загрузку">onLoad</a>, <a class=popupspot href="JavaScript:hhctrl.TextPopup(type_func,'Arial,9',10,10,0xffffff,0xd69967)" title="on progress - на ход процесса">onProgress</a>, <a class=popupspot href="JavaScript:hhctrl.TextPopup(type_func,'Arial,9',10,10,0xffffff,0xd69967)" title="on error - на ошибку">onError</a> )</pre>
<div class=indent1><tt><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_string,'Arial,9',10,10,0xffffff,0xd69967)" title="url - сокращ. от англ. слов Uniform Resource Locator — единообразный локатор (определитель местонахождения) ресурса">url</a></tt> — обязательный параметр</div>
<div class=indent1><tt><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_func,'Arial,9',10,10,0xffffff,0xd69967)" title="on load - на загрузку">onLoad</a></tt> — функция, которая должна быть вызвана по завершении загрузки. Её аргументом должен быть загруженный [page:SVGDocument</a>.</div>
<div class=indent1><tt><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_func,'Arial,9',10,10,0xffffff,0xd69967)" title="on progress - на ход процесса">onProgress</a></tt> — функция, которая будет вызвана во время хода процесса загрузки. Аргументом этой функции должен быть экземпляр XMLHttpRequest, which contains .[page:Integer total</a> and .[page:Integer loaded</a> bytes.</div>
<div class=indent1><tt><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_func,'Arial,9',10,10,0xffffff,0xd69967)" title="on error - на ошибку">onError</a></tt> — функция, которая будет вызвана при ошибках загрузки.</div>
Begin loading from url and call onLoad with the response content.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/SVGLoader.js" target="_blank">SVGLoader.js на github.com</a></div><br><br>


<h3 id="3.10">TGALoader</h3>
Class for loading a <em>.tga</em> [page:DataTexture texture</a>.

<h4>Пример</h4>
<pre>// instantiate a loader
var loader = new THREE.TGALoader();<br>
  // load a resource
  var texture = loader.load(
    // resource URL
    'textures/crate_grey8.tga'
    // Function when resource is loaded
    function ( texture ) {
      console.log( 'Texture is loaded' );
    },
    // Function called when download progresses
    function ( xhr ) {
      console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );
    },
    // Function called when download errors
    function ( xhr ) {
      console.log( 'An error happened' );
    }
  );<br>
var material = new THREE.MeshPhongMaterial( {
  color: 0xffffff,
  map: texture
} );</pre>

		[example:webgl_materials_texture_tga</a>

<h4>Конструктор</h4>
<pre>TGALoader( [page:LoadingManager manager</a> )</pre>
<div class=list>[page:LoadingManager manager</a> — The [page:LoadingManager loadingManager</a> for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager</a>.</div>
Creates a new TGALoader.<br><br>

<h4>Методы</h4>

		<h3>[method:DataTexture load</a>( [page:String url</a>, [page:Function onLoad</a>, [page:Function onProgress</a>, [page:Function onError</a> )</h3>
		<div>
		[page:String url</a> — required<br />
		[page:Function onLoad</a> — Will be called when load completes. The argument will be the loaded [page:DataTexture</a>.<br />
		[page:Function onProgress</a> — Will be called while load progresses. The argument will be the XMLHttpRequest instance, which contains .[page:Integer total</a> and .[page:Integer loaded</a> bytes.<br />
		[page:Function onError</a> — Will be called when load errors.<br />
		</div>
Begin loading from url and pass the loaded [page:DataTexture texture</a> to onLoad. The [page:DataTexture texture</a> is also directly returned for immediate use (but may not be fully loaded).
		</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/TGALoader.js" target="_blank">TGALoader.js на github.com</a></div><br><br>


<h3 id="3.11">PRWMLoader</h3>
A loader for loading a .prwm resource.
Packed Raw WebGL Model is an open-source binary file format for nD geometries specifically designed for JavaScript and WebGL with a strong focus on fast parsing (from 1ms to 0.1ms in Chrome 59 on a MBP Late 2013). The parsing of PRWM file is especially fast when the endianness of the file is the same as the endianness of the client platform. More information on this here.<br><br>

<h4>Пример</h4>
// instantiate a loader
var loader = new THREE.PRWMLoader();

// load a resource
loader.load(
	// resource URL
	'models/nefertiti.le.prwm',
	// called when resource is loaded
	function ( bufferGeometry ) {

		var object = new THREE.Mesh( bufferGeometry, new THREE.MeshNormalMaterial() );
		scene.add( object );

	},
	// called when loading is in progresses
	function ( xhr ) {

		console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );

	},
	// called when loading has errors
	function ( error ) {

		console.log( 'An error happened' );

	}
);
webgl_loader_prwm

<h4>Конструктор</h4>
PRWMLoader( manager )
manager — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.
Creates a new PRWMLoader.

<h4>Свойства</h4>
<br><br>

<h4>Методы</h4>
#
.load ( url, onLoad, onProgress, onError )
url — A string containing the path/URL of the .prwm file. Any * character in the URL will be automatically replaced by le or be depending on the platform endianness.
onLoad — (optional) A function to be called after the loading is successfully completed. The function receives the loaded BufferGeometry as an argument.
onProgress — (optional) A function to be called while the loading is in progress. The function receives a XMLHttpRequest instance, which contains total and loaded bytes.
onError — (optional) A function to be called if an error occurs during loading. The function receives error as an argument.
Begin loading from url and call onLoad with the parsed response content.
#
.parse ( arrayBuffer )
arrayBuffer — ArrayBuffer containing the prwm data.
Parse a prwm file passed as an ArrayBuffer and directly return an instance of BufferGeometry.
PRWMLoader.isBigEndianPlatform( )
Return true if the endianness of the platform is Big Endian, false otherwise.

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/PRWMLoader.js" target="_blank">PRWMLoader.js на github.com</a></div>
<h4>Additional notes</h4>
This loader is additionally available on npm as three-prwm-loader.
<br><br>



<h2 id="4">Объекты</h2><br>

<span class="right_side"><a href="objects.htm#7" title="Переход к родительскому классу"><tt>Mesh &rarr;</tt></a></span>
<h3 id="4.1">LensFlare</h3>
Создает имитацию блика объектива камеры, зависящего от направления освещения.
<div class=note><b>Примечание:</b> Для работы LensFlare у <a href="renderers.htm#1.2" title="WebGLRenderer">WebGLRenderer</a> аргумент <tt>alpha</tt> должен быть установлен как <tt>true</tt>.</div><br>

<h4>Пример</h4>
<pre>var light = new THREE.PointLight( 0xffffff, 1.5, 2000 );<br>
var textureLoader = new THREE.TextureLoader();<br>
var textureFlare0 = textureLoader.load( "textures/lensflare/lensflare0.png" );
var textureFlare1 = textureLoader.load( "textures/lensflare/lensflare2.png" );
var textureFlare2 = textureLoader.load( "textures/lensflare/lensflare3.png" );<br>
var lensflare = new THREE.Lensflare();<br>
lensflare.addElement( new THREE.LensflareElement( textureFlare0, 512, 0 ) );
lensflare.addElement( new THREE.LensflareElement( textureFlare1, 512, 0 ) );
lensflare.addElement( new THREE.LensflareElement( textureFlare2, 60, 0.6 ) );<br>
light.add( lensflare );</pre>
<h5>Другие примеры:</h5>
<pre><a href="https://threejs.org/examples/#webgl_lensflares" target="_blank">webgl / lensflares</a></pre><br>

<h4>Конструктор</h4>
<pre>LensFlare( <a href="textures.htm#6" onmouseover="show('Texture.<br>texture - текстура')" onmouseout="hide()">texture</a>, <span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('size - размер')" onmouseout="hide()">size</a></span>, <span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('distance - расстояние')" onmouseout="hide()">distance</a></span>, <a href="math.htm#3" onmouseover="show('Color.<br>color - цвет')" onmouseout="hide()">color</a>, <a href="constants.htm#5.3" onmouseover="show('Константы материалов - Режим смешивания<br>blending - смешивание')" onmouseout="hide()">blending</a> )</pre>
<div class=list><tt>texture</tt> — THREE.Texture to use for the flare.</div>
<div class=list><tt>size</tt> — размер в пикселах. Дополнительный, необязательный аргумент.</div>
<div class=list><tt>distance</tt> — значение в диапазоне от <tt>0</tt> до <tt>1</tt>, начиная с источника света (значение 0 соответствует местоположению на источнике света). Дополнительный, необязательный аргумент.</div>
<div class=list><tt>color</tt> — цвет блика от линзы объектива. Дополнительный, необязательный аргумент.</div>
<div class=list><tt>blending</tt> — <a href="constants.htm#5.3" onmouseover="show('Константы материалов - Режим смешивания<br>blending - смешивание')" onmouseout="hide()">режим смешивания</a>.
Значением по умолчанию является <tt>THREE.NormalBlending</tt>. Дополнительный, необязательный аргумент.</div><br>

<h4>Свойства</h4>
Сведения об общих свойствах смотрите в описании базового класса <a href="objects.htm#7">Mesh</a>.<br><br>
<div class=blockindent><br>
<pre id="4.1isLensflare"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('is Lensflare - является классом Lensflare')" onmouseout="hide()">.isLensflare</a></span></pre>
Свойство используется для проверки, является ли данный класс и производные от него Lensflare. Значением по умолчанию является <tt>true</tt>.<br>
Не нужно его изменять, так как оно используется для оптимизации внутри <em>three.js</em>.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/objects/Lensflare.js" target="_blank">LensFlare.js на github.com</a></div><br><br>


<h2 id="5">Экспортеры</h2>
<h3 id="5.1">GLTFExporter</h3>
 An exporter for glTF 2.0.<br>

glTF (GL Transmission Format) is an open format specification for efficient delivery and loading of 3D content. Assets may be provided either in JSON (.gltf) or binary (.glb) format. External files store textures (.jpg, .png, ...) and additional binary data (.bin). A glTF asset may deliver one or more scenes, including meshes, materials, textures, skins, skeletons, morph targets, animations, lights, and/or cameras.<br><br>

<h4>Пример</h4>
<pre>// Instantiate a exporter (создаем экземпляр экспортера)
var exporter = new THREE.GLTFExporter( defaultOptions );<br>
// Parse the input and generate the glTF output
// анализ входных данных и генерация выходных данных glTF
exporter.parse( scene, function ( gltf ) {
	console.log( gltf );
	downloadJSON( gltf );
}, options );</pre>
<h5>Другие примеры:</h5>
<pre><a href="https://threejs.org/examples/#misc_exporter_gltf" target="_blank">misc / exporter / gltf</a></pre><br>

<h4>Конструктор</h4>
<pre>GLTFExporter( )</pre>
Создает новый GLTFExporter.<br><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="5.1parse"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('parse - ')" onmouseout="hide()">.parse</a></span>( input, onCompleted, options )</pre>
<div class=list><tt>input</tt> — сцены или объекты для экспорта. Допустимые параметры:<br>
&nbsp; &#9679; &nbsp; экспорт сцен
<pre>exporter.parse( scene1, ...)</pre>
<pre>exporter.parse( [ scene1, scene2 ], ...)</pre>
&nbsp; &#9679; &nbsp; экспорт объектов (при этом создается новая сцена для хранения всех объектов)
<pre>exporter.parse( object1, ...)</pre>
<pre>exporter.parse( [ object1, object2 ], ...)</pre>
&nbsp; &#9679; &nbsp; смесь сцен и объектов (при этом, как обычно, экспортируются сцены, но будет создана новая сцена для хранения всех одиночных объектов.
<pre>exporter.parse( [ scene1, object1, object2, scene2 ], ...)</pre></div>

<div class=list><tt>onCompleted</tt> — Will be called when the export completes. The argument will be the generated glTF JSON or binary ArrayBuffer.</div>
<div class=list><tt>options</tt> - Export options<br>

&nbsp; &#9679; &nbsp; <tt><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('trs - ')" onmouseout="hide()">trs</a></span></tt>
- экспорт позиции (<tt>position</tt>), поворота (<tt>rotation</tt>) и масштаба (<tt>scale</tt>) вместо матрицы каждого узла. Значением по умолчанию является <tt>false</tt>.<br>
&nbsp; &#9679; &nbsp; <tt><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('only visible - только видимый')" onmouseout="hide()">onlyVisible</a></span></tt>
- экспорт только видимых объектов. Значением по умолчанию является <tt>true</tt>.<br>
&nbsp; &#9679; &nbsp; <tt><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('truncate draw range - ')" onmouseout="hide()">truncateDrawRange</a></span></tt>
- Export just the attributes within the drawRange, if defined, instead of exporting the whole array. Значением по умолчанию является <tt>true</tt>.<br>
&nbsp; &#9679; &nbsp; <tt><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('binary - бинарный, двоичный')" onmouseout="hide()">binary</a></span></tt>
- Export in binary (.glb) format, returning an ArrayBuffer. Значением по умолчанию является <tt>false</tt>.<br>
&nbsp; &#9679; &nbsp; <tt><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('embed images - ')" onmouseout="hide()">embedImages</a></span></tt>
- Export with images embedded into the glTF asset. Значением по умолчанию является <tt>true</tt>.<br>
&nbsp; &#9679; &nbsp; <tt><span onclick="showClick(type_array)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('animations - анимации')" onmouseout="hide()">animations</a></span></tt> - массив &#60;AnimationClip>. List of animations to be included in the export.<br>
&nbsp; &#9679; &nbsp; <tt><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('force indices - ')" onmouseout="hide()">forceIndices</a></span></tt>
- Generate indices for non-index geometry and export with them. Значением по умолчанию является <tt>false</tt>.<br>
&nbsp; &#9679; &nbsp; <tt><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('force power of two textures - ')" onmouseout="hide()">forcePowerOfTwoTextures</a></span></tt>
- Export with images resized to POT size. This option works only if embedImages is true. Значением по умолчанию является <tt>false</tt>.</div>

Generates a .gltf (JSON) or .glb (binary) output from the input (Scene or Objects)</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/dev/examples/js/exporters/GLTFExporter.js" target="_blank">GLTFExporter.js на github.com</a></div><br><br>


<h2 id="6">Плагины</h2><br>

<h3 id="6.1">Lut</h3>
Represents a lookup table for colormaps. It is used to determine the color values from a range of data values.

<h4>Пример</h4>
		<pre>var lut = new THREE.Lut( "rainbow", 512 );</pre>
		<pre>var data = [0, 10.1, 4.2, 3.4, 63, 28</a>;</pre>
		<pre>lut.setMax(63);</pre>
		<pre>color = lut.getColor(10);</pre>

<h4>Конструктор</h4>
<pre>Lut( colormap, numberOfColors )</pre>
<div class="blockindent">colormap — optional argument that sets a colormap from predefined colormaps. Available colormaps are : "rainbow", "cooltowarm", "blackbody".<br>
numberOfColors — optional argument that sets the number of colors used to represent the data array.</div>

<h4>Свойства</h4>

<pre>[property:Float minV</a></pre>
The minimum value to be represented with the lookup table. Default is 0.

<pre>[property:Float maxV</a></pre>
The maximum value to be represented with the lookup table. Default is 1.

<pre>.[legend</a></pre>
The legend of the lookup table.

<h4>Методы</h4>
<pre>[method:null copy</a>( [page:Lut lut</a> ) [page:Lut this</a></pre>
<div class="blockindent">color — Lut to copy.</div>
Copies given lut.
<pre>.setLegendOn [parameters</a></pre>
<div class="blockindent">parameters — { layout: value, position: { x: value, y: value, z: value }, dimensions: { width: value, height: value } }
		layout — Horizontal or vertical layout. Default is vertical.<br>
		position — The position x,y,z of the legend.<br>
		dimensions — The dimensions (width and height) of the legend.</div>
Sets this Lut with the legend on.


<pre>.setLegendOff</pre>
Sets this Lut with the legend off.


<pre>.setLegendLabels [parameters, callback</a></pre>
<div class="blockindent">parameters — { fontsize: value, fontface: value, title: value, um: value, ticks: value, decimal: value, notation: value }
		fontsize — Font size to be used for labels.<br>
		fontface — Font type to be used for labels.<br>
		title — The title of the legend.<br>
		um — The unit of measurements of the legend.<br>
		ticks — The number of ticks to be displayed.<br>
		decimal — The number of decimals to be used for legend values.<br>
		notation — Legend notation: standard (default) or scientific.<br>
		callback — An optional callback to be used to format the legend labels.</div>
Sets the labels of the legend of this Lut.

<pre>[method:Lut setminV</a>( [page:Float minV</a> )</pre>
<div class="blockindent">minV — The minimum value to be represented with the lookup table.</div>
Sets this Lut with the minimum value to be represented.

<pre>[method:Lut setmaxV</a>( [page:Float maxV</a> )</pre>
<div class="blockindent">maxV — The maximum value to be represented with the lookup table.</div>
Sets this Lut with the maximum value to be represented.

<pre>[method:Lut changeNumberOfColors</a>( [page:Float numberOfColors</a> )</pre>
<div class="blockindent">numberOfColors — The number of colors to be used to represent the data array.</div>
Sets this Lut with the number of colors to be used.


<pre>[method:Lut changeColorMap</a>( [page:Float colorMap</a> )</pre>
<div class="blockindent">colorMap — The name of the color map to be used to represent the data array.</div>
Sets this Lut with the colormap to be used.

<pre>[method:Lut addColorMap</a>( colorMapName, arrayOfColors )</pre>
Insert a new color map into the set of available color maps.

<pre>[method:Lut getColor</a>( value ) [page:Lut this</a></pre>
<div class="blockindent">value — the data value to be displayed as a color.</div>
Returns a Three.Color.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/math/Lut.js" target="_blank">Lut.js на github.com</a></div><br><br>


<span class="right_side"><a href="materials.htm#3" title="Переход к родительскому классу: Material"><tt>Material &rarr;</tt></a></span>
<h3 id="6.2">SpriteCanvasMaterial</h3>
Create a material that can draw custom sprites using a 2d canvas.<br><br>

<h4>Конструктор</h4>
<pre>SpriteCanvasMaterial( <span onclick="showClick(type_obj)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('parameters - параметры')" onmouseout="hide()">parameters</a></span> )</pre>
parameters is an object that can be used to set up the default properties
<div class=list><tt>color</tt> — the color of the sprite</div>
<div class=list><tt>program</tt> — the program used to draw the sprite</div><br>

<h4>Свойства</h4>
<div class="blockindent"><br>
<pre>[property:Color color</a></pre>
The color of the sprite. The material will set up the color for the context before calling the material's program.</div><br>

<h4>Методы</h4>
<div class="blockindent"><br>
<pre>[method:null program</a>([page:CanvasRenderingContext2D context</a>, [page:Color color</a>)</pre>
<div class=list><tt>context</tt> — The canvas context</div>
<div class=list><tt>color</tt> — The color of the sprite</div>
Define a program that will use the context to draw the sprite.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/renderers/CanvasRenderer.js" target="_blank">CanvasRenderer.js на github.com</a></div><br><br>


<h2 id="7">QuickHull</h2>
Алгоритм быстрой оболочки (QuickHull) — алгоритм построения <a href="https://ru.wikipedia.org/wiki/%D0%92%D1%8B%D0%BF%D1%83%D0%BA%D0%BB%D0%B0%D1%8F_%D0%BE%D0%B1%D0%BE%D0%BB%D0%BE%D1%87%D0%BA%D0%B0" target="_blank">выпуклой оболочки</a> на плоскости. Использует идею <a href="https://ru.wikipedia.org/wiki/%D0%91%D1%8B%D1%81%D1%82%D1%80%D0%B0%D1%8F_%D1%81%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B0" target="_blank">быстрой сортировки Хоара</a>.<br>
Статья русскоязычной Википедии <a href="https://ru.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D0%B1%D1%8B%D1%81%D1%82%D1%80%D0%BE%D0%B9_%D0%BE%D0%B1%D0%BE%D0%BB%D0%BE%D1%87%D0%BA%D0%B8" target="_blank">"Алгоритм быстрой оболочки"</a>.<br>
Статья англоязычной Википедии <a href="https://en.wikipedia.org/wiki/Quickhull" target="_blank">"QuickHull"</a>.<br><br>

<h3 id="7.1">Face</h3>
Представляет секцию, ограниченную определенным числом полуребер. Текущая реализация предполагает, что грань всегда состоит из трех ребер.
Represents a section bounded by a specific amount of half-edges. The current implementation assumes that a face always consist of three edges.<br><br>

<h4>Конструктор</h4>
<pre>Face( )</pre>
<br>

<h4>Свойства</h4>
<div class=blockindent><br>
<pre id="7.1normal"><a href="math.htm#19" onmouseover="show('Vector3.<br>normal - нормаль')" onmouseout="hide()">.normal</a></pre>
Вектор нормали к грани. Значением по умолчанию является <a href="math.htm#19" onmouseover="show('Vector3')" onmouseout="hide()">трехмерный вектор</a> <tt>(0, 0, 0)</tt>.<br><br>

<pre id="7.1midpoint"><a href="math.htm#19" onmouseover="show('Vector3.<br>midpoint - средняя точка')" onmouseout="hide()">.midpoint</a></pre>
Средняя точка или центроид грани. Значением по умолчанию является <a href="math.htm#19" onmouseover="show('Vector3')" onmouseout="hide()">трехмерный вектор</a> <tt>(0, 0, 0)</tt>.<br><br>

<pre id="7.1area"><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('area - площадь')" onmouseout="hide()">.area</a></span></pre>
Площадь грани. Значение по умолчанию равно <tt>0</tt>.<br><br>

<pre id="7.1constant"><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('constant - постоянная, константа')" onmouseout="hide()">.constant</a></pre>
Знаковое расстояние от грани до начала координат. Значение по умолчанию равно <tt>0</tt>.<br><br>

<pre id="7.1outside"><a href="#7.4" onmouseover="show('VertexNode.<br>outside - за пределами, снаружи')" onmouseout="hide()">.outside</a></pre>
Reference to a vertex in a vertex list this face can see. Значением по умолчанию является <tt>null</tt>.<br><br>

<pre id="7.1mark"><span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('mark - метка')" onmouseout="hide()">.mark</a></span></pre>
Свойство указывает, видима грань или удалена. Значением по умолчанию является <tt>Visible</tt>.

<pre id="7.1edge"><a href="#7.2" onmouseover="show('HalfEdge.<br>edge - ребро, край')" onmouseout="hide()">.edge</a></pre>
Ссылка на базовое ребро грани. Для получения всех ребер можно воспользоваться ссылкой <tt><a href="#7.2next" onmouseover="show('HalfEdge.next')" onmouseout="hide()">next</a></tt> текущей грани. Значением по умолчанию является <tt>null</tt>.</div><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="7.1create"><a href="#7.1" onmouseover="show('Face.<br>create - создать')" onmouseout="hide()">.create</a>( <a href="#7.4" onmouseover="show('VertexNode')" onmouseout="hide()">a</a>, <a href="#7.4" onmouseover="show('VertexNode')" onmouseout="hide()">b</a>, <a href="#7.4" onmouseover="show('VertexNode')" onmouseout="hide()">c</a> )</pre>
<div class=list><tt>a</tt> - первая вершина грани.</div>
<div class=list><tt>b</tt> - вторая вершина грани.</div>
<div class=list><tt>c</tt> - третья вершина грани.</div>
Создает грань.<br><br>

<pre id="7.1getEdge"><a href="#7.2" onmouseover="show('HalfEdge.<br>get edge - получить ребро')" onmouseout="hide()">.getEdge</a>( <span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('i - сокращ. от англ. слова index - индекс')" onmouseout="hide()">i</a></span> )</pre>
<div class=list><tt>i</tt> - индекс ребра.</div>
Возвращает ребро по заданному индексу.<br><br>

<pre id="7.1compute"><a href="#7.1" onmouseover="show('Face.<br>compute - вычислить')" onmouseout="hide()">.compute</a>( )</pre>
Вычисляет все свойства этой грани.<br><br>

<pre id="7.1distanceToPoint"><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('distance to point - расстояние до точки')" onmouseout="hide()">.distanceToPoint</a></span>( <a href="math.htm#19" onmouseover="show('Vector3.<br>point - точка')" onmouseout="hide()">point</a> )</pre>
<div class=list><tt>point</tt> - любая точка в трехмерном пространстве.</div>
Возвращает знаковое расстояние от заданной точки до плоскости, представленной данной гранью.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/QuickHull.js" target="_blank">QuickHull.js на github.com</a></div><br><br>


<h3 id="7.2">HalfEdge</h3>
Основа для полурёберной структуры данных (half-edge data structure),
также известной как <a href="https://ru.wikipedia.org/wiki/%D0%94%D0%B2%D1%83%D1%81%D0%B2%D1%8F%D0%B7%D0%BD%D1%8B%D0%B9_%D1%81%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_%D1%80%D1%91%D0%B1%D0%B5%D1%80" target="_blank">двусвязный список рёбер</a>
(doubly connected edge list - DCEL).

<h4>Конструктор</h4>
<pre>HalfEdge( <a href="#7.4" onmouseover="show('VertexNode.<br>vertex - вершина')" onmouseout="hide()">vertex</a>, <a href="#7.1" onmouseover="show('Face.<br>face - грань')" onmouseout="hide()">face</a> )</pre>
<div class=list><tt>vertex</tt> - ссылка на свою целевую вершину.</div>
<div class=list><tt>face</tt> - ссылка на свою грань.</div><br>

<h4>Свойства</h4>
<div class=blockindent><br>
<pre id="7.2vertex"><a href="#7.4" onmouseover="show('VertexNode.<br>vertex - вершина')" onmouseout="hide()">.vertex</a></pre>
Reference to the destination vertex. The origin vertex can be obtained by querying the destination of its twin, or of the previous half-edge.
Значением по умолчанию является <tt>undefined</tt>, т.е. значение не определено.<br><br>

<pre id="7.2prev"><a href="#7.2" onmouseover="show('HalfEdge.<br>prev - сокращ. англ. слова previous - предыдущий')" onmouseout="hide()">.prev</a></pre>
Ссылка на предыдущее полуребро той же самой грани. Значением по умолчанию является <tt>null</tt>.<br><br>

<pre id="7.2next"><a href="#7.2" onmouseover="show('HalfEdge.<br>next - следующий')" onmouseout="hide()">.next</a></pre>
Ссылка на следующее полуребро той же самой грани. Значением по умолчанию является <tt>null</tt>.<br><br>

<pre id="7.2twin"><a href="#7.2" onmouseover="show('HalfEdge.<br>twin - двойной')" onmouseout="hide()">.twin</a></pre>
Ссылка на парное полуребро для достижения противоположной грани.
Reference to the twin half-edge to reach the opposite face. Значением по умолчанию является <tt>null</tt>.<br>

<pre id="7.2face"><a href="#7.1" onmouseover="show('Face.<br>face - грань')" onmouseout="hide()">.face</a></pre>
Каждое полуребро ограничивает отдельную грань и поэтому имеет ссылку на эту грань.
Each half-edge bounds a single face and thus has a reference to that face.
Значением по умолчанию является <tt>undefined</tt>, т.е. значение не определено.</div><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="7.2head"><a href="#7.4" onmouseover="show('VertexNode.<br>head - голова')" onmouseout="hide()">.head</a>( )</pre>
Возвращает целевую вершину (вершину назначения).<br><br>

<pre id="7.2tail">[method:VertexNode .tail</a>()</pre>
Возвращает исходную (начальную) вершину. Returns the origin vertex.<br><br>

<pre id="7.2length"><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('length - длина')" onmouseout="hide()">.length</a></span>( )</pre>
Returns the [link:https://en.wikipedia.org/wiki/Euclidean_distance Euclidean length</a> (straight-line length) of the edge.<br><br>

<pre id="7.2lengthSquared"><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('length squared - квадрат длины, или длина во второй степени')" onmouseout="hide()">.lengthSquared</a></span>( )</pre>
Returns the square of the [link:https://en.wikipedia.org/wiki/Euclidean_distance Euclidean length</a> (straight-line length) of the edge.<br><br>

<pre id="7.2setTwin"><a href="#7.2" onmouseover="show('HalfEdge.<br>set twin - установить двойника (парное ребро)')" onmouseout="hide()">.setTwin</a>( <a href="#7.2" onmouseover="show('HalfEdge.<br>edge - ребро')" onmouseout="hide()">.edge</a> )</pre>
<div class=list>[page:HalfEdge .edge</a> - любое полуребро.</div>
Sets the twin edge of this half-edge. It also ensures that the twin reference of the given half-edge is correctly set.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/QuickHull.js" target="_blank">QuickHull.js на github.com</a></div><br><br>


<h3 id="7.3">QuickHull</h3>
Общие сведения об алгоритме Quickhull: Dirk Gregorius. March 2014, Game Developers Conference: <a href="http://media.steampowered.com/apps/valve/2014/DirkGregorius_ImplementingQuickHull.pdf" target="_blank">Implementing QuickHull</a>.<br><br>

<h4>Конструктор</h4>
<pre>QuickHull( )</pre><br>

<h4>Свойства</h4>
<div class=blockindent><br>
<pre id="7.3tolerance"><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('tolerance - допустимое отклонение')" onmouseout="hide()">.tolerance</a></span></pre>
The epsilon value that is used for internal comparative operations. Вычисление этого значения зависит от размера геометрического элемента. Значение по умолчанию равно <tt>-1</tt>.<br><br>

<pre id="7.3faces"><span onclick="showClick(type_array)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('faces - грани')" onmouseout="hide()">.faces</a></span></pre>
The generated faces of the convex hull. Значением по умолчанию является пустой массив.<br><br>

<pre id="7.3newFaces"><span onclick="showClick(type_array)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('new faces - новые грани')" onmouseout="hide()">.newFaces</a></span></pre>
This array holds the faces that are generated within a single iteration. Значением по умолчанию является пустой массив.<br><br>

<pre id="7.3assigned"><a href="#7.5" onmouseover="show('VertexList.<br>assigned - присвоить, назначить')" onmouseout="hide()">.assigned</a></pre>
Данный <a href="#7.5" onmouseover="show('VertexList')" onmouseout="hide()">список вершин</a> содержит все вершины, назначенные грани. Значением по умолчанию является пустой список вершин.<br><br>

<pre id="7.3unassigned"><a href="#7.5" onmouseover="show('VertexList.<br>unassigned - неназначить, отменить присвоенное')" onmouseout="hide()">.unassigned</a></pre>
Данный <a href="#7.5" onmouseover="show('VertexList')" onmouseout="hide()">список вершин</a> содержит все вершины, не назначенные грани. Значением по умолчанию является пустой список вершин.<br><br>

<pre id="7.3vertices"><span onclick="showClick(type_array)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('vertices - вершины')" onmouseout="hide()">.vertices</a></span></pre>
The internal representation of the given geometry data (an array of [page:VertexNode vertices</a>).</div><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="7.3setFromPoints"><a href="#7.3" onmouseover="show('QuickHull.<br>set from points - установить из точек')" onmouseout="hide()">.setFromPoints</a>( <span onclick="showClick(type_array)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('points - точки')" onmouseout="hide()">points</a></span> )</pre>
<div class=list><tt>points</tt> - массив <a href="math.htm#19" onmouseover="show('Vector3')" onmouseout="hide()">трехмерных векторов</a>, который будет содержать получающаяся выпуклая оболочка.</div>
Вычисляет выпуклую оболочку по заданному массиву точек.<br><br>

<pre id="7.3setFromObject"><a href="#7.3" onmouseover="show('QuickHull.<br>set from object - установить из объекта')" onmouseout="hide()">.setFromObject</a>( <a href="core.htm#14" onmouseover="show('Object3D.<br>object - объект')" onmouseout="hide()">object</a> )</pre>
<div class=list><tt>object</tt> - <a href="core.htm#14" onmouseover="show('Object3D')" onmouseout="hide()">Object3D</a> по которому вычисляется выпуклая оболочка.</div>
Computes the convex hull of an [page:Object3D</a> (including its children), accounting for the world transforms of both the object and its childrens.<br><br>

<pre id="7.3makeEmpty"><a href="#7.3" onmouseover="show('QuickHull.<br>make empty - сделать пустой')" onmouseout="hide()">.makeEmpty</a>( )</pre>
Делает данную выпуклую оболочку пустой.<br><br>

<pre id="7.3addVertexToFace"><a href="#7.3" onmouseover="show('QuickHull.<br>add vertex to face - добавить вершину к грани')" onmouseout="hide()">.addVertexToFace</a>( <a href="#7.4" onmouseover="show('VertexNode.<br>vertex - вершина')" onmouseout="hide()">vertex</a>, <a href="#7.2" onmouseover="show('Face.<br>face - грань')" onmouseout="hide()">face</a> )</pre>
<div class=list><tt>vertex</tt> - добавляемая вершина.</div>
<div class=list><tt>face</tt> - целевая грань.</div>
Adds a vertex to the 'assigned' list of vertices and assigns it to the given face.<br><br>

<pre id="7.3removeVertexFromFace"><a href="#7.3" onmouseover="show('QuickHull.<br>remove vertex from face - удалить вершину грани')" onmouseout="hide()">.removeVertexFromFace</a>( <a href="#7.4" onmouseover="show('VertexNode.<br>vertex - вершина')" onmouseout="hide()">vertex</a>, <a href="#7.2" onmouseover="show('Face.<br>face - грань')" onmouseout="hide()">face</a> )</pre>
<div class=list><tt>vertex</tt> - удаляемая вершина.</div>
<div class=list><tt>face</tt> - целевая грань.</div>
Removes a vertex from the 'assigned' list of vertices and from the given face. It also makes sure that the link from 'face' to the first vertex it sees in 'assigned' is linked correctly after the removal.<br><br>

<pre id="7.3removeAllVerticesFromFace"><a href="#7.4" onmouseover="show('VertexNode.<br>remove all vertices from face - удалить все вершины грани')" onmouseout="hide()">.removeAllVerticesFromFace</a>( <a href="#7.2" onmouseover="show('Face.<br>face - грань')" onmouseout="hide()">face</a> )</pre>
<div class=list><tt>face</tt> - The given face.</div>
Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertext list.<br><br>

<pre id="7.3deleteFaceVertices"><a href="#7.3" onmouseover="show('QuickHull.<br>delete face vertices - удалить вершины грани')" onmouseout="hide()">.deleteFaceVertices</a>( <a href="#7.2" onmouseover="show('Face.<br>face - грань')" onmouseout="hide()">face</a>, <a href="#7.2" onmouseover="show('Face.<br>absorbing face - поглощающая грань')" onmouseout="hide()">absorbingFace</a> )</pre>
<div class=list><tt>face</tt> - The given face.</div>
<div class=list><tt>absorbingFace</tt> - An optional face that tries to absorb the vertices of the first face.</div>
Removes all the visible vertices that 'face' is able to see.<br>
&nbsp; &#9679; &nbsp; If 'absorbingFace' doesn't exist, then all the removed vertices will be added to the 'unassigned' vertex list.<br>
&nbsp; &#9679; &nbsp; If 'absorbingFace' exists, then this method will assign all the vertices of 'face' that can see 'absorbingFace'.<br>
&nbsp; &#9679; &nbsp; If a vertex cannot see 'absorbingFace', it's added to the 'unassigned' vertex list.<br><br>

<pre id="7.3resolveUnassignedPoints"><a href="#7.3" onmouseover="show('QuickHull.<br>resolve unassigned points - разрешить неназначенные точки')" onmouseout="hide()">.resolveUnassignedPoints</a>( <span onclick="showClick(type_array)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('new faces - новые грани')" onmouseout="hide()">newFaces</a></span> )</pre>
<div class=list><tt>newFaces</tt> - массив новых граней.</div>
Reassigns as many vertices as possible from the unassigned list to the new faces.<br><br>

<pre id="7.3computeExtremes"><span onclick="showClick(type_obj)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('compute extremes - вычислить экстремумы')" onmouseout="hide()">.computeExtremes</a></span>( )</pre>
Метод вычисляет экстремальные значения (минимальный и максимальный векторы), которые будут использованы для расчета начальной оболочки.<br><br>

<pre id="7.3computeInitialHull"><a href="#7.3" onmouseover="show('QuickHull.<br>compute initial hull - вычислить начальную оболочку')" onmouseout="hide()">.computeInitialHull</a>( )</pre>
Computes the initial simplex assigning to its faces all the points that are candidates to form part of the hull.<br><br>

<pre id="7.3reindexFaces"><a href="#7.3" onmouseover="show('QuickHull.<br>reindex faces - переиндексация граней')" onmouseout="hide()">.reindexFaces</a>()</pre>
Удаляет неактивные (то есть, удаленные) грани из внутреннего списка граней.<br><br>

<pre id="7.3nextVertexToAdd"><a href="#7.4" onmouseover="show('VertexNode.<br>next vertex to add - следующая добавляемая вершина')" onmouseout="hide()">.nextVertexToAdd</a>( )</pre>
Finds the next vertex to create faces with the current hull.<br>
&nbsp; &#9679; &nbsp; Let the initial face be the first face existing in the 'assigned' vertex list.<br>
&nbsp; &#9679; &nbsp; If a face doesn't exist then return since there're no vertices left.<br>
&nbsp; &#9679; &nbsp; Otherwise for each vertex that face sees find the one furthest away from it.<br><br>

<pre id="7.3computeHorizon"><a href="#7.3" onmouseover="show('QuickHull.<br>compute horizon - вычислить горизонт')" onmouseout="hide()">.computeHorizon</a>( <a href="math.htm#19" onmouseover="show('Vector3.<br>eye point - ')" onmouseout="hide()">eyePoint</a>, <a href="#7.2" onmouseover="show('HalfEdge.<br>cross edge - ')" onmouseout="hide()">crossEdge</a>, <a href="#7.2" onmouseover="show('Face.<br>face - грань')" onmouseout="hide()">face</a>, <span onclick="showClick(type_array)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('horizon - горизонт')" onmouseout="hide()">horizon</a></span> )</pre>
<div class=list><tt>eyePoint</tt> - координаты точки в трехмерном пространстве.</div>
<div class=list><tt>crossEdge</tt> - The edge used to jump to the current face.</div>
<div class=list><tt>face</tt> - The current face being tested.</div>
<div class=list><tt>horizon</tt> - The edges that form part of the horizon in CCW order.</div>
Computes a chain of half edges in CCW order called the 'horizon'. For an edge to be part of the horizon it must join a face that can see 'eyePoint' and a face that cannot see 'eyePoint'.<br><br>

<pre id="7.3addAdjoiningFace"><a href="#7.2" onmouseover="show('HalfEdge.<br>add adjoining face - добавить прилегающую грань')" onmouseout="hide()">.addAdjoiningFace</a>( <a href="#7.4" onmouseover="show('VertexNode.<br>eye vertex - вершина')" onmouseout="hide()">eyeVertex</a>, <a href="#7.2" onmouseover="show('HalfEdge.<br>horizon edge - край (ребро) горизонта')" onmouseout="hide()">horizonEdge</a> )</pre>
<div class=list><tt>eyeVertex</tt> - вершина, добавляемая к оболочке.</div>
<div class=list><tt>horizonEdge</tt> - один край горизонта.</div>
Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order.<br>
All the half edges are created in CCW order thus the face is always pointing outside the hull<br><br>

<pre id="7.3addNewFaces"><a href="#7.3" onmouseover="show('QuickHull.<br>add new faces - добавить новые грани')" onmouseout="hide()">.addNewFaces</a>( <a href="#7.4" onmouseover="show('VertexNode.<br>eye vertex - вершина')" onmouseout="hide()">eyeVertex</a>, <a href="#7.2" onmouseover="show('HalfEdge.<br>horizon - горизонт')" onmouseout="hide()">horizon</a> )</pre>
<div class=list><tt>eyeVertex</tt> - вершина, добавляемая к оболочке.</div>
<div class=list><tt>horizon</tt> - массив полуребер, формирующий горизонт.</div>
Adds 'horizon.length' faces to the hull, each face will be linked with the horizon opposite face and the face on the left/right.<br><br>

<pre id="7.3addVertexToHull"><a href="#7.3" onmouseover="show('QuickHull.<br>add vertex to hull - добавить вершину к оболочке')" onmouseout="hide()">.addVertexToHull</a>( <a href="#7.4" onmouseover="show('VertexNode.<br>eye vertex - вершина')" onmouseout="hide()">eyeVertex</a> )</pre>
<div class=list><tt>eyeVertex</tt> - вершина, добавляемая к оболочке.</div>
Метод добавляет вершину к оболочке по следующему алгоритму:<br>
&nbsp; &#9679; &nbsp; Compute the 'horizon' which is a chain of half edges. For an edge to belong to this group it must be the edge connecting a face that can see 'eyeVertex' and a face which cannot see 'eyeVertex'.<br>
&nbsp; &#9679; &nbsp; All the faces that can see 'eyeVertex' have its visible vertices removed from the assigned vertex list.<br>
&nbsp; &#9679; &nbsp; A new set of faces is created with each edge of the 'horizon' and 'eyeVertex'. Each face is connected with the opposite horizon face and the face on the left/right.<br>
&nbsp; &#9679; &nbsp; The vertices removed from all the visible faces are assigned to the new faces if possible.<br><br>

<pre id="7.3cleanup"><a href="#7.3" onmouseover="show('QuickHull.<br>clean up - очистить')" onmouseout="hide()">.cleanup</a>( )</pre>
Cleans up internal properties after computing the convex hull.<br><br>

<pre id="7.3compute"><a href="#7.3" onmouseover="show('QuickHull.<br>compute - вычислить')" onmouseout="hide()">.compute</a>( )</pre>
Запускает выполнение алгоритма построения выпуклой оболочки (QuickHull).</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/QuickHull.js" target="_blank">QuickHull.js на github.com</a></div><br><br>


<h3 id="7.4">VertexNode</h3>
Вершина в качестве узла двусвязного списка.<br><br>

<h4>Конструктор</h4>
<pre>VertexNode( <a href="math.htm#19" onmouseover="show('Vector3.<br>point - точка')" onmouseout="hide()">point</a> )</pre>
<div class=list><tt>point</tt> - точка-<a href="math.htm#19" onmouseover="show('Vector3')" onmouseout="hide()">трехмерный вектор</a> <tt>(x, y, z)</tt> в трехмерном пространстве.</div><br>

<h4>Свойства</h4>
<div class=blockindent><br>
<pre id="7.4point"><a href="math.htm#19" onmouseover="show('Vector3.<br>point - точка')" onmouseout="hide()">.point</a></pre>
A point (x, y, z) in 3D space.
Значением по умолчанию является <tt>undefined</tt>, т.е. значение не определено.<br><br>

<pre id="7.4prev"><a href="#7.4" onmouseover="show('VertexNode.<br>prev - сокращ. англ. слова previous - предыдущий')" onmouseout="hide()">.prev</a></pre>
Reference to the previous vertex in the double linked list. Значением по умолчанию является <tt>null</tt>.<br><br>

<pre id="7.4next"><a href="#7.4" onmouseover="show('VertexNode.<br>next - следующий')" onmouseout="hide()">.next</a></pre>
Reference to the next vertex in the double linked list. Значением по умолчанию является <tt>null</tt>.<br><br>

<pre id="7.4face"><a href="#7.1" onmouseover="show('Face.<br>face - грань')" onmouseout="hide()">.face</a></pre>
Reference to the face that is able to see this vertex.
Значением по умолчанию является <tt>undefined</tt>, т.е. значение не определено.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/QuickHull.js" target="_blank">QuickHull.js на github.com</a></div><br><br>


<h3 id="7.5">VertexList</h3>
<a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B2%D1%8F%D0%B7%D0%BD%D1%8B%D0%B9_%D1%81%D0%BF%D0%B8%D1%81%D0%BE%D0%BA" target="_blank" onmouseover="show('Двусвязный список - двунаправленный связный список,<br>ссылки в каждом узле указывают на предыдущий и на<br>последующий узел в списке. Как и односвязный список,<br>двусвязный допускает только последовательный доступ<br>к элементам, но при этом дает возможность<br>перемещения в обе стороны.')" onmouseout="hide()">Двусвязный список</a> вершин.<br><br>

<h4>Конструктор</h4>
<pre>VertexList( )</pre><br>

<h4>Свойства</h4>
<div class=blockindent><br>
<pre id="7.5head"><a href="#7.4" onmouseover="show('VertexNode.<br>head - голова')" onmouseout="hide()">.head</a></pre>
Ссылка на первую вершину в связном списке. Значением по умолчанию является <tt>null</tt>.<br><br>

<pre id="7.5tail"><a href="#7.4" onmouseover="show('VertexNode.<br>tail - хвост, окончание')" onmouseout="hide()">.tail</a></pre>
Ссылка на последнюю вершину в связном списке. Значением по умолчанию является <tt>null</tt>.</div><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="7.5first"><a href="#7.4" onmouseover="show('VertexNode.<br>first - первый')" onmouseout="hide()">.first</a>( )</pre>
Возвращает головную ссылку, т.е. ссылка направлена в начало списка.<br><br>

<pre id="7.5last"><a href="#7.4" onmouseover="show('VertexNode.<br>last - последний')" onmouseout="hide()">.last</a>( )</pre>
Возвращает хвостовую ссылку, т.е. ссылка направлена в конец списка.<br><br>

<pre id="7.5clear"><a href="#7.5" onmouseover="show('VertexList.<br>clear - очистить')" onmouseout="hide()">.clear</a>( )</pre>
Очищает связный список. Clears the linked list.<br><br>

<pre id="7.5insertBefore"><a href="#7.5" onmouseover="show('VertexList.<br>insert before - вставить перед')" onmouseout="hide()">.insertBefore</a>( <span onmouseover="show('Vertex.<br>target - цель')" onmouseout="hide()">target</span>, <span onmouseover="show('Vertex.<br>vertex - вершина')" onmouseout="hide()">vertex</span> )</pre>
<div class=list><tt>target</tt> - целевая вершина. Предполагается, что данная вершина входит в этот связный список.</div>
<div class=list><tt>vertex</tt> - вершина, которую нужно вставить.</div>
Метод вставляет вершину в список <b>перед</b> целевой вершиной.<br><br>

<pre id="7.5insertAfter"><a href="#7.5" onmouseover="show('VertexList.<br>insert after - вставить после')" onmouseout="hide()">.insertAfter</a>( [page:Vertex target</a>, [page:Vertex vertex</a> )</pre>
<div class=list><tt>target</tt> - целевая вершина. Предполагается, что данная вершина входит в этот связный список.</div>
<div class=list><tt>vertex</tt> - вершина, которую нужно вставить.</div>
Метод вставляет вершину в список <b>после</b> целевой вершины.<br><br>

<pre id="7.5append"><a href="#7.5" onmouseover="show('VertexList.<br>append - добавлять, присоединять')" onmouseout="hide()">.append</a>( [page:Vertex vertex</a> )</pre>
<div class=list><tt>vertex</tt> - добавляемая вершина.</div>
Добавляет вершину в конец связного списка.<br><br>

<pre id="7.5appendChain"><a href="#7.5" onmouseover="show('VertexList.<br>append chain - добавить цепочку')" onmouseout="hide()">.appendChain</a>( [page:Vertex vertex</a> )</pre>
<div class=list><tt>vertex</tt> - The head vertex of a chain of vertices.</div>
Appends a chain of vertices where the given vertex is the head.<br><br>

<pre id="7.5remove"><a href="#7.5" onmouseover="show('VertexList.<br>remove - удалить')" onmouseout="hide()">.remove</a>( [page:Vertex vertex</a> )</pre>
<div class=list><tt>vertex</tt> - удаляемая вершина.</div>
Удаляет вершину из связного списка.<br><br>

<pre id="7.5removeSubList"><a href="#7.5" onmouseover="show('VertexList.<br>remove sublist - удалить вложенный список')" onmouseout="hide()">.removeSubList</a>( [page:Vertex a</a>, [page:Vertex b</a> )</pre>
<div class=list><tt>a</tt> - голова (начало) вложенного списка.</div>
<div class=list><tt>b</tt> - хвост (конец) вложенного списка.</div>
Удаляет вложенный список вершин из связного списка.<br><br>

<pre id="7.5isEmpty"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('is empty - является пустым')" onmouseout="hide()">.isEmpty</a></span>( )</pre>
Возвращает значение <tt>true</tt>, если связанный список пуст.</div>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/QuickHull.js" target="_blank">QuickHull.js на github.com</a></div><br><br>


<h2 id="8">Визуализаторы</h2>
<h3 id="8.1">CanvasRenderer</h3>
The Canvas renderer displays your beautifully crafted scenes <em>not</em> using WebGL, but draws it using the (slower) <a href="http://drafts.htmlwg.org/2dcontext/html5_canvas_CR/Overview.html">Canvas 2D Context</a> API.

<div class=note><b>Примечание:</b> Визуализатор Canvas уже устарел и больше не является частью основных элементов <em>three.js</em>.
Если, все же потребуется его использование, можно найти его здесь: <a href="https://github.com/mrdoob/three.js/blob/master/examples/js/renderers/CanvasRenderer.js" target="_blank">examples/js/renderers/CanvasRenderer.js</a>.</div>
Этот визуализатор может быть хорошей альтернативой <a href="renderers.htm#1" onmouseover="show('WebGLRenderer')" onmouseout="hide()">WebGLRenderer</a>'у для простых сцен:
<pre>function webglAvailable() {
  try {
    var canvas = document.createElement( 'canvas' );
    return !!( window.WebGLRenderingContext && (
      canvas.getContext( 'webgl' ) ||
      canvas.getContext( 'experimental-webgl' ) )
    );
  } catch ( e ) {
    return false;
 }
}<br>
if ( webglAvailable() ) {
  renderer = new THREE.WebGLRenderer();
} else {
  renderer = new THREE.CanvasRenderer();
}</pre>
<div class=note><b>Примечание:</b> both WebGLRenderer and CanvasRenderer are embedded in the web page using an HTML5 &lt;canvas&gt; tag. The "Canvas" in CanvasRenderer means it uses Canvas 2D instead of WebGL.</div>
Don't confuse either CanvasRenderer with the SoftwareRenderer example, which simulates a screen buffer in a Javascript array.<br><br>

<h4>Конструктор</h4>
<pre>CanvasRenderer( <span onclick="showClick(type_obj)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('parameters - параметры')" onmouseout="hide()">parameters</a></span> )</pre>
<tt>parameters</tt> - это дополнительный, необязательный объект со свойствами, определяющими поведение визуализатора. Конструктор также не принимает параметров вообще. Во всех случаях, когда параметры отсутствуют, он будет принимать обычные значения по умолчанию.
<div class=list><tt>canvas</tt> - A canvas where the renderer draws its output. This corresponds to the domElement property below. Если он не передается здесь, то будет создан новый элемент <tt>canvas</tt>.</div>
<div class=list><tt>alpha</tt> - будет ли <tt>canvas</tt> содержать буфер альфа-канала (прозрачность) или нет. Значением по умолчанию является <tt>false</tt>.</div><br>

<h4>Свойства</h4>
<div class=blockindent><br>
<pre id="8.1info"><span onclick="showClick(type_obj)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('info - информация, сведения')" onmouseout="hide()">.info</a></span></pre>
Объект с рядом статистических сведений о памяти видеокарты и процессе рендеринга (визуализации). Годится для отладки или просто ради любопытства. Объект содержит следующие поля:
<div class=blockindent>render:
<div class=blockindent>vertices<br>
faces</div></div><br>

<pre id="8.1domElement">[property:DOMElement domElement</a></pre>
A [page:Canvas</a> where the renderer draws its output.<br>
This is automatically created by the renderer in the constructor (if not provided already); you just need to add it to your page.<br><br>

<pre id="8.1autoClear"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('auto clear - автоматическая очистка')" onmouseout="hide()">.autoClear</a></span></pre>
Defines whether the renderer should automatically clear its output before rendering.<br><br>

<pre id="8.1sortObjects"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('sort objects - сортировка объектов')" onmouseout="hide()">.sortObjects</a></span></pre>
Defines whether the renderer should sort objects. Значением по умолчанию является <tt>true</tt>.
<div class=note><b>Примечание:</b> Sorting is used to attempt to properly render objects that have some degree of transparency.  By definition, sorting objects may not work in all cases.  Depending on the needs of application, it may be neccessary to turn off sorting and use other methods to deal with transparency rendering e.g. manually determining the object rendering order.</div><br>

<pre id="8.1sortElements"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('sort elements - сортировка элементов')" onmouseout="hide()">.sortElements</a></span></pre>
Defines whether the renderer should sort the face of each object. Значением по умолчанию является <tt>true</tt>.</div><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="8.1render"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('render - представить, изобразить')" onmouseout="hide()">.render</a></span>( <a href="scenes.htm#3" onmouseover="show('Scene.<br>scene - сцена')" onmouseout="hide()">scene</a>, <a href="cameras.htm#1" onmouseover="show('Camera.<br>camera - камера')" onmouseout="hide()">camera</a> )</pre>
<div class=list><tt><a href="scenes.htm#3" onmouseover="show('Scene.<br>scene - сцена')" onmouseout="hide()">scene</a></tt> -- отображаемая сцена.</div>
<div class=list><tt><a href="cameras.htm#1" onmouseover="show('Camera.<br>camera - камера')" onmouseout="hide()">camera</a></tt> -- камера для просмотра сцены.</div>
Метод визуализирует (отображает) сцену, используя камеру.<br><br>

<pre id="8.1clear"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('clear - очистить')" onmouseout="hide()">.clear</a></span>()</pre>
Tells the renderer to clear its color drawing buffer with the clearcolor.<br><br>

<pre id="8.1setClearColor">[method:null setClearColor</a>([page:Color color</a>, [page:number alpha</a>)</pre>
<div class=list>color -- The color to clear the canvas with.</div>
<div class=list>alpha -- The alpha channel to clear the canvas with.</div>
This set the clearColor and the clearAlpha.<br><br>

<pre id="8.1setSize"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('set size - установить размер')" onmouseout="hide()">.setSize</a></span>( <span onclick="showClick(type_number)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('width - ширина')" onmouseout="hide()">width</a></span>, <span onclick="showClick(type_number)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('height - высота')" onmouseout="hide()">height</a></span> )</pre>
<div class=list><tt><span onclick="showClick(type_number)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('width - ширина')" onmouseout="hide()">width</a></span></tt> -- ширина холста для рисования.</div>
<div class=list><tt><span onclick="showClick(type_number)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('height - высота')" onmouseout="hide()">height</a></span></tt> -- высота холста для рисования.</div>
This set the size of the drawing canvas and if updateStyle is set, then the css of the canvas is updated too.<br><br>

<pre id="8.1setClearColorHex">[method:null setClearColorHex</a>([page:number hex</a>, [page:number alpha</a>)</pre>
<div class=list>hex -- The the hexadecimal value of the color to clear the canvas with.</div>
<div class=list>alpha -- The alpha channel to clear the canvas with.</div>
This set the clearColor and the clearAlpha.<br><br>

<pre id="8.1getClearColorHex">[method:number getClearColorHex</a>()</pre>
Returns the [page:number hex</a> color.<br><br>

<pre id="8.1getClearAlpha"><span onclick="showClick(type_number)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('get clear alpha - получить чистое (значение) альфа(-канала)')" onmouseout="hide()">.getClearAlpha</a></span>()</pre>
Метод возвращает значение альфа-канала.<br><br>

<h5>Пустые методы для обеспечения совместимости с <a href="renderers.htm#1" onmouseover="show('WebGLRenderer')" onmouseout="hide()">WebGLRenderer</a></h5>
<pre><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('clear color - очистка (буфера) цвета')" onmouseout="hide()">.clearColor</a></span>()
<span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('clear depth - очистка (буфера) глубины')" onmouseout="hide()">.clearDepth</a></span>()
<span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('clear stencil - очистка (буфера) трафарета')" onmouseout="hide()">.clearStencil</a></span>()
<span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('set face culling - установить отбраковку граней')" onmouseout="hide()">.setFaceCulling</a></span>()
<span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('supports vertex textures - поддерживать текстуры вершин')" onmouseout="hide()">.supportsVertexTextures</a></span>()
<span onclick="showClick(type_number)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('get max anisotropy - получить максимальную анизотропию')" onmouseout="hide()">.getMaxAnisotropy</a></span>() - возвращает <tt>1</tt>.</pre></div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/renderers/CanvasRenderer.js" target="_blank">CanvasRenderer.js на github.com</a></div><br><br>


<h3 id="8.2">CSS2DRenderer</h3>
CSS2DRenderer является упрощенной версией <a href="#8.2" onmouseover="show('CSS3DRenderer')" onmouseout="hide()">CSS3DRenderer</a>. Единственная трансформация, здесь поддерживаемая, это перенос (translation).<br>
The renderer is very useful if you want to combine HTML based labels with 3D objects. Here too, the respective DOM elements are wrapped into an instance of CSS2DObject and added to the scene graph.<br>
В отличие от <a href="#8.2" onmouseover="show('CSS3DRenderer')" onmouseout="hide()">CSS3DRenderer</a>, здесь поддерживаются камеры с ортографической проекцией.<br><br>

<h4>Примеры</h4>
<pre><a href="https://threejs.org/examples/webgl_loader_pdb.html" target="_blank">molecules</a></pre><br>

<h4>Конструктор</h4>
<pre>CSS2DRenderer()</pre><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="8.2getSize"><span onclick="showClick(type_obj)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('get size - получить размер')" onmouseout="hide()">.getSize</a></span>( )</pre>
Возвращает объект, содержащий ширину и высоту рендерера.<br><br>

<pre id="8.2render"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('render - представлять, отображать')" onmouseout="hide()">.render</a></span>( <a href="scenes.htm#3" onmouseover="show('Scene.<br>scene - сцена')" onmouseout="hide()">scene</a>, <a href="cameras.htm#1" onmouseover="show('Camera.<br>camera - камера')" onmouseout="hide()">camera</a> )</pre>
Отображает сцену (аргумент <tt>scene</tt>) при помощи камеры (аргумент <tt>camera</tt>).<br><br>

<pre id="8.2setSize"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('set size - установить размер')" onmouseout="hide()">.setSize</a></span>( <span onclick="showClick(type_number)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('width - ширина')" onmouseout="hide()">width</a></span>, <span onclick="showClick(type_number)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('height - высота')" onmouseout="hide()">height</a></span> )</pre>
Изменяет размеры рендерера на указанные в аргументах <tt>width</tt> и <tt>height</tt>.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/renderers/CSS2DRenderer.js" target="_blank">CSS2DRenderer.js на github.com</a></div><br><br>


<h3 id="8.3">CSS3DRenderer</h3>
CSS3DRenderer can be used to apply hierarchical 3D transformations to DOM elements via the CSS3 transform property.<br>
This renderer is particular interesting if you want to apply 3D effects to a website without canvas based rendering. It can also be used in order to combine DOM elements with WebGL content.<br>
Тем не менее, существуют значительные ограничения:
<ul><li>нельзя использовать систему материалов <b>three.js</b>.</li>
<li>также нет возможности использовать геометрические элементы (Geometry).</li>
<li>на данный момент поддерживается только <a href="cameras.htm#4" onmouseover="show('PerspectiveCamera')" onmouseout="hide()">камера с перспективной проекцией</a>.</li></ul>
Так что CSS3DRenderer сфокусирован только на обычных DOM-элементах. Эти элементы упаковываются в специальные объекты (CSS3DObject или CSS3DSprite), а затем добавляются в граф сцены.<br><br>

<h4>Примеры</h4>
<pre><a href="https://threejs.org/examples/#css3d_molecules" target="_blank">molecules</a>
<a href="https://threejs.org/examples/#css3d_panorama" target="_blank">panorama</a>
<a href="https://threejs.org/examples/#css3d_periodictable" target="_blank">periodictable</a>
<a href="https://threejs.org/examples/#css3d_sprites" target="_blank">sprites</a></pre><br>

<h4>Конструктор</h4>
<pre>CSS3DRenderer( )</pre><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="8.3getSize"><span onclick="showClick(type_obj)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('get size - получить размер')" onmouseout="hide()">.getSize</a></span>( )</pre>
Возвращает объект, содержащий ширину и высоту рендерера.<br><br>

<pre id="8.3render"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('render - представлять, отображать')" onmouseout="hide()">.render</a></span>( <a href="scenes.htm#3" onmouseover="show('Scene.<br>scene - сцена')" onmouseout="hide()">scene</a>, <a href="cameras.htm#4" onmouseover="show('PerspectiveCamera.<br>camera - камера')" onmouseout="hide()">camera</a> )</pre>
Отображает сцену (аргумент <tt>scene</tt>) при помощи камеры (аргумент <tt>camera</tt>) с перспективной проекцией.<br><br>

<pre id="8.3setSize"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('set size - установить размер')" onmouseout="hide()">.setSize</a></span>( <span onclick="showClick(type_number)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('width - ширина')" onmouseout="hide()">width</a></span>, <span onclick="showClick(type_number)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('height - высота')" onmouseout="hide()">height</a></span> )</pre>
Изменяет размеры рендерера на указанные в аргументах <tt>width</tt> и <tt>height</tt>.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/renderers/CSS3DRenderer.js" target="_blank">CSS3DRenderer.js на github.com</a></div><br><br>


<h3 id="8.4">SVGRenderer</h3>
SVGRenderer может быть применен для визуализации данных геометрических элементов, использующих формат SVG. Получаемая векторная графика особенно эффективна в следующих случаях применения:
<ul><li>анимированные логотипы или иконки</li>
<li>интерактивные двух-трехмерные диаграммы и графики.</li>
<li>интерактивные карты</li>
<li>сложные или анимированные пользовательские интерфейсы.</li></ul>
SVGRenderer имеет различные достоинства. Он дает кристально чистый и резкий результат, который не зависит от фактического разрешения области видимости.<br>
SVG-элементы можно оформить через CSS. И у них хорошая доступность, поскольку можно добавлять метаданные вроде названия (title) или описания (description) (используются поисковыми движками или программ считывания с экрана.
SVG elements can be styled via CSS. And they have good accessibility since it's possible to add metadata like title or description (useful for search engines or screen readers).<br>
Тем не менее, существуют значительные ограничения:
<ul><li>нет дополнительной тонировки</li>
<li>не поддерживается текстура</li>
<li>не поддерживается тень.</li></ul><br>

<h4>Примеры</h4>
<pre><a href="https://threejs.org/examples/#svg_lines" target="_blank">lines</a>
<a href="https://threejs.org/examples/#svg_sandbox" target="_blank">sandbox</a></pre><br>

<h4>Конструктор</h4>
<pre>SVGRenderer( )</pre><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="8.4clear"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('clear - очистить')" onmouseout="hide()">.clear</a></span>( )</pre>
Указывает рендереру очистить поверхность рисования. Tells the renderer to clear its drawing surface.<br><br>

<pre id="8.4render"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('render - представлять, отображать')" onmouseout="hide()">.render</a></span>( <a href="scenes.htm#3" onmouseover="show('Scene.<br>scene - сцена')" onmouseout="hide()">scene</a>, <a href="cameras.htm#1" onmouseover="show('Camera.<br>camera - камера')" onmouseout="hide()">camera</a> )</pre>
Отображает сцену (аргумент <tt>scene</tt>) при помощи камеры (аргумент <tt>camera</tt>).<br><br>

<pre id="8.4setClearColor"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('set clear color - установить прозрачный цвет')" onmouseout="hide()">.setClearColor</a></span>( <a href="math.htm#3" onmouseover="show('Color.<br>color - цвет')" onmouseout="hide()">color</a>, <span onclick="showClick(type_number)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('alpha - альфа-канал (прозрачность)')" onmouseout="hide()">alpha</a></span> )</pre>
Устанавливает прозрачный цвет (<tt>clearColor</tt>) и его коэффициент прозрачности (<tt>clearAlpha</tt>).<br><br>

<pre id="8.4setPrecision"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('set precision - установить точность')" onmouseout="hide()">.setPrecision</a></span>( <span onclick="showClick(type_number)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('precision - точность')" onmouseout="hide()">precision</a></span> )</pre>
Устанавливает точность данных, используемых для создания пути (контура).<br><br>

<pre id="8.4setQuality"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('set quality - установить качество')" onmouseout="hide()">.setQuality</a></span>( )</pre>
Устанавливает качество визуализации. Возможные значения - <tt>low</tt> (низкое) и <tt>high</tt> (высокое). Значение по умолчанию - <tt>high</tt>.<br><br>

<pre id="8.4setSize"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('set size - установить размер')" onmouseout="hide()">.setSize</a></span>( <span onclick="showClick(type_number)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('width - ширина')" onmouseout="hide()">width</a></span>, <span onclick="showClick(type_number)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('height - высота')" onmouseout="hide()">height</a></span> )</pre>
Изменяет размеры рендерера на указанные в аргументах <tt>width</tt> и <tt>height</tt>.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/renderers/SVGRenderer.js" target="_blank">SVGRenderer.js на github.com</a></div><br><br>


<h2 id="9">Подсобные функции (утилиты)</h2>
<h3 id="9.1">BufferGeometryUtils</h3>
Класс, содержащий вспомогательные функции для экземпляров <a href="core.htm#2" onmouseover="show('BufferGeometry')" onmouseout="hide()">BufferGeometry</a>.<br><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="9.1computeTangents"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('compute tangents - вычислить касательные')" onmouseout="hide()">.computeTangents</a></span>( <a href="core.htm#2" onmouseover="show('BufferGeometry.<br>geometry - геометрия, в данном<br>случае - геометрический элемент')" onmouseout="hide()">geometry</a> )</pre>
<div class=list><tt>geometry</tt> -- экземпляр <a href="core.htm#2" onmouseover="show('BufferGeometry')" onmouseout="hide()">BufferGeometry</a>, у которого должны быть атрибуты <tt>index</tt>, <tt>position</tt>, <tt>normal</tt>, и <tt>uv</tt>.</div>
Метод вычисляет касательные и добавляет данному геометрическому элементу атрибут <tt>tangent</tt>.<br><br>

<pre id="9.1mergeBufferGeometries"><a href="core.htm#2" onmouseover="show('BufferGeometry.<br>merge BufferGeometries - слить (соединить) экземпляры BufferGeometry')" onmouseout="hide()">.mergeBufferGeometries</a>( <span onclick="showClick(type_array)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('geometries - геометрии, в данном<br>случае - геометрические элементы')" onmouseout="hide()">geometries</a></span> )</pre>
<div class=list><tt>geometries</tt> -- массив экземпляров <a href="core.htm#2" onmouseover="show('BufferGeometry')" onmouseout="hide()">BufferGeometry</a>.</div>
Метод соединяет набор геометрических элементов в один экземпляр. Все геометрические элементы должны иметь совместимые атрибуты. Если объединение не получилось, метод возвращает значение <tt>null</tt>.<br><br>

<pre id="9.1mergeBufferAttributes"><a href="core.htm#2" onmouseover="show('BufferGeometry.<br>merge BufferAttributes - слить (соединить)<br>атрибуты буферных элементов')" onmouseout="hide()">.mergeBufferAttributes</a>( <span onclick="showClick(type_array)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('attributes - атрибуты')" onmouseout="hide()">attributes</a></span> )</pre>
<div class=list><tt>attributes</tt> -- массив экземпляров <a href="core.htm#2" onmouseover="show('BufferGeometry')" onmouseout="hide()">BufferGeometry</a>.</div>
Метод соединяет набор атрибутов в один экземпляр. Все атрибуты должны иметь совместимые свойства и типы,
а <a href="core.htm#12" onmouseover="show('InterleavedBufferAttributes')" onmouseout="hide()">InterleavedBufferAttributes</a> не поддерживается.
Если объединение не получилось, метод возвращает значение <tt>null</tt>.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/BufferGeometryUtils.js" target="_blank">BufferGeometryUtils.js на github.com</a></div><br><br>


<h3 id="9.2">SceneUtils</h3>
Класс, содержащий полезные служебные функции для работы со сценой.<br><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="9.2createMultiMaterialObject"><a href="objects.htm#2" onmouseover="show('Group.<br>create multimaterial object - создать многоматериальный объект')" onmouseout="hide()">.createMultiMaterialObject</a>( <a href="core.htm#7" onmouseover="show('Geometry.<br>geometry - геометрия, в данном<br>случае - геометрический элемент')" onmouseout="hide()">geometry</a>, <span onclick="showClick(type_array)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('materials - материалы')" onmouseout="hide()">materials</a></span> )</pre>
<div class=list><tt>geometry</tt> -- геометрический элемент, для которого создается набор материалов.</div>
<div class=list><tt>materials</tt> -- материалы для объекта, указанного в <tt>geometry</tt>.</div>
Создает новую <a href="objects.htm#2" onmouseover="show('Group')" onmouseout="hide()">группу</a>, которая содержит новую сетку (mesh) для каждого материала, обозначенного в <tt>materials</tt>.
Будьте осторожными и помните, что это не то же самое, что и массив материалов, устанавливающий множество материалов для 1 сетки.<br>
В основном это выгодно для объектов, которым нужен как материал, так и реализация каркаса.<br><br>

<pre id="9.2attach"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('attach - прикрепить, присоединить')" onmouseout="hide()">.attach</a></span>( <a href="core.htm#14" onmouseover="show('Object3D.<br>child - ребёнок, в данном случае - дочерний объект')" onmouseout="hide()">child</a>, <a href="core.htm#14" onmouseover="show('Object3D.<br>scene - сцена')" onmouseout="hide()">scene</a>, <a href="core.htm#14" onmouseover="show('Object3D.<br>parent - родитель')" onmouseout="hide()">parent</a> )</pre>
<div class=list><tt>child</tt> -- объект, добавляемый к родительскому объекту (указанному в <tt>parent</tt>.</div>
<div class=list><tt>scene</tt> -- сцена, от которой отсоединяется объект.</div>
<div class=list><tt>parent</tt> -- родительский объект, к которому присоединяется объект <tt>child</tt>.</div>
Метод присоединяет объект <tt>child</tt> к родительскому объекту <tt>parent</tt>, без перемещения объекта <tt>child</tt> в "мировом" пространстве.
Помните, что для этого нужно обновить <tt>matrixWorld</tt>, это можно сделать вызвав для родительского объекта метод <tt>updateMatrixWorld</tt>.<br><br>

<pre id="9.2detach"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('detach - отделить, отсоединить')" onmouseout="hide()">.detach</a></span>( <a href="core.htm#14" onmouseover="show('Object3D.<br>child - ребёнок, в данном случае - дочерний объект')" onmouseout="hide()">child</a>, <a href="core.htm#14" onmouseover="show('Object3D.<br>parent - родитель')" onmouseout="hide()">parent</a>, <a href="core.htm#14" onmouseover="show('Object3D.<br>scene - сцена')" onmouseout="hide()">scene</a> )</pre>
<div class=list><tt>child</tt> -- объект, удаляемый от родительского объекта <tt>parent</tt>.</div>
<div class=list><tt>scene</tt> -- сцена, к которой присоединяется объект <tt>child</tt>.</div>
<div class=list><tt>parent</tt> -- родительский объект, от которого отсоединяется объект <tt>child</tt>.</div>
Метод отсоединяет объект <tt>child</tt> от родительского объекта <tt>parent</tt> и добавляет его обратно на сцену, без перемещения в "мировом" пространстве.
Помните, что для этого нужно обновить <tt>matrixWorld</tt>, это можно сделать вызвав для родительского объекта метод <tt>updateMatrixWorld</tt>.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/utils/SceneUtils.js" target="_blank">SceneUtils.js на github.com</a></div><br><br>

<br><br>
</body></html>
