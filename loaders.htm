<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
<title>Three.js</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<link rel="stylesheet" type="text/css" href="1.css">
<script type="text/javascript" src="1.js"></script>
</head>
<body>
<h2 class=head1>Загрузчики</h2>
<div class=below>В этом разделе рассматриваются различные загрузчики, используемые для загрузки изображений, материалов, текстур, шрифта и т.д.
<table width=100%>
<tr><td width=50% valign=top>
<div class=list><a href="#1">AnimationLoader</a></div>
<div class=list><a href="#3">BufferGeometryLoader</a></div>
<div class=list><a href="#5">CompressedTextureLoader</a></div>
<div class=list><a href="#7">DataTextureLoader</a></div>
<div class=list><a href="#9">FontLoader</a></div>
<div class=list><a href="#11">ImageLoader</a></div>
<div class=list><a href="#13">Loader</a></div>
<div class=list><a href="#15">MaterialLoader</a></div>
<div class=list><a href="#17">TextureLoader</a></div>
</td>
<td width=50% valign=top>
<div class=list><a href="#2">AudioLoader</a></div>
<div class=list><a href="#4">Cache</a></div>
<div class=list><a href="#6">CubeTextureLoader</a></div>
<div class=list><a href="#8">FileLoader</a></div>
<div class=list><a href="#10">ImageBitmapLoader</a></div>
<div class=list><a href="#12">JSONLoader</a></div>
<div class=list><a href="#14">LoaderUtils</a></div>
<div class=list><a href="#16">ObjectLoader</a></div>
</td></tr></table><br>
<table><tr><td><div class=list><a href="#18">Менеджеры загрузки</a></div>
<div class=list>&nbsp; &nbsp; &nbsp; <a href="#18.1">DefaultLoadingManager</a></div>
<div class=list>&nbsp; &nbsp; &nbsp; <a href="#18.2">LoadingManager</a></div></td></tr></table>
</div><br>

<h3 id="1">AnimationLoader</h3>
Класс для загрузки анимации в формате JSON. Для загрузки файлов, внутри класса, используется <a href="#8" onmouseover="show('FileLoader')" onmouseout="hide()">FileLoader</a>.<br><br>

<h4>Пример</h4>
<pre>// instantiate a loader (создаем экземпляр загрузчика)
var loader = new THREE.AnimationLoader();<br>
// load a resource (загрузка ресурса)
loader.load(
  // resource URL (URL-адрес ресурса)
  'animations/animation.js',
  // Function when resource is loaded
  // функция, вызываемая при загрузке ресурса
  function ( animation ) {
    // do something with the animation
    // здесь выполняется какая-нибудь анимация
  },
  // Function called when download progresses
  // функция, вызываемая при процессе загрузки
  function ( xhr ) {
    console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );
  },
  // Function called when download errors
  // функция, вызываемая при ошибке загрузки
  function ( xhr ) {
    console.log( 'An error happened' );
  }
);</pre><br>

<h4>Конструктор</h4>
<pre>AnimationLoader( <a href="#16.2" onmouseover="show('LoadingManager.<br>manager - управляющий, администратор, менеджер')" onmouseout="hide()">manager</a> )</pre>
<div class=list><tt><a href="#16.2" onmouseover="show('LoadingManager.<br>manager - управляющий, администратор, менеджер')" onmouseout="hide()">manager</a></tt>
— The <a href="#16.2" onmouseover="show('LoadingManager')" onmouseout="hide()">loadingManager</a> for the loader to use. По умолчанию это <a href="#16.1" onmouseover="show('default loading manager - менеджер загрузки по умолчанию')" onmouseout="hide()">THREE.DefaultLoadingManager</a>.</div>
Создает новый AnimationLoader.<br><br>

<h4>Свойства</h4>
<div class=blockindent><br>
<pre id="1manager"><a href="#16.2" onmouseover="show('LoadingManager.<br>manager - управляющий, администратор, менеджер')" onmouseout="hide()">.manager</a></pre>
The [page:LoadingManager loadingManager] the loader is using.
По умолчанию это <a href="#16.1" onmouseover="show('default loading manager - менеджер загрузки по умолчанию')" onmouseout="hide()">THREE.DefaultLoadingManager</a>.</div><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="1load"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('load - грузить, загружать')" onmouseout="hide()">.load</a></span>( <span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('url - сокращ. англ. слов Uniform Resource Locator<br>(читается как /ˌjuː ɑːr ˈel/) —<br>единообразный локатор (определитель местонахождения)<br>ресурса или единый указатель ресурса.')" onmouseout="hide()">url</a></span>, <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on load - на загрузку')" onmouseout="hide()">onLoad</a></span>, <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on progress - на ход процесса')" onmouseout="hide()">onProgress</a></span>, <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on error - на ошибку')" onmouseout="hide()">onError</a></span> )</pre>
<div class=list><tt><span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('url - сокращ. англ. слов Uniform Resource Locator<br>(читается как /ˌjuː ɑːr ˈel/) —<br>единообразный локатор (определитель местонахождения)<br>ресурса или единый указатель ресурса.')" onmouseout="hide()">url</a></span></tt>
— путь или URL к файлу. Также это может быть <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs" target="_blank">Data URI</a>.</div>
<!-- https://ru.wikipedia.org/wiki/URI
https://ru.wikipedia.org/wiki/Data:_URL -->
<div class=list><tt><span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on load - на загрузку')" onmouseout="hide()">onLoad</a></span></tt>
— Функция, которая будет вызвана по завершении загрузки. Аргументом будет загруженная <a href="animation.htm#1" onmouseover="show('Animation')" onmouseout="hide()">анимация</a>.</div>
<div class=list><tt><span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on progress - на ход процесса')" onmouseout="hide()">onProgress</a></span></tt>
— функция, которая будет вызываться пока идет процесс загрузки.
Аргументом будет экземпляр XMLHttpRequest, что содержит сведения о загрузке <tt><span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('total - полный (размер ресурса)')" onmouseout="hide()">total</a></span></tt>
и <tt><span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('loaded - загружено, в данном случае<br>размер загруженного ресурса')" onmouseout="hide()">loaded</a></span></tt> в байтах.</div>
<div class=list><tt><span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on error - на ошибку')" onmouseout="hide()">onError</a></span></tt> — функция, которая будет вызвана в случае ошибки при загрузке.</div>
Начинает загрузку с URL-адреса и передает загруженную анимацию функции, указанной в <tt>onLoad</tt>.<br><br>

<pre id="1parse"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('parse - разбор, структурный анализ')" onmouseout="hide()">.parse</a></span>( <span onclick="showClick('объект JSON')"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('JSON - сокращ. англ. слов JavaScript Object Notation,<br>обычно произносится как /ˈdʒeɪsən/ JAY-sən)<br>— текстовый формат обмена данными, основанный<br>на JavaScript.')" onmouseout="hide()">json</a></span>, <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on load - на загрузку')" onmouseout="hide()">onLoad</a></span> )</pre>
<div class=list><tt><span onclick="showClick('объект JSON')"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('JSON - сокращ. англ. слов JavaScript Object Notation,<br>обычно произносится как /ˈdʒeɪsən/ JAY-sən)<br>— текстовый формат обмена данными, основанный<br>на JavaScript.')" onmouseout="hide()">json</a></span></tt> — обязателен</div>
<div class=list><tt><span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on load - на загрузку')" onmouseout="hide()">onLoad</a></span></tt> — функция, вызываемая по завершении разбора (парсинга) JSON объекта.</div>
Анализирует (разбирает) объект JSON и передает результаты функции, приведенной в аргументе <tt>onLoad</tt>.
Отдельные клипы объекта будут обработаны с помощью метода <tt><a href="animation.htm#2parse" onmouseover="show('AnimationClip.parse')" onmouseout="hide()">AnimationClip.parse</a></tt>.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/loaders/AnimationLoader.js" target="_blank">AnimationLoader.js на github.com</a></div><br><br>


<h3 id="2">AudioLoader</h3>
Класс для загрузки <span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('audio buffer - буфер звука')" onmouseout="hide()">AudioBuffer</a></span>. Для загрузки файлов, внутри класса, используется <a href="#8" onmouseover="show('FileLoader')" onmouseout="hide()">FileLoader</a>.<br><br>

<h4>Пример</h4>
<pre>// instantiate a listener (создаем экземпляр слушателя)
var audioListener = new THREE.AudioListener();<br>
// add the listener to the camera (добавляем слушателя к камере)
camera.add( audioListener );<br>
// instantiate audio object (создаем экземпляр аудиообъекта)
var oceanAmbientSound = new THREE.Audio( audioListener );<br>
// add the audio object to the scene (добавляем к сцене аудиообъект)
scene.add( oceanAmbientSound );<br>
// instantiate a loader (создаем экземпляр загрузчика)
var loader = new THREE.AudioLoader();<br>
// load a resource (загружаем ресурс)
loader.load(
  // resource URL (адрес ресурса)
  'audio/ambient_ocean.ogg',
  // Function when resource is loaded
  // функция, вызываемая после загрузки ресурса
  function ( audioBuffer ) {
    // set the audio object buffer to the loaded object
    // устанавливаем буфер аудиообъекта для загруженного объекта
    oceanAmbientSound.setBuffer( audioBuffer );<br>
    // play the audio - воспроизводим аудио
    oceanAmbientSound.play();
  },
  // Function called when download progresses
  // функция, вызываемая во время выполнения загрузки
  function ( xhr ) {
    console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );
  },
  // Function called when download errors
  // функция, вызываемая при ошибках загрузки
  function ( xhr ) {
    console.log( 'An error happened' );
  }
);</pre><br>

<h4>Конструктор</h4>
<pre>AudioLoader( <span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('context - контекст, ситуация, обстановка, фон')" onmouseout="hide()">context</a></span>, <a href="#16.2" onmouseover="show('LoadingManager.<br>manager - управляющий, администратор, менеджер')" onmouseout="hide()">manager</a> )</pre>
<div class=list><tt>context</tt> — <a href="https://developer.mozilla.org/ru/docs/Web/API/AudioContext" target="_blank">AudioContext</a> for the loader to use.
Значением по умолчанию является <span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('window.AudioContext - ')" onmouseout="hide()">window.AudioContext</a></span>.</div>
<div class=list><tt>manager</tt> — <a href="#16.2" onmouseover="show('LoadingManager')" onmouseout="hide()">loadingManager</a> for the loader to use. По умолчанию это <a href="#16.1" onmouseover="show('DefaultLoadingManager')" onmouseout="hide()">THREE.DefaultLoadingManager</a>.</div>
Создает новый AudioLoader.<br><br>

<h4>Свойства</h4>
<div class=blockindent><br>
<pre id="2manager"><a href="#16.2" onmouseover="show('LoadingManager.<br>manager - управляющий, администратор, менеджер')" onmouseout="hide()">.manager</a></pre>
The [page:LoadingManager loadingManager] the loader is using.
По умолчанию это <a href="#16.1" onmouseover="show('default loading manager - менеджер загрузки по умолчанию')" onmouseout="hide()">THREE.DefaultLoadingManager</a>.</div><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="2load"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('load - грузить, загружать')" onmouseout="hide()">.load</a></span>( <span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('url - сокращ. англ. слов Uniform Resource Locator<br>(читается как <tt>/ˌjuː ɑːr ˈel/</tt>) —<br>единообразный локатор (определитель местонахождения)<br>ресурса или единый указатель ресурса.')" onmouseout="hide()">url</a></span>, <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on load - на загрузку')" onmouseout="hide()">onLoad</a></span>, <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on progress - на ход процесса')" onmouseout="hide()">onProgress</a></span>, <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on error - на ошибку')" onmouseout="hide()">onError</a></span> )</pre>
<div class=list><tt><span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('url - сокращ. англ. слов Uniform Resource Locator<br>(читается как <tt>/ˌjuː ɑːr ˈel/</tt>) —<br>единообразный локатор (определитель местонахождения)<br>ресурса или единый указатель ресурса.')" onmouseout="hide()">url</a></span></tt> — url-адрес ресурса, обязательный аргумент.</div>
<div class=list><tt><span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on load - на загрузку')" onmouseout="hide()">onLoad</a></span></tt> — функция, которая будет вызываться при завершении загрузки. Аргументом должен быть загруженный текст ответа.</div>
<div class=list><tt><span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on progress - на ход процесса')" onmouseout="hide()">onProgress</a></span></tt>
— функция, которая будет вызываться пока идет процесс загрузки.
Аргументом будет экземпляр XMLHttpRequest, что содержит сведения о загрузке <tt><span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('total - полный (размер ресурса)')" onmouseout="hide()">total</a></span></tt>
и <tt><span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('loaded - загружено, в данном случае<br>размер загруженного ресурса')" onmouseout="hide()">loaded</a></span></tt> в байтах.</div>
<div class=list><tt><span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on error - на ошибку')" onmouseout="hide()">onError</a></span></tt> — функция, которая будет вызвана в случае ошибки при загрузке.</div>
Начинает загрузку из <tt>url</tt> и передает загруженный <span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('audio buffer - буфер звука')" onmouseout="hide()">AudioBuffer</a></span> функции, указанной в <tt>onLoad</tt>.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/loaders/AudioLoader.js" target="_blank">AudioLoader.js на github.com</a></div><br>


<h3 id="3">BufferGeometryLoader</h3>
Загрузчик для загрузки <a href="core.htm#2" onmouseover="show('BufferGeometry')" onmouseout="hide()">BufferGeometry</a>.
Для загрузки файлов, внутри класса, используется <a href="#8" onmouseover="show('FileLoader')" onmouseout="hide()">FileLoader</a>.

<h4>Пример</h4>
<pre>// instantiate a loader (создаем экземпляр загрузчика)
var loader = new THREE.BufferGeometryLoader();<br>
// load a resource (загрузка ресурса)
loader.load(
	// resource URL (URL-адрес ресурса)
	'models/json/pressure.json',
	// Function when resource is loaded
    // функция, вызываемая при загрузке ресурса
	function ( geometry ) {
		var material = new THREE.MeshLambertMaterial( { color: 0xF5F5F5 } );
		var object = new THREE.Mesh( geometry, material );
		scene.add( object );
	},
	// Function called when download progresses
    // функция, вызываемая при процессе загрузки
	function ( xhr ) {
		console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );
	},
	// Function called when download errors
    // функция, вызываемая при ошибке загрузки
	function ( xhr ) {
		console.log( 'An error happened' );
	}
);</pre>
<h5>Другие примеры</h5>
<pre><a href="https://threejs.org/examples/#webgl_geometry_colors_lookuptable" target="_blank">WebGL / geometry / colors / lookuptable</a></pre><br>

<h4>Конструктор</h4>
<pre>BufferGeometryLoader( <a href="#16.2" onmouseover="show('LoadingManager.<br>manager - управляющий, администратор, менеджер')" onmouseout="hide()">manager</a> )</pre>
<div class=list><tt><a href="#16.2" onmouseover="show('LoadingManager.<br>manager - управляющий, администратор, менеджер')" onmouseout="hide()">manager</a></tt>
— The [page:LoadingManager loadingManager] the loader is using.
По умолчанию это <a href="#16.1" onmouseover="show('default loading manager - менеджер загрузки по умолчанию')" onmouseout="hide()">THREE.DefaultLoadingManager</a>.</div>
Создает новый BufferGeometryLoader.<br><br>

<h4>Свойства</h4>
<div class=blockindent><br>
<pre id="3manager"><a href="#16.2" onmouseover="show('LoadingManager.<br>manager - управляющий, администратор, менеджер')" onmouseout="hide()">.manager</a></pre>
The [page:LoadingManager loadingManager] the loader is using.
По умолчанию это <a href="#16.1" onmouseover="show('default loading manager - менеджер загрузки по умолчанию')" onmouseout="hide()">THREE.DefaultLoadingManager</a>.</div><br>

<h4>Методы</h4>
<pre id="3load"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('load - грузить, загружать')" onmouseout="hide()">.load</a></span>( <span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('url - сокращ. англ. слов Uniform Resource Locator<br>(читается как <tt>/ˌjuː ɑːr ˈel/</tt>) —<br>единообразный локатор (определитель местонахождения)<br>ресурса или единый указатель ресурса.')" onmouseout="hide()">url</a></span>, <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on load - на загрузку')" onmouseout="hide()">onLoad</a></span>, <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on progress - на ход процесса')" onmouseout="hide()">onProgress</a></span>, <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on error - на ошибку')" onmouseout="hide()">onError</a></span> )</pre>
<div class=list><tt><span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('url - сокращ. англ. слов Uniform Resource Locator<br>(читается как <tt>/ˌjuː ɑːr ˈel/</tt>) —<br>единообразный локатор (определитель местонахождения)<br>ресурса или единый указатель ресурса.')" onmouseout="hide()">url</a></span></tt> — url-адрес ресурса, обязательный аргумент.</div>
<div class=list><tt><span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on load - на загрузку')" onmouseout="hide()">onLoad</a></span></tt> — функция, которая будет вызываться при завершении загрузки. Аргументом должен быть загруженный текст ответа.</div>
<div class=list><tt><span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on progress - на ход процесса')" onmouseout="hide()">onProgress</a></span></tt>
— функция, которая будет вызываться пока идет процесс загрузки.
Аргументом будет экземпляр XMLHttpRequest, что содержит сведения о загрузке <tt><span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('total - полный (размер ресурса)')" onmouseout="hide()">total</a></span></tt>
и <tt><span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('loaded - загружено, в данном случае<br>размер загруженного ресурса')" onmouseout="hide()">loaded</a></span></tt> в байтах.</div>
<div class=list><tt><span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on error - на ошибку')" onmouseout="hide()">onError</a></span></tt> — функция, которая будет вызвана в случае ошибки при загрузке.</div>
Начинает загрузку из <tt>url</tt> и вызывает функцию, указанную в <tt>onLoad</tt>, с разобранным содержимым ответа.<br>
Begin loading from url and call onLoad with the parsed response content.<br><br>

<pre id="2parse"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('parse - разбор, структурный анализ')" onmouseout="hide()">.parse</a></span>( <span onclick="showClick('объект JSON')"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('JSON - сокращ. англ. слов JavaScript Object Notation,<br>обычно произносится как <tt>/ˈdʒeɪsən/ JAY-sən</tt>)<br>— текстовый формат обмена данными, основанный<br>на JavaScript.')" onmouseout="hide()">json</a></span> )</pre>
<div class=list><tt><span onclick="showClick('объект JSON')"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('JSON - сокращ. англ. слов JavaScript Object Notation,<br>обычно произносится как <tt>/ˈdʒeɪsən/ JAY-sən</tt>)<br>— текстовый формат обмена данными, основанный<br>на JavaScript.')" onmouseout="hide()">json</a></span></tt>
— разбираемая структура в формате <tt>JSON</tt>.</div>
Метод разбирает (анализирует) структуру <tt>JSON</tt> и возвращает and return a <a href="core.htm#2" onmouseover="show('BufferGeometry')" onmouseout="hide()">BufferGeometry</a>.

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/loaders/BufferGeometryLoader.js" target="_blank">BufferGeometryLoader.js на github.com</a></div><br>


<h3 id="4">Cache</h3>
Простая система кэширования, используемая внутри <a href="#8" onmouseover="show('FileLoader')" onmouseout="hide()">FileLoader</a>.<br><br>

<h4>Примеры</h4>
<pre><a href="https://threejs.org/examples/#webgl_geometry_text_earcut" target="_blank">WebGL / geometry / text / earcut</a>
<a href="https://threejs.org/examples/#webgl_interactive_instances_gpu" target="_blank">WebGL / interactive / instances / gpu</a>
<a href="https://threejs.org/examples/#webgl_loader_ttf" target="_blank">WebGL / loader / ttf</a></pre><br>

<h4>Применение</h4>
Чтобы включить кэширование во всех загрузчиках, использующих <a href="#8" onmouseover="show('FileLoader')" onmouseout="hide()">FileLoader</a>, установите
<pre>THREE.Cache.enabled = true</pre><br>

<h4>Свойства</h4>
<div class=blockindent><br>
<pre id="4enabled"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('enabled - включено')" onmouseout="hide()">.enabled</a></span></pre>
Свойство определяет, будет ли включено кэширование. Значением по умолчанию является <tt>false</tt>.<br><br>

<pre id="4files"><span onclick="showClick(type_obj)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('files - файлы')" onmouseout="hide()">.files</a></span></pre>
Объект, удерживающий кэшированные файлы.
An [page:Object object] that holds cached files.</div><br>

<h4>Методы</h4>
<div class=blockindent>
<pre id="4add"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('add - добавить')" onmouseout="hide()">.add</a></span>( <span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('key - ключ')" onmouseout="hide()">key</a></span>, <span onclick="showClick(type_obj)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('file - файл')" onmouseout="hide()">file</a></span> )</pre>
<div class=list><tt>key</tt> — the [page:String key] to reference the cached file by.</div>
<div class=list><tt>file</tt> — файл, который нужно кэшировать.</div>
Adds a cache entry with a key to reference the file. If this key already holds a file, it is overwritten.<br><br>

<pre id="4get"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('get - получить')" onmouseout="hide()">.get</a></span>( <span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('key - ключ')" onmouseout="hide()">key</a></span> )</pre>
<div class=list><tt>key</tt> — строковый ключ.</div>
Метод получает значение [page:String key]. Если ключа не существует, возвращается значение <tt>undefined</tt>, т.е. неопределено.<br><br>

<pre id="4remove"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('remove - удалить')" onmouseout="hide()">.remove</a></span>( <span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('key - ключ')" onmouseout="hide()">key</a></span> )</pre>
<div class=list><tt><span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('key - ключ')" onmouseout="hide()">key</a></span></tt> — строковый ключ, связанный с кэшированным файлом.</div>
Удаляет кэшированный файл, связанный с данным ключом.<br><br>

<pre id="4clear"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('clear - очистить')" onmouseout="hide()">.clear</a></span>( )</pre>
Удаляет все значения из кэша.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/loaders/Cache.js" target="_blank">Cache.js на github.com</a></div><br>


<h3 id="5">CompressedTextureLoader</h3>
Abstract base class for block based textures loader (dds, pvr, ...).
This uses the [page:FileLoader] internally for loading files.

<h4>Примеры</h4>
See the [link:https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/DDSLoader.js DDSLoader]
			and [link:https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/PVRLoader.js PVRLoader]
			for examples of derived classes.

<h4>Конструктор</h4>

<h3>CompressedTextureLoader( [page:LoadingManager manager] )</h3>
		<div>
[page:LoadingManager manager] — The [page:LoadingManager loadingManager] for the loader to use.
Default is [page:LoadingManager THREE.DefaultLoadingManager].<br>

Создает новый CompressedTextureLoader.</div>

<h4>Свойства</h4>

		<h3>[property:LoadingManager manager]</h3>
		<div>
			The [page:LoadingManager loadingManager] the loader is using. Default is [page:DefaultLoadingManager].
		</div>

		<h3>[property:String path]</h3>
		<div>The base path from which files will be loaded. See [page:.setPath]. Default is *undefined*.</div>

<h4>Методы</h4>

		<h3>[method:null load]( [page:String url], [page:Function onLoad], [page:Function onProgress], [page:Function onError] )</h3>
		<div>
		[page:String url] — the path or URL to the file. This can also be a
			[link:https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs Data URI].<br />
		[page:Function onLoad] — Will be called when load completes. The argument will be the loaded texture.<br />
		[page:Function onProgress] — Will be called while load progresses. The argument will be the XMLHttpRequest instance, which contains .[page:Integer total] and .[page:Integer loaded] bytes.<br />
		[page:Function onError] — Will be called when load errors.<br />
		</div>
		<div>
		Begin loading from url and pass the loaded texture to onLoad.
		</div>

		<h3>[method:FileLoader setPath]( [page:String path] )</h3>
		<div>
			Set the base path or URL from which to load files. This can be useful if
			you are loading many textures from the same directory.
		</div>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/loaders/CompressedTextureLoader.js" target="_blank">CompressedTextureLoader.js на github.com</a></div><br>


<h3 id="6">CubeTextureLoader</h3>
Class for loading a [page:CubeTexture CubeTexture].
This uses the [page:ImageLoader] internally for loading files.
<br><br>

<h4>Пример</h4>

		<div>
			[example:webgl_materials_cubemap materials / cubemap]<br />
			[example:webgl_materials_cubemap_balls_reflection materials / cubemap / balls / reflection]<br />
			[example:webgl_materials_cubemap_balls_refraction materials / cubemap / balls / refraction]<br />
			[example:webgl_materials_cubemap_dynamic materials / cubemap / dynamic]<br />
			[example:webgl_materials_cubemap_dynamic2 materials / cubemap / dynamic2]<br />
			[example:webgl_materials_cubemap_refraction materials / cubemap / refraction]
		</div>

<pre>var scene = new THREE.Scene();
scene.background = new THREE.CubeTextureLoader()
	.setPath( 'textures/cubeMaps/' )
	.load( [
				'1.png',
				'2.png',
				'3.png',
				'4.png',
				'5.png',
				'6.png'
			] );</pre>

<h4>Конструктор</h4>
<h3>CubeTextureLoader( [page:LoadingManager manager] )</h3>
<div class=list>[page:LoadingManager manager] — The [page:LoadingManager loadingManager] for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager].</div>
Создает новый CubeTextureLoader.<br><br>

<h4>Свойства</h4>

		<h3>[property:String crossOrigin]</h3>
		<div>
		If set, assigns the [link:https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes crossOrigin]
	 attribute of the image to the value of *crossOrigin*,
		prior to starting the load. Default is *undefined*.
		</div>

		<h3>[property:LoadingManager manager]</h3>
		<div>
			The [page:LoadingManager loadingManager] the loader is using. Default is [page:DefaultLoadingManager].
		</div>

		<h3>[property:String path]</h3>
		<div>The base path from which files will be loaded. See [page:.setPath]. Default is *undefined*.</div>

<h4>Методы</h4>

		<h3>[method:null load]( [page:String urls], [page:Function onLoad], [page:Function onProgress], [page:Function onError] )</h3>
		<div>
		[page:String urls] — array of 6 urls to images, one for each side of the CubeTexture. These can also be
			[link:https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs Data URIs].<br />
		[page:Function onLoad] — Will be called when load completes. The argument will be the loaded [page:Texture texture].<br />
		[page:Function onProgress] — Will be called while load progresses. The argument will be the XMLHttpRequest instance, which contains .[page:Integer total] and .[page:Integer loaded] bytes.<br />
		[page:Function onError] — Will be called when load errors.<br />
		</div>
		<div>
		Begin loading from url and pass the loaded [page:Texture texture] to onLoad.
		</div>

		<h3>[method:null setCrossOrigin]( [page:String value] )</h3>
		<div>		Set the [page:.crossOrigin] attribute.</div>

		<h3>[method:FileLoader setPath]( [page:String path] )</h3>
		<div>
			Set the base path or URL from which to load files. This can be useful if
			you are loading many textures from the same directory.
</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/loaders/CubeTextureLoader.js" target="_blank">CubeTextureLoader.js на github.com</a></div><br>


<h3 id="7">DataTextureLoader</h3>
Abstract base class to load generic binary textures formats (rgbe, hdr, ...).
This uses the [page:FileLoader] internally for loading files, and creates a new
		[page:DataTexture].<br><br>

<h4>Примеры</h4>
See the [link:https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/RGBELoader.js RGBELoader] for an example of a derived class.

<h4>Конструктор</h4>
<h3>DataTextureLoader( [page:LoadingManager manager] )</h3>
<div class=list>[page:LoadingManager manager] — The [page:LoadingManager loadingManager] for the loader to use.
Default is [page:LoadingManager THREE.DefaultLoadingManager].</div>
Создаение нового DataTextureLoader.<br><br>

<h4>Свойства</h4>
<div class=blockindent><br>
<pre id="7manager">[property:LoadingManager manager]</pre>
The [page:LoadingManager loadingManager] the loader is using. Default is [page:DefaultLoadingManager].</div><br>

<h4>Методы</h4>

		<h3>[method:null load]( [page:String url], [page:Function onLoad], [page:Function onProgress], [page:Function onError] )</h3>
		<div>
		[page:String url] — the path or URL to the file. This can also be a
			[link:https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs Data URI].<br />
		[page:Function onLoad] — Will be called when load completes. The argument will be the loaded texture.<br />
		[page:Function onProgress] — Will be called while load progresses. The argument will be the XMLHttpRequest instance, which contains .[page:Integer total] and .[page:Integer loaded] bytes.<br />
		[page:Function onError] — Will be called when load errors.<br />
		</div>
		<div>
		Begin loading from url and pass the loaded texture to onLoad.
		</div>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/loaders/DataTextureLoader.js" target="_blank">DataTextureLoader.js на github.com</a></div><br>


<h3 id="8">FileLoader</h3>
A low level class for loading resources with XmlHttpRequest, used internaly by most loaders.

<h4>Конструктор</h4>
<pre>FileLoader( [page:LoadingManager manager] )</pre>
<div class="blockindent">[page:LoadingManager manager] — The [page:LoadingManager loadingManager] for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager].</div>
Creates a new FileLoader.

<h4>Свойства</h4>
<pre>[property:Cache cache]</pre>
A [page:Cache cache] instance that hold the response from each request made through this loader, so each file is requested once.

<pre>[property:String responseType]</pre>
Can be set to change the response type.

<h4>Методы</h4>
<pre>[method:null load]( [page:String url], [page:Function onLoad], [page:Function onProgress], [page:Function onError] )</pre>
<div class="blockindent">[page:String url] — required<br>
		[page:Function onLoad] — Will be called when load completes. The argument will be the loaded text response.<br>
		[page:Function onProgress] — Will be called while load progresses. The argument will be the XmlHttpRequest instance, that contain .[page:Integer total] and .[page:Integer loaded] bytes.<br>
		[page:Function onError] — Will be called when load errors.</div>
Begin loading from url and return the [page:String text] response that will contain the data.

<pre>[method:null setCrossOrigin]( [page:String value] )</pre>
<div class="blockindent">[page:String value] — The crossOrigin string to implement CORS for loading the url from a different domain that allows CORS.</div>

<pre>[method:null setResponseType]( [page:String value] )</pre>
<div class="blockindent">[page:String value] — the empty string (default), "arraybuffer", "blob", "document", "json", or "text".</div>

<h4>Пример</h4>
[example:webgl_morphtargets_human]

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/loaders/FileLoader.js" target="_blank">FileLoader.js на github.com</a></div><br>


<h3 id="9">FontLoader</h3>
Class for loading a font in JSON format. Returns a [page:Font Font], which is an array of [page:Shape Shape]s representing the font.
This uses the [page:FileLoader] internally for loading files. <br>
You can convert fonts online using [link:https://gero3.github.io/facetype.js/ facetype.js]<br><br>

<h4>Пример</h4>

		<div>
		[example:webgl_geometry_text_shapes geometry / text / shapes ]<br/>
		[example:webgl_geometry_text geometry / text ]<br />
		[example:webgl_geometry_text_earcut geometry / text / earcut]<br />
		[example:webgl_geometry_text_pnltri geometry / text / pnltri]<br />
		</div>

<pre>var loader = new THREE.FontLoader();
var font = loader.load(
	// resource URL
	'fonts/helvetiker_bold.typeface.json'
	// Function when resource is loaded
	function ( font ) {
		// do something with the font
		scene.add( font );
	},
	// Function called when download progresses
	function ( xhr ) {
		console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );
	},
	// Function called when download errors
	function ( xhr ) {
		console.log( 'An error happened' );
	}
);</pre>

<h4>Конструктор</h4>
<pre>FontLoader( [page:LoadingManager manager] )</pre>
<div class=list>[page:LoadingManager manager] — The [page:LoadingManager loadingManager] for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager].</div>
		Creates a new FontLoader.<br><br>
		
<h4>Свойства</h4>
<div class=blockindent><br>
<pre id="9manager">[property:LoadingManager manager]</pre>
The [page:LoadingManager loadingManager] the loader is using. Default is [page:DefaultLoadingManager].</div><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="9load">[method:null load]( [page:String url], [page:Function onLoad], [page:Function onProgress], [page:Function onError] )</pre>
		<div>
		[page:String url] — the path or URL to the file. This can also be a
			[link:https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs Data URI].<br />
		[page:Function onLoad] — Will be called when load completes. The argument will be the loaded [page:Texture texture].<br />
		[page:Function onProgress] — Will be called while load progresses. The argument will be the XMLHttpRequest instance, which contains .[page:Integer total] and .[page:Integer loaded] bytes.<br />
		[page:Function onError] — Will be called when load errors.<br /><br />
</div>
Begin loading from url and pass the loaded [page:Texture texture] to onLoad.<br><br>

<pre id="9parse">[method:Font parse]( [page:Object json] )</pre>
<div class=list>[page:Object json] — The <em>JSON</em> structure to parse.</div>
Parse a <em>JSON</em> structure and return a [page:Font].
</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/loaders/FontLoader.js" target="_blank">FontLoader.js на github.com</a></div><br><br>


<h3 id="10">ImageBitmapLoader</h3>
A loader for loading an Image as an ImageBitmap. An ImageBitmap provides an asynchronous and resource efficient pathway to prepare textures for rendering in WebGL.<br><br>

<h4>Пример</h4>
<pre>// instantiate a loader
var loader = new THREE.ImageBitmapLoader();

// load a image resource
loader.load(
	// resource URL
	'textures/skyboxsun25degtest.png',

	// onLoad callback
	function ( imageBitmap ) {
		var texture = new THREE.CanvasTexture( imageBitmap );
		var material = new THREE.MeshBasicMaterial( { map: texture } );
	},

	// onProgress callback currently not supported
	undefined,

	// onError callback
	function ( err ) {
		console.log( 'An error happened' );
	}
);</pre>
<h5>Другие примеры</h5>
<pre><a href="https://threejs.org/examples/#webgl_loader_imagebitmap" target="_blank">WebGL / loader / imagebitmap</a></pre><br>

<h4>Конструктор</h4>
<pre>ImageBitmapLoader( manager : LoadingManager )</pre>

<div class=list>manager — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.</div>

Creates a new ImageBitmapLoader.<br><br>

<h4>Свойства</h4>
<div class=blockindent><br>
<pre id="10manager">.manager : LoadingManager</pre>

The loadingManager the loader is using. Default is DefaultLoadingManager.<br><br>

<pre id="10options">.options : String</pre>

An optional object that sets options for the internally used createImageBitmap factory method. Default is undefined.<br><br>

<pre id="10path">.path : String</pre>

The base path from which files will be loaded. See .setPath. Default is undefined.</div><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="10load">.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : null</pre>

<div class=list>url — the path or URL to the file. This can also be a Data URI.
onLoad — Will be called when load completes. The argument will be the loaded image.</div>
<div class=list>onProgress — Will be called while load progresses. The argument will be the progress event.</div>
<div class=list>onError — Will be called when load errors.</div>

Begin loading from url and return the image object that will contain the data.<br><br>

<pre id="10setCrossOrigin">.setCrossOrigin () : ImageBitmapLoader</pre>

This method exists for compatibility reasons and implements no logic. It ensures that ImageBitmapLoader has a similar interface like ImageLoader.<br><br>

<pre id="10setOptions">.setOptions ( options : Object ) : ImageBitmapLoader</pre>

Sets the options object for createImageBitmap.<br><br>

<pre id="10setPath">.setPath ( path : String ) : ImageBitmapLoader</pre>

Sets the base path or URL from which to load files. This can be useful if you are loading many images from the same directory.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/loaders/ImageBitmapLoader.js" target="_blank">ImageBitmapLoader.js на github.com</a></div><br><br>


<h3 id="11">ImageLoader</h3>
Загрузчик для загрузки [page:Image].
A loader for loading an Image. This uses the FileLoader internally for loading files, and is used internally by the CubeTextureLoader, ObjectLoader and TextureLoader.<br><br>

<h4>Пример</h4>
<pre>// instantiate a loader
var loader = new THREE.ImageLoader();

// load a image resource
loader.load(
	// resource URL
	'textures/skyboxsun25degtest.png',

	// onLoad callback
	function ( image ) {
		// use the image, e.g. draw part of it on a canvas
		var canvas = document.createElement( 'canvas' );
		var context = canvas.getContext( '2d' );
		context.drawImage( image, 100, 100 );
	},

	// onProgress callback currently not supported
	undefined,

	// onError callback
	function () {
		console.error( 'An error happened.' );
	}
);</pre>
<h5>Другие примеры</h5>
<pre><a href="https://threejs.org/examples/#webgl_loader_obj" target="_blank">WebGL / loader / obj</a>
<a href="https://threejs.org/examples/#webgl_shaders_ocean" target="_blank">WebGL / shaders / ocean</a></pre>

Please note three.js r84 dropped support for ImageLoader progress events. For an ImageLoader that supports progress events, see this thread.

<h4>Конструктор</h4>
<pre>ImageLoader( [page:LoadingManager manager] )</pre>
<div class=list>[page:LoadingManager manager] — The [page:LoadingManager loadingManager] for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager].</div>
Создает новый ImageLoader.<br><br>

<h4>Свойства</h4>
<div class=blockindent><br>
<pre id="11crossOrigin">[property:String crossOrigin]</pre>
The crossOrigin string to implement CORS for loading the url from a different domain that allows CORS.</div><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="11load">[method:null load]( [page:String url], [page:Function onLoad], [page:Function onProgress], [page:Function onError] )</pre>
<div class=list>[page:String url] — required</div>
<div class=list>[page:Function onLoad] — Will be called when load completes. The argument will be the loaded [page:Image image].</div>
<div class=list>[page:Function onProgress] — Will be called while load progresses. The argument will be the progress event.</div>
<div class=list>[page:Function onError] — Will be called when load errors.</div>
Begin loading from url and return the [page:Image image] object that will contain the data.

<pre id="11setCrossOrigin">[method:null setCrossOrigin]( [page:String value] )</pre>
<div class=list>[page:String value] — The crossOrigin string.</div>
The crossOrigin string to implement CORS for loading the url from a different domain that allows CORS.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/loaders/ImageLoader.js" target="_blank">ImageLoader.js на github.com</a></div><br>


<h3 id="12">JSONLoader</h3>
Загрузчик для загрузки объектов в JSON формате.

<h4>Конструктор</h4>
<pre>JSONLoader( [page:LoadingManager manager] )</pre>
<div class="blockindent">[page:LoadingManager manager] — The [page:LoadingManager loadingManager] for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager].</div>
Созадет новый JSONLoader.

<h4>Методы</h4>
<pre id="12load">[method:null load]( [page:String url], [page:Function onLoad], [page:Function onProgress], [page:Function onError] )</pre>
<div class="blockindent">[page:String url] — required.<br>
		[page:Function onLoad] — Will be called when load completes. The argument will be the loaded text response.<br>
		[page:Function onProgress] — Will be called while load progresses. The argument will be the XmlHttpRequest instance, that contain .[page:Integer total] and .[page:Integer loaded] bytes.<br>
		[page:Function onError] — Will be called when load errors.</div>
Begin loading from url and pass the <em>JSON</em> to onLoad.

<pre>[method:null setTexturePath]( [page:String texturePath] )</pre>
<div class="blockindent">[page:String texturePath] — Base path for textures.</div>
Set the base path for textures.

<pre>[method:Object3D parse]( [page:Object json], [page:String texturePath] )</pre>
<div class="blockindent">[page:String json] — JSON object to parse.<br>
		[page:String texturePath] — Base path for textures.</div>
Parse a <em>JSON</em> structure and return an [page:object] containing the parsed [page:Geometry geometry] and [page:Array materials].

<h4>Пример</h4>
<pre>// instantiate a loader
var loader = new THREE.JSONLoader();<br>
// load a resource
loader.load(
	// resource URL
	'models/animated/monster/monster.js',
	// Function when resource is loaded
	function ( geometry, materials ) {
		var material = new THREE.MultiMaterial( materials );
		var object = new THREE.Mesh( geometry, material );
		scene.add( object );
	}
);</pre>

[example:webgl_loader_json_blender]

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/loaders/JSONLoader.js" target="_blank">JSONLoader.js на github.com</a></div><br>


<h3 id="13">Loader</h3>
Base class for implementing loaders.

<h4>Конструктор</h4>
<pre>Loader()</pre>
Creates a new Loader. This should be called as base class.

<h4>Свойства</h4>
<pre id="13onLoadStart">[property:Function onLoadStart]</pre>
		<div>Will be called when load starts.</div>
		<div>The default is a function with empty body.</div>

		<pre>[property:Function onLoadProgress]</pre>
		<div>Will be called while load progresses.</div>
		<div>The default is a function with empty body.</div>

		<pre>[property:Function onLoadComplete]</pre>
		<div>Will be called when load completes.</div>
		<div>The default is a function with empty body.</div>

		<pre>[property:string crossOrigin]</pre>
		<div>
		The crossOrigin string to implement CORS for loading the url from a different domain that allows CORS.
		</div>

  <h4>Методы</h4>

		<pre>[method:Material createMaterial]( [page:object m], [page:string texturePath] )</pre>
		<div>
		[page:Object m] — The parameters to create the material. <br>
		[page:String texturePath] — The base path of the textures.
		</div>
		<div>
		Creates the Material based on the parameters m.
		</div>

		<pre>[method:Array initMaterials]( [page:Array materials], [page:string texturePath] )</pre>
		<div>
		[page:Array materials] — an array of parameters to create materials. <br>
		[page:String texturePath] —  The base path of the textures.
		</div>
		<div>
		Creates an array of [page:Material] based on the array of parameters m. The index of the parameters decide the correct index of the materials.
		</div>

<pre>[method:String extractUrlBase]( [page:string url] )</pre>
<div>[page:String url] —  The url to extract the base url from.</div>
Extract the base from the URL.

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/loaders/Loader.js" target="_blank">Loader.js на github.com</a></div><br><br>


<h3 id="14">LoaderUtils</h3>
An object with several loader utility functions.<br><br>

<h4>Функции</h4>
<div class=blockindent><br>
<pre id="14decodeText">.decodeText ( array : TypedArray ) : String</pre>
<div class=list>array — A stream of bytes as a typed array.</div>
The function takes a stream of bytes as input and returns a string representation.<br><br>

<pre id="14extractUrlBase">.extractUrlBase ( url : string ) : String</pre>
<div class=list>url — The url to extract the base url from.</div>
Extract the base from the URL.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/loaders/LoaderUtils.js" target="_blank">LoaderUtils.js на github.com</a></div><br><br>


<h3 id="15">MaterialLoader</h3>
A loader for loading a [page:Material] in JSON format.

<h4>Конструктор</h4>
<pre>MaterialLoader( [page:LoadingManager manager] )</pre>
<div>[page:LoadingManager manager] — The [page:LoadingManager loadingManager] for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager].</div>
Создает новый MaterialLoader.

<h4>Методы</h4>
<pre id="15load">[method:null load]( [page:String url], [page:Function onLoad], [page:Function onProgress], [page:Function onError] )</pre>
<div>[page:String url] — required<br>
		[page:Function onLoad] — Will be called when load completes. The argument will be the loaded [page:Material].<br>
		[page:Function onProgress] — Will be called while load progresses. The argument will be the progress event.<br>
		[page:Function onError] — Will be called when load errors.</div>
Begin loading from url and return the [page:Material] object that will contain the data.

<pre>[method:Material parse]( [page:Object json] )</pre>
<div>[page:Object json] — The json object containing the parameters of the Material.</div>
Parse a <em>JSON</em> structure and create a new [page:Material] of the type [page:String json.type] with parameters defined in the json object.


<h4>Пример</h4>
<pre>// instantiate a loader
var loader = new THREE.MaterialLoader();<br>
// load a resource
loader.load(
	// resource URL
	'path/to/material.json',
	// Function when resource is loaded
	function ( material ) {
		object.material = material;
	},
	// Function called when download progresses
	function ( xhr ) {
		console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );
	},
	// Function called when download errors
	function ( xhr ) {
		console.log( 'An error happened' );
	}
);</pre>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/loaders/MaterialLoader.js" target="_blank">MaterialLoader.js на github.com</a></div><br><br>


<h3 id="16">ObjectLoader</h3>
A loader for loading a JSON resource. Unlike the [page:JSONLoader], this one make use of the <em>.type</em> attributes of objects to map them to their original classes.

<h4>Конструктор</h4>
<pre>ObjectLoader( [page:LoadingManager manager] )</pre>
		<div>
		[page:LoadingManager manager] — The [page:LoadingManager loadingManager] for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager].
		</div>
Создает новый ObjectLoader.

<h4>Свойства</h4>

<h4>Методы</h4>
<pre id="16load">[method:null load]( [page:String url], [page:Function onLoad], [page:Function onProgress], [page:Function onError] )</pre>
		<div>
		[page:String url] — required<br>
		[page:Function onLoad] — Will be called when load completes. The argument will be the loaded [page:Object3D object].<br>
		[page:Function onProgress] — Will be called while load progresses. The argument will be the XmlHttpRequest instance, that contain .[page:Integer total] and .[page:Integer loaded] bytes.<br>
		[page:Function onError] — Will be called when load errors.<br>
		</div>
		<div>
		Begin loading from url and call onLoad with the parsed response content.
		</div>


		<pre>[method:Object3D parse]( [page:Object json] )</pre>
		<div>
		[page:Object json] — required. The JSON source to parse<br>
		</div>
		<div>
		Parse a <em>JSON</em> content and return a threejs object.
		</div>

		<pre>[method:null setCrossOrigin]( [page:String value] )</pre>
		<div>
		[page:String value] — The crossOrigin string to implement CORS for loading the url from a different domain that allows CORS.
		</div>


<h4>Пример</h4>
<pre>// instantiate a loader (создаем экземпляр загрузчика)
var loader = new THREE.ObjectLoader();<br>
// assuming we loaded a JSON structure from elsewhere
// предполагаем, что структура JSON загружена из другого места
var object = loader.parse( a_json_object );<br>
scene.add( object );</pre>

		[example:webgl_loader_msgpack]

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/loaders/ObjectLoader.js" target="_blank">ObjectLoader.js на github.com</a></div><br><br>


<h3 id="17">TextureLoader</h3>
Класс для загрузки <a href="textures.htm#6" onmouseover="show('Texture')" onmouseout="hide()">текстуры</a>. Он внутренне использует для загрузки файлов <a href="#11" onmouseover="show('ImageLoader')" onmouseout="hide()">ImageLoader</a>.<br><br>

<h4>Пример</h4>
<pre>var texture = new THREE.TextureLoader().load( 'textures/land_ocean_ice_cloud_2048.jpg' );<br>
// immediately use the texture for material creation
// сразу же используем текстуру для создания материала
var material = new THREE.MeshBasicMaterial( { map: texture } );</pre>

<h4>Пример с функцией обратного вызова</h4>
<pre>// instantiate a loader
var loader = new THREE.TextureLoader();<br>
// load a resource
loader.load(
  // resource URL
  'textures/land_ocean_ice_cloud_2048.jpg',<br>
  // onLoad callback
  function ( texture ) {
    // in this example we create the material when the texture is loaded
    var material = new THREE.MeshBasicMaterial( {
      map: texture
    } );
  },<br>
  // onProgress callback currently not supported
  undefined,<br>
  // onError callback
  function ( err ) {
    console.error( 'An error happened.' );
  }
);</pre>
Обратите внимание, что версия three.js r84 для TextureLoader прекратила поддержку событий на ход процесса (on progress). Для TextureLoader с поддержкой событий ход процесса, смотрите <a href="https://github.com/mrdoob/three.js/issues/10439#issuecomment-293260145" target="_blank">эту тему</a>.
<h5>Другие примеры</h5>
<pre><a href="https://threejs.org/examples/#webgl_geometry_cube" target="_blank">WebGL / geometry / cube</a></pre><br>

<h4>Конструктор</h4>
<pre>TextureLoader( [page:LoadingManager manager] )</pre>
<div class=list>[page:LoadingManager manager] — The [page:LoadingManager loadingManager] for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager].</div>
Создает новый <tt>TextureLoader</tt>.<br><br>

<h4>Свойства</h4>
<div class=blockindent><br>
<pre id="17crossOrigin">[property:String crossOrigin]</pre>
<div>default — *null*.</div>
If set, assigns the *crossOrigin* attribute of the image to the value of *crossOrigin*, prior to starting the load.
</div><br>

<h4>Методы</h4>
<pre id="17load"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('load - грузить, загружать')" onmouseout="hide()">.load</a></span>( <span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('url - сокращ. англ. слов Uniform Resource Locator<br>(читается как /ˌjuː ɑːr ˈel/) —<br>единообразный локатор (определитель местонахождения)<br>ресурса или единый указатель ресурса.')" onmouseout="hide()">url</a></span>, <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on load - на загрузку')" onmouseout="hide()">onLoad</a></span>, <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on progress - на ход процесса')" onmouseout="hide()">onProgress</a></span>, <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on error - на ошибку')" onmouseout="hide()">onError</a></span> )</pre>
<div class=list><tt><span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('url - сокращ. англ. слов Uniform Resource Locator<br>(читается как /ˌjuː ɑːr ˈel/) —<br>единообразный локатор (определитель местонахождения)<br>ресурса или единый указатель ресурса.')" onmouseout="hide()">url</a></span></tt>
— путь или URL к файлу (обязательный аргумент). Также это может быть <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs" target="_blank">Data URI</a>.</div>
<div class=list><tt><span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on load - на загрузку')" onmouseout="hide()">onLoad</a></span></tt>
— Функция, которая будет вызвана по завершении загрузки. Аргументом будет загруженная <a href="textures.htm#6" onmouseover="show('Texture')" onmouseout="hide()">текстура</a>.</div>
<div class=list><tt><span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on progress - на ход процесса')" onmouseout="hide()">onProgress</a></span></tt>
— функция, которая будет вызываться пока идет процесс загрузки.
Аргументом будет экземпляр XMLHttpRequest, что содержит сведения о загрузке <tt><span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('total - полный (размер ресурса)')" onmouseout="hide()">total</a></span></tt>
и <tt><span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('loaded - загружено, в данном случае<br>размер загруженного ресурса')" onmouseout="hide()">loaded</a></span></tt> в байтах.</div>
<div class=list><tt><span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on error - на ошибку')" onmouseout="hide()">onError</a></span></tt> — Функция, которая будет вызвана в случае ошибки при загрузке.</div>

Begin loading from url and pass the loaded [page:Texture texture] to onLoad.

<h4>Пример</h4>
<pre>// instantiate a loader (создаем экземпляр загрузчика)
var loader = new THREE.TextureLoader();<br>
// load a resource (загружаем ресурс)
loader.load(
	// resource URL (URL-адрес ресурса)
	'textures/land_ocean_ice_cloud_2048.jpg',
	// Function when resource is loaded
    // функция, вызываемая после загрузки ресурса
	function ( texture ) {
		// do something with the texture
		var material = new THREE.MeshBasicMaterial( {
			map: texture
		 } );
	},
	// Function called when download progresses
	// функция, вызываемая в процессе загрузки
	function ( xhr ) {
		console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );
	},
	// Function called when download errors
	// функция, вызываемая в случае ошибок загрузки
	function ( xhr ) {
		console.log( 'An error happened' );
	}
);</pre>

		[example:canvas_geometry_earth]
<br><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/loaders/TextureLoader.js" target="_blank">TextureLoader.js на github.com</a></div><br><br>


<h2 id="18">Менеджеры загрузки</h2>
<h3 id="18.1">DefaultLoadingManager</h3>
Общий экземпляр <a href="#18.2" onmouseover="show('LoadingManager')" onmouseout="hide()">LoadingManager</a>, используемый большинством загрузчиков, когда не указывается отдельный, специализированный менеджер загрузки.<br>
В большинстве случаем его должно быть достаточно, однако иногда могут потребоваться отдельные менеджеры загрузки для текстур и моделей.<br><br>

<h4>Пример</h4>
Для менеджера загрузки можно дополнительно устанавливать функции <a href="#18.2onStart" onmouseover="show('LoadingManager.onStart')" onmouseout="hide()">onStart</a>,
<a href="#18.2onLoad" onmouseover="show('LoadingManager.onLoad')" onmouseout="hide()">onLoad</a>, <a href="#18.2onProgress" onmouseover="show('LoadingManager.onProgress')" onmouseout="hide()">onProgress</a>,
<a href="#18.2onError" onmouseover="show('LoadingManager.onError')" onmouseout="hide()">onError</a>. Затем они будут применяться для любых загрузчиков, используемых DefaultLoadingManager.<br>
Обратите внимание, что не следует путать эти функции с функциями с такими же названиями отдельных, специализированных загрузчиков,
поскольку они предназначены для отображения информации об общем состоянии загрузки, а не для обработки загружаемых данных.
<pre>THREE.DefaultLoadingManager.onStart = function ( url, itemsLoaded, itemsTotal ) {
  console.log( 'Started loading file: '+url+'.\nLoaded '+itemsLoaded+' of '+itemsTotal+' files.' );
};<br>
THREE.DefaultLoadingManager.onLoad = function ( ) {
  console.log( 'Loading Complete!');
};<br>
THREE.DefaultLoadingManager.onProgress = function ( url, itemsLoaded, itemsTotal ) {
  console.log( 'Loading file: '+url+'.\nLoaded '+itemsLoaded+' of '+itemsTotal+' files.' );
};<br>
THREE.DefaultLoadingManager.onError = function ( url ) {
  console.log( 'There was an error loading '+url );
};</pre>
<h5>Другие примеры</h5>
<pre><a href="https://threejs.org/examples/#webgl_loader_scene" target="_blank">WebGL / loader / scene</a></pre><br>

<h4>Свойства</h4>
Подробнее о свойствах смотрите в описании <a href="#18.2" onmouseover="show('LoadingManager')" onmouseout="hide()">LoadingManager</a>.<br><br>

<h4>Методы</h4>
Подробнее о методах смотрите в описании <a href="#18.2" onmouseover="show('LoadingManager')" onmouseout="hide()">LoadingManager</a>.<br><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/loaders/LoadingManager.js" target="_blank">LoadingManager.js на github.com</a></div><br><br>


<h3 id="18.2">LoadingManager</h3>
Обрабатывает и отслеживает загружаемые и ожидающие загрузки данные.
Если он не предоставлен вручную, то глобальный экземпляр данного класса создается и используется загрузчиками по умолчанию - смотрите <a href="#18.1" onmouseover="show('DefaultLoadingManager')" onmouseout="hide()">DefaultLoadingManager</a>.<br>
В принципе его должно быть достаточно, однако бывают случаи, когда полезно иметь раздельные загрузчики,- например если требуется показать отдельные индикаторы загрузки для объектов и текстур.<br><br>

<h4>Пример</h4>
Этот пример показывает способ использования LoadingManager'а для отслеживания процесса работы загрузчика <a href="examples.htm#3.4" onmouseover="show('OBJLoader')" onmouseout="hide()">OBJLoader</a>.
<pre>var manager = new THREE.LoadingManager();
manager.onStart = function ( url, itemsLoaded, itemsTotal ) {
  console.log( 'Started loading file: '+url+'.\nLoaded '+itemsLoaded+' of '+itemsTotal+' files.' );
};<br>
manager.onLoad = function ( ) {
  console.log( 'Loading complete!');
};<br>
manager.onProgress = function ( url, itemsLoaded, itemsTotal ) {
  console.log( 'Loading file: '+url+'.\nLoaded '+itemsLoaded+' of '+itemsTotal+' files.' );
};<br>
manager.onError = function ( url ) {
  console.log( 'There was an error loading '+url );
};<br>
var loader = new THREE.OBJLoader( manager );
loader.load( 'file.obj', function ( object ) {
  //
} );</pre>
В дополнение к наблюдению за ходом процесса, LoadingManager можно использовать для переопределения во время загрузки URL-адресов ресурсов. Это может быть полезно для элементов, поступающих из событий перетаскивания, WebSockets, WebRTC или других API.<br>
Вот пример, показывающий как загрузить модель в память используя URL-адрес Blob.
<pre>// Blob or File objects created when dragging files into the webpage.
// объекты Blob или File созданные при перетаскивании файлов на веб-страницу.
var blobs = {'fish.gltf': blob1, 'diffuse.png': blob2, 'normal.png': blob3};<br>
var manager = new THREE.LoadingManager();<br>
// Initialize loading manager with URL callback.
// инициализация менеджера загрузки с URL-адресом функции обратного вызова.
var objectURLs = [];
manager.setURLModifier( ( url ) => {
  url = URL.createObjectURL( blobs[ url ] );
  objectURLs.push( url );
  return url;
} );<br>
// Load as usual, then revoke the blob URLs.
// загружаем как обычно, затем отменяем URL-адреса blob.
var loader = new THREE.GLTFLoader( manager );
loader.load( 'fish.gltf', (gltf) => {
  scene.add( gltf.scene );
  objectURLs.forEach( ( url ) => URL.revokeObjectURL( url ) );
});</pre>
<h5>Другие примеры</h5>
<pre><a href="https://threejs.org/examples/#webgl_loader_babylon" target="_blank">WebGL / loader / babylon</a>
<a href="https://threejs.org/examples/#webgl_loader_fbx" target="_blank">WebGL / loader / fbx</a>
<a href="https://threejs.org/examples/#webgl_loader_obj" target="_blank">WebGL / loader / obj</a>
<a href="https://threejs.org/examples/#webgl_materials_reflectivity" target="_blank">WebGL / materials / reflectivity</a>
<a href="https://threejs.org/examples/#webgl_postprocessing_outline" target="_blank">WebGL / postprocesing / outline</a>
<a href="https://threejs.org/examples/#webgl_terrain_dynamic" target="_blank">WebGL / terrain / dynamic</a></pre><br>

<h4>Конструктор</h4>
<pre>LoadingManager( <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on load - на загрузку')" onmouseout="hide()">onLoad</a></span>, <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on progress - на ход процесса')" onmouseout="hide()">onProgress</a></span>, <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on error - на ошибку')" onmouseout="hide()">onError</a></span> )</pre>
<div class=list><tt>onLoad</tt> — эта функция будет вызываться по окончании работы всех загрузчиков. Дополнительный, необязательный аргумент.</div>
<div class=list><tt>onProgress</tt> — эта функция будет вызываться по завершении работы каждого отдельного элемента загрузки. Дополнительный, необязательный аргумент.</div>
<div class=list><tt>onError</tt> — эта функция будет вызываться при ошибках загрузчика. Дополнительный, необязательный аргумент.</div>
Создает новый LoadingManager.<br><br>

<h4>Свойства</h4>
<div class=blockindent><br>
<pre id="18.2onStart"><span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on start - на начало')" onmouseout="hide()">.onStart</a></span></pre>
Данная функция будет вызвана при запуске загрузки.<br>
Аргументами являются:
<div class=list><tt><span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('url - сокращ. англ. слов Uniform Resource Locator<br>(читается как /ˌjuː ɑːr ˈel/) —<br>единообразный локатор (определитель местонахождения)<br>ресурса или единый указатель ресурса.')" onmouseout="hide()">url</a></span></tt> — url-адрес загружаемого элемента.</div>
<div class=list><tt><span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('items loaded - загруженные элементы')" onmouseout="hide()">itemsLoaded</a></span></tt> — число элементов, уже загруженных в настоящее время.</div>
<div class=list><tt><span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('items total - всего элементов')" onmouseout="hide()">itemsTotal</a></span></tt> — полное число загружаемых элементов.</div>
По умолчанию она не определена, т.е. <tt>undefined</tt>.<br><br>

<pre id="18.2onLoad"><span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on load - на загрузку')" onmouseout="hide()">.onLoad</a></span></pre>
Данная функция будет вызвана по завершении всех загрузок. По умолчанию она не определена (т.е. <tt>undefined</tt>), если не передается в конструкторе.<br><br>

<pre id="18.2onProgress"><span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on progress - на ход процесса')" onmouseout="hide()">.onProgress</a></span></pre>
Данная функция будет вызвана по завершении загрузки элемента.<br>
Аргументами являются:
<div class=list><tt><span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('url - сокращ. англ. слов Uniform Resource Locator<br>(читается как /ˌjuː ɑːr ˈel/) —<br>единообразный локатор (определитель местонахождения)<br>ресурса или единый указатель ресурса.')" onmouseout="hide()">url</a></span></tt> — url-адрес загруженного элемента.</div>
<div class=list><tt><span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('items loaded - загруженные элементы')" onmouseout="hide()">itemsLoaded</a></span></tt> — число элементов, уже загруженных в настоящее время.</div>
<div class=list><tt><span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('items total - всего элементов')" onmouseout="hide()">itemsTotal</a></span></tt> — полное число загружаемых элементов.</div>
По умолчанию она не определена (т.е. <tt>undefined</tt>), если не передается в конструкторе.<br><br>

<pre id="18.2onError"><span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('on error - на ошибку')" onmouseout="hide()">.onError</a></span></pre>
Данная функция будет вызвана при ошибках с любым элементом. Аргументом функции является:
<div class=list><tt><span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('url - сокращ. англ. слов Uniform Resource Locator<br>(читается как /ˌjuː ɑːr ˈel/) —<br>единообразный локатор (определитель местонахождения)<br>ресурса или единый указатель ресурса.')" onmouseout="hide()">url</a></span></tt> — url-адрес элемента с ошибкой.</div>
По умолчанию она не определена (т.е. <tt>undefined</tt>), если не передается в конструкторе.</div><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="18.2setURLModifier"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('set URL modifier - установить URL-модификатор')" onmouseout="hide()">.setURLModifier</a></span>( <span onclick="showClick(type_func)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('callback - обратный (повторный) вызов')" onmouseout="hide()">callback</a></span> )</pre>
<div class=list><tt>callback</tt> — URL modifier callback. Called with url argument, and must return resolvedURL.</div>

If provided, the callback will be passed each resource URL before a request is sent. The callback may return the original URL, or a new URL to override loading behavior. This behavior can be used to load assets from .ZIP files, drag-and-drop APIs, and Data URIs.<br><br>

<pre id="18.2resolveURL"><span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('resolve URL - разрешить url-адрес')" onmouseout="hide()">.resolveURL</a></span>( <span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('url - сокращ. англ. слов Uniform Resource Locator<br>(читается как /ˌjuː ɑːr ˈel/) —<br>единообразный локатор (определитель местонахождения)<br>ресурса или единый указатель ресурса.')" onmouseout="hide()">url</a></span> )</pre>
<div class=list><tt>url</tt> — url-адрес загрузки.</div>

Given a URL, uses the URL modifier callback (if any) and returns a resolved URL. If no URL modifier is set, returns the original URL.<br><br>


<div class=note><b>Примечание:</b> следующие методы предназначены для внутреннего вызова загрузчиками, напрямую вызывать их нельзя.</div><br>

<pre id="18.2itemStart"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('item start - ')" onmouseout="hide()">.itemStart</a></span>( <span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('url - сокращ. англ. слов Uniform Resource Locator<br>(читается как /ˌjuː ɑːr ˈel/) —<br>единообразный локатор (определитель местонахождения)<br>ресурса или единый указатель ресурса.')" onmouseout="hide()">url</a></span> )</pre>
<div class=list><tt>url</tt> — url-адрес загрузки.</div>
This should be called by any loader used by the manager when the loader starts loading an url.<br><br>

<pre id="18.2itemEnd"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('item end - ')" onmouseout="hide()">.itemEnd</a></span>( <span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('url - сокращ. англ. слов Uniform Resource Locator<br>(читается как /ˌjuː ɑːr ˈel/) —<br>единообразный локатор (определитель местонахождения)<br>ресурса или единый указатель ресурса.')" onmouseout="hide()">url</a></span> )</pre>
<div class=list><tt>url</tt> — url-адрес загрузки.</div>
This should be called by any loader used by the manager when the loader ended loading an url.<br><br>

<pre id="18.2itemError"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('item error - ')" onmouseout="hide()">.itemError</a></span>( <span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('url - сокращ. англ. слов Uniform Resource Locator<br>(читается как /ˌjuː ɑːr ˈel/) —<br>единообразный локатор (определитель местонахождения)<br>ресурса или единый указатель ресурса.')" onmouseout="hide()">url</a></span> )</pre>
<div class=list><tt>url</tt> — url-адрес загрузки.</div>
This should be called by any loader used by the manager when the loader errors loading an url.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/loaders/LoadingManager.js" target="_blank">LoadingManager.js на github.com</a></div><br><br>

<br><br>
</body></html>
