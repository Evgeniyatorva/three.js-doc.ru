<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
<title>Three.js</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<link rel="stylesheet" type="text/css" href="1.css">
<script type="text/javascript" src="1.js"></script>
</head>
<body>
<h2 class=head1>Объекты</h2>
<div class=below>В этом разделе дается описание различных объектов
<div class=list><a href="#1">Bone</a> - кость, т.е. объект, который может быть соединен с другими объектами в одно целое - скелет</div>
<div class=list><a href="#2">Group</a> - группа объектов</div>
<div class=list><a href="#3">Line</a> - линия</div>
<div class=list><a href="#4">LineLoop</a> - замкнутая линия, т.е. линия, у которой конец и начало соединены</div>
<div class=list><a href="#5">LineSegments</a> - отрезки линий</div>
<div class=list><a href="#6">LOD</a> - Level of Detail - уровень детализации объектов в зависимости от расстояния между объектом и камерой</div>
<div class=list><a href="#7">Mesh</a> - <a href="https://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D0%BB%D0%B8%D0%B3%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%B0%D1%8F_%D1%81%D0%B5%D1%82%D0%BA%D0%B0" target="_blank">полигональная сетка</a></div>
<div class=list><a href="#8">Points</a> - точки</div>
<div class=list><a href="#9">Skeleton</a> - скелет, т.е. объект, состоящий из нескольких, состыкованных между собой объектов</div>
<div class=list><a href="#10">SkinnedMesh</a> - полигональная сетка, покрывающая скелет (Skeleton) из костей (Bone)</div>
<div class=list><a href="#11">Sprite</a> - спрайт, т.е. плоскость, всегда обращенная к камере, частично прозрачная и не отбрасывающая тень</div></div><br>

<span class="right_side"><a href="core.htm#8" title="Переход к родительскому классу"><tt>Object3D &rarr;</tt></a></span>
<h3 id="1">Bone</h3>
Кость (bone) является частью скелета (<a href="#9" onmouseover="show('Skeleton')" onmouseout="hide()">Skeleton</a>).
Скелет, в свою очередь, используется "сеткой, покрытой кожей" (<a href="#10" onmouseover="show('SkinnedMesh')" onmouseout="hide()">SkinnedMesh</a>).
Кости практически одинаковы с пустым <a href="core.htm#8" onmouseover="show('Object3D')" onmouseout="hide()">Object3D</a>.

<h4>Пример</h4>
<pre>var root = new THREE.Bone();
var child = new THREE.Bone();<br>
root.add( child );
child.position.y = 5;</pre><br>

<h4>Конструктор</h4>
<pre>Bone( )</pre>
Создает новую кость (Bone).<br><br>

<h4>Свойства</h4>
Общие свойства смотрите в описании базового класса <a href="core.htm#8" onmouseover="show('Object3D')" onmouseout="hide()">Object3D</a>.
<div class=blockindent><br>
<pre id="1isBone"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('is bone - является костью')" onmouseout="hide()">.isBone</a></span></pre>
Используется для проверки, принадлежит ли данный объект или производные от него, к классу Bone. По умолчанию значение равно <tt>true</tt>.<br>
Не нужно его изменять, так как внутри <em>three.js</em> оно используется для оптимизации.<br><br>

<pre id="1type"><span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('type - тип')" onmouseout="hide()">.type</a></span></pre>
Значение свойства установлено как &#34;Bone&#34;. Оно может использоваться для поиска всех объектов класса Bone на сцене.</div><br>

<h4>Методы</h4>
Общие методы смотрите в описании базового класса <a href="core.htm#8" onmouseover="show('Object3D')" onmouseout="hide()">Object3D</a>.<br><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/objects/Bone.js" target="_blank">Bone.js на github.com</a></div><br><br>


<span class="right_side"><a href="core.htm#8" title="Переход к родительскому классу"><tt>Object3D &rarr;</tt></a></span>
<h3 id="2">Group</h3>
Данный объект (группа) практически идентичен <a href="core.htm#8" onmouseover="show('Object3D')" onmouseout="hide()">Object3D</a>. Его назначение сделать работу с группой объектов синтаксически яснее.

<h4>Пример</h4>
<pre>var geometry = new THREE.BoxBufferGeometry( 1, 1, 1 );
var material = new THREE.MeshBasicMaterial( {color: 0x00ff00} );<br>
var cubeA = new THREE.Mesh( geometry, material );
cubeA.position.set( 100, 100, 0 );<br>
var cubeB = new THREE.Mesh( geometry, material );
cubeA.position.set( -100, -100, 0 );<br>
// create a group and add the two cubes
// These cubes can now be rotated / scaled etc as a group
// создаем группу и добавляем два куба
// Эти кубы теперь можно вращать/масштабировать и т.д. как группу
var group = new THREE.Group();
group.add( cubeA );
group.add( cubeB )<br>
scene.add( group );</pre>

<h4>Конструктор</h4>
<pre>Group( )</pre>
Создает новую группу объектов.<br><br>

<h4>Свойства</h4>
Общие свойства смотрите в описании базового класса <a href="core.htm#8" onmouseover="show('Object3D')" onmouseout="hide()">Object3D</a>.
<div class=blockindent><br>
<pre id="2type"><span onclick="showClick(type_string)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('type - тип')" onmouseout="hide()">.type</a></span></pre>
Строка 'Group'. Она не должна изменяться.</div><br>

<h4>Методы</h4>
Общие методы смотрите в описании базового класса <a href="core.htm#8" onmouseover="show('Object3D')" onmouseout="hide()">Object3D</a>.<br><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/objects/Group.js" target="_blank">Group.js на github.com</a></div><br><br>


<span class="right_side"><a href="core.htm#8" title="Переход к родительскому классу"><tt>Object3D &rarr;</tt></a></span>
<h3 id="3">Line</h3>
Непрерывная линия.<br>
Это почти то же самое, что и <a href="#5" onmouseover="show('LineSegments')" onmouseout="hide()">LineSegments</a>; единственное различие заключается в том,
что оно отображается с помощью <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements" target="_blank" onmouseover="show('рисует прямую линию к следующей вершине')" onmouseout="hide()">gl.LINE_STRIP</a>,
а не <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements" target="_blank" onmouseover="show('рисует линию между парой вершин')" onmouseout="hide()">gl.LINES</a>.<br><br>

<h4>Пример</h4>
<pre>var material = new THREE.LineBasicMaterial({
	color: 0x0000ff
});<br>
var geometry = new THREE.Geometry();
geometry.vertices.push(
	new THREE.Vector3( -10, 0, 0 ),
	new THREE.Vector3( 0, 10, 0 ),
	new THREE.Vector3( 10, 0, 0 )
);<br>
var line = new THREE.Line( geometry, material );
scene.add( line );</pre>

<h4>Конструктор</h4>
<pre>Line( <a href="core.htm#7" onmouseover="show('Geometry.<br>geometry - геометрия, в данном случае<br>означает геометрический элемент')" onmouseout="hide()">geometry</a>, <a href="materials.htm#3" onmouseover="show('Material.<br>material - материал')" onmouseout="hide()">material</a> )</pre>
<div class=list><tt><a href="core.htm#7" onmouseover="show('Geometry.<br>geometry - геометрия, в данном случае<br>означает геометрический элемент')" onmouseout="hide()">geometry</a></tt>
— вершины, представляющие отрезок (отрезки) линии. По умолчанию используется новая <a href="core.htm#2" onmouseover="show('BufferGeometry')" onmouseout="hide()">BufferGeometry</a>.</div>
<div class=list><tt><a href="materials.htm#3" onmouseover="show('Material.<br>material - материал')" onmouseout="hide()">material</a></tt>
— материал для линии. По умолчанию используется <a href="materials.htm#1" onmouseover="show('LineBasicMaterial')" onmouseout="hide()">LineBasicMaterial</a> со случайно выбранным цветом.</div>
Если материал не предоставлен, то для объекта будет создан и затем назначен линейный материал, выбранный в случайном порядке.<br><br>

<h4>Свойства</h4>
Общие свойства смотрите в описании базового класса <a href="core.htm#8" onmouseover="show('Object3D')" onmouseout="hide()">Object3D</a>.
<div class=blockindent><br>
<pre id="3isLine"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('is line - является линией')" onmouseout="hide()">.isLine</a></span></pre>
Используется для проверки, принадлежит ли данный объект или производные от него, к классу Line. По умолчанию значение равно <tt>true</tt>.<br>
Не нужно его изменять, так как внутри <em>three.js</em> оно используется для оптимизации.<br><br>

<pre id="3geometry"><a href="core.htm#7" onmouseover="show('Geometry.<br>geometry - геометрия, в данном случае<br>означает геометрический элемент')" onmouseout="hide()">.geometry</a></pre>
Вершины, представляющие отрезок (отрезки) линии.<br><br>

<pre id="3material"><a href="materials.htm#3" onmouseover="show('Material.<br>material - материал')" onmouseout="hide()">.material</a></pre>
Материал для линии.</div><br>

<h4>Методы</h4>
Общие методы смотрите в описании базового класса <a href="core.htm#8" onmouseover="show('Object3D')" onmouseout="hide()">Object3D</a>.
<div class=blockindent><br>
<pre id="3computeLineDistances"><a href="#3" onmouseover="show('Line.<br>compute line distances - вычислить размеры линии')" onmouseout="hide()">.computeLineDistances</a>( )</pre>
Метод вычисляет массив значений размеров, необходимых для <a href="materials.htm#2" onmouseover="show('LineDashedMaterial')" onmouseout="hide()">LineDashedMaterial</a>.
Для каждой вершины геометрического элемента метод рассчитывает совокупную длину от текущей точки до самого начала линии.<br><br>

<pre id="3raycast"><span onclick="showClick(type_array)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('ray cast - бросок луча')" onmouseout="hide()">.raycast</a></span>( [page:Raycaster raycaster], [page:Array intersects] )</pre>
Метод получает точки пересечения между брошенным <a href="math.htm#14" onmouseover="show('Ray')" onmouseout="hide()">лучом</a> и данной линией.
Данный метод будет вызываться методом <tt><a href="core.htm#15intersectObject" onmouseover="show('Raycaster.intersectObjec')" onmouseout="hide()">Raycaster.intersectObject</a></tt>.<br><br>

<pre id="3clone"><a href="#3" onmouseover="show('Line.<br>clone - клонировать')" onmouseout="hide()">.clone</a>( )</pre>
Метод возвращает клон данного объекта Line и его потомков.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/objects/Line.js" target="_blank">Line.js на github.com</a></div><br><br>

<span class="right_side"><a href="core.htm#14" title="Переход к родительскому классу"><tt>Object3D &rarr;</tt></a> &nbsp; <a href="#4" title="Переход к родительскому классу"><tt>Line &rarr;</tt></a></span>
<h3 id="4">LineLoop</h3>
<span class="lnk" onmouseover="show('line loop - линейная петля или замкнутая линия')" onmouseout="hide()">LineLoop</span> это непрерывная линия, начало которой соединено с её концом, т.е. замкнутая линия.<br>
Это почти то же самое, что и Line; единственное различие заключается в том, что оно отображается с помощью
<a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements" target="_blank" onmouseover="show('рисует прямую линию к следующей вершине<br>и соединяет последнюю вершину с первой')" onmouseout="hide()">gl.LINE_LOOP</a>
(вместо <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements" target="_blank" onmouseover="show('рисует прямую линию к следующей вершине')" onmouseout="hide()">gl.LINE_STRIP</a>),
которая рисует прямую линию к следующей вершине и присоединяет последнюю вершину обратно к первой.<br><br>

<h4>Конструктор</h4>
<pre>LineLoop( <a href="core.htm#7" onmouseover="show('Geometry.<br>geometry - геометрия, в данном случае<br>означает геометрический элемент')" onmouseout="hide()">geometry</a>, <a href="materials.htm#3" onmouseover="show('Material.<br>material - материал')" onmouseout="hide()">material</a> )</pre>
<div class=list><tt><a href="core.htm#7" onmouseover="show('Geometry.<br>geometry - геометрия, в данном случае<br>означает геометрический элемент')" onmouseout="hide()">geometry</a></tt>
— список вершин, представляющих точки замкнутой линии.</div>
<div class=list><tt><a href="materials.htm#3" onmouseover="show('Material.<br>material - материал')" onmouseout="hide()">material</a></tt>
— материал для линии. По умолчанию используется <a href="materials.htm#1" onmouseover="show('LineBasicMaterial')" onmouseout="hide()">LineBasicMaterial</a>.</div>
Если материал не предоставлен, то для объекта будет создан и затем назначен линейный материал, выбранный в случайном порядке.<br><br>

<h4>Свойства</h4>
Общие свойства смотрите в описании базового класса <a href="#3" onmouseover="show('Line')" onmouseout="hide()">Line</a>.
<div class=blockindent><br>
<pre id="4isLineLoop"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('is line loop - является замкнутой линией')" onmouseout="hide()">.isLineLoop</a></span></pre>
Используется для проверки, принадлежит ли данный объект или производные от него, к классу LineLoop. По умолчанию значение равно <tt>true</tt>.<br>
Не нужно его изменять, так как внутри <em>three.js</em> оно используется для оптимизации.</div><br>

<h4>Методы</h4>
Общие методы смотрите в описании базового класса <a href="#3" onmouseover="show('Line')" onmouseout="hide()">Line</a>.<br><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/objects/LineLoop.js" target="_blank">LineLoop.js на github.com</a></div><br><br>


<span class="right_side"><a href="#4" title="Переход к родительскому классу"><tt>Line &rarr;</tt></a></span>
<h3 id="5">LineSegments</h3>
Цепочка линий, нарисованных между парами вершин.<br>
Это почти то же самое, что и Line; единственное различие заключается в том, что оно отображается с помощью
<a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements" target="_blank" onmouseover="show('рисует линию между парой вершин')" onmouseout="hide()">gl.LINES</a>,
а не <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements" target="_blank" onmouseover="show('рисует прямую линию к следующей вершине')" onmouseout="hide()">gl.LINE_STRIP</a>.<br><br>

<h4>Конструктор</h4>
<pre>LineSegments( <a href="core.htm#7" onmouseover="show('Geometry.<br>geometry - геометрия, в данном случае<br>означает геометрический элемент')" onmouseout="hide()">geometry</a>, <a href="materials.htm#3" onmouseover="show('Material.<br>material - материал')" onmouseout="hide()">material</a> )</pre>
<div class=list><tt><a href="core.htm#7" onmouseover="show('Geometry.<br>geometry - геометрия, в данном случае<br>означает геометрический элемент')" onmouseout="hide()">geometry</a></tt>
— пара (или пары) вершин, представляющих каждый отрезок линии.</div>
<div class=list><tt><a href="materials.htm#3" onmouseover="show('Material.<br>material - материал')" onmouseout="hide()">material</a></tt>
— материал для линии. По умолчанию используется <a href="materials.htm#1" onmouseover="show('LineBasicMaterial')" onmouseout="hide()">LineBasicMaterial</a>.</div>
Если материал не предоставлен, то для объекта будет создан и затем назначен линейный материал, выбранный в случайном порядке.<br><br>

<h4>Свойства</h4>
Общие свойства смотрите в описании базового класса <a href="#3" onmouseover="show('Line')" onmouseout="hide()">Line</a>.
<div class=blockindent><br>
<pre id="5isLineLoop"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('is line loop - является замкнутой линией')" onmouseout="hide()">.isLineLoop</a></span></pre>
Используется для проверки, принадлежит ли данный объект или производные от него, к классу LineLoop. По умолчанию значение равно <tt>true</tt>.<br>
Не нужно его изменять, так как внутри <em>three.js</em> оно используется для оптимизации.</div><br>

<h4>Методы</h4>
Общие методы смотрите в описании базового класса <a href="#3" onmouseover="show('Line')" onmouseout="hide()">Line</a>.<br><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/objects/LineSegments.js" target="_blank">LineSegments.js на github.com</a></div><br><br>


<span class="right_side"><a href="core.htm#8" title="Переход к родительскому классу"><tt>Object3D &rarr;</tt></a></span>
<h3 id="6">LOD</h3>
LOD - это сокращение английских слов level of detail - уровень детализации - показывает полигональные сетки (mesh) с большим или меньшим количеством геометрических элементов в зависимости от расстояния между объектом и камерой.<br><br>

<h4>Пример</h4>
<pre>var lod = new THREE.LOD();<br>
// Create spheres with 3 levels of detail and create new LOD levels for them
// Создаем сферы с 3 уровнями детализации и создаем новые уровни LOD для них
for( var i = 0; i &lt; 3; i++ ) {
	var geometry = new THREE.IcosahedronBufferGeometry( 10, 3 - i )
	var mesh = new THREE.Mesh( geometry, material );
	lod.addLevel( mesh, i * 75 );
}<br>
scene.add( lod );</pre>
Обратите внимание, что LOD переключения между различными уровнями детализации,
в цикле визуализации нужно будет вызывать <tt><a href="#6update" onclick="return false" onmouseover="show('LOD.update')" onmouseout="hide()">update</a>( camera )</tt>.
Смотрите подробности в исходном коде этого примера: <a href="https://threejs.org/examples/#webgl_lod" target="_blank">WebGL / LOD</a>.<br><br>

<h4>Конструктор</h4>
<pre>LOD()</pre>
Создает новый LOD.<br><br>

<h4>Свойства</h4>
Общие свойства смотрите в описании базового класса <a href="core.htm#8" onmouseover="show('Object3D')" onmouseout="hide()">Object3D</a>.
<div class=blockindent><br>
<pre id="6levels"><span onclick="showClick(type_array)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('levels - уровни')" onmouseout="hide()">.levels</a></span></pre>
Массив объектов уровня.<br>
Каждый уровень является объектом с двумя свойствами:
<div class=list><tt><a href="core.htm#8" onmouseover="show('Object3D.<br>object - объект')" onmouseout="hide()">object</a></tt> - <a href="core.htm#8" onmouseover="show('Object3D')" onmouseout="hide()">Object3D</a> для отображения на данном уровне.</div>
<div class=list><tt><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('distance - расстояние')" onmouseout="hide()">distance</a></span></tt> - расстояние на котором будет показываться данный уровень детализации.</div></div><br>

<h4>Методы</h4>
Общие методы смотрите в описании базового класса <a href="core.htm#8" onmouseover="show('Object3D')" onmouseout="hide()">Object3D</a>.
<div class=blockindent><br>
<pre id="6addLevel">[method:null addLevel]( [page:Object3D mesh], [page:Float distance] )</pre>
		<div>
		mesh -- The Object3D to display <br>
		distance -- The distance at which to display this level of detail
		</div>
Adds a mesh that will display at a certain distance and greater. Typically the further away the distance, the lower the detail on the mesh.<br><br>

<pre id="6clone">[method:LOD clone]()</pre>
Returns a clone of this LOD object and its associated distance specific objects.<br><br>

<pre id="6getObjectForDistance">[method:Object3D getObjectForDistance]( [page:Float distance] )</pre>
Get a reference to the first [page:Object3D] (mesh) that is greater than supplied distance.<br><br>

<pre id="6raycast">.raycast ( raycaster : Raycaster, intersects : Array ) : Array</pre>
Get intersections between a casted Ray and this LOD. Raycaster.intersectObject will call this method.<br><br>

<pre id="6toJSON">.toJSON ( meta ) : null</pre>
Create a JSON structure with details of this LOD object.<br><br>

<pre id="6update"><span onclick="showClick(type_null)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('update - обновление')" onmouseout="hide()">.update</a></span>( <a href="cameras.htm#1" onmouseover="show('Camera.<br>camera - камера')" onmouseout="hide()">camera</a> )</pre>
Set the visibility of each level's object based on distance from the camera. This needs to be called in the render loop for levels of detail to be updated dynamically.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/objects/LOD.js" target="_blank">LOD.js на github.com</a></div><br><br>


<span class="right_side"><a href="core.htm#8" title="Переход к родительскому классу"><tt>Object3D &rarr;</tt></a></span>
<h3 id="7">Mesh</h3>
Base class for Mesh objects, such as [page:MorphAnimMesh] and [page:SkinnedMesh].<br><br>

<h4>Пример</h4>
<pre>var geometry = new THREE.BoxGeometry( 1, 1, 1 );
  var material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );
  var mesh = new THREE.Mesh( geometry, material );
  scene.add( mesh );</pre><br>

<h4>Конструктор</h4>
<pre>[name]( [page:Geometry geometry], [page:Material material] )</pre>

		<div>
		geometry — An instance of [page:Geometry].<br>
		material — An instance of [page:Material] (optional).
		</div>


  <h4>Свойства</h4>

		<pre>[property:Geometry geometry]</pre>

		<div>An instance of [page:Geometry], defining the object's structure.</div>

		<pre>[property:Material material]</pre>

		<div>An instance of [page:Material], defining the object's appearance. Default is a [page:MeshBasicMaterial] with wireframe mode enabled and randomised colour.</div>

		<pre>[property:Array morphTargetInfluences]</pre>

		<div>
		An array of weights typically from 0-1 that specify how much of the morph is applied.
		Undefined by default, but reset to a blank array by [page:Mesh.updateMorphTargets updateMorphTargets].
		</div>

		<pre>[property:Array morphTargetDictionary]</pre>

		<div>
		A dictionary of morphTargets based on the morphTarget.name property.
		Undefined by default, but rebuilt [page:Mesh.updateMorphTargets updateMorphTargets].
		</div>

		<pre>[property:Integer drawMode]</pre>

		<div>
		Determines how the mesh triangles are constructed from the vertices. See the draw mode [page:DrawModes constants] for all possible values. Default is [page:DrawModes TrianglesDrawMode].
		</div>

  <h4>Методы</h4>

		<pre>[method:null updateMorphTargets]()</pre>
		<div>
		Updates the morphtargets to have no influence on the object. Resets the
		[page:Mesh.morphTargetInfluences morphTargetInfluences],
		[page:Mesh.morphTargetDictionary morphTargetDictionary], and
		[page:Mesh.morphTargetBase morphTargetBase] properties.
		</div>

		<pre>[method:Array raycast]( [page:Raycaster raycaster], [page:Array intersects] )</pre>
		<div>
		Get intersections between a casted ray and this mesh. [page:Raycaster.intersectObject] will call this method.
		</div>

		<pre>[method:Mesh clone]()</pre>
		<div>
		Returns a clone of this Mesh object and its descendants.
		</div>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/objects/Mesh.js" target="_blank">Mesh.js на github.com</a></div><br><br>


<span class="right_side"><a href="core.htm#8" title="Переход к родительскому классу"><tt>Object3D &rarr;</tt></a></span>
<h3 id="8">Points</h3>

		<div class="desc">A class for displaying points. For example, if using the [page:WebGLRenderer], the points are displayed using GL_POINTS.</div>


  <h4>Конструктор</h4>

		<pre>Points( [page:Geometry geometry], [page:Material material] )</pre>

		<div>
		geometry — An instance of [page:Geometry].<br>
		material — An instance of [page:Material] (optional).
		</div>


  <h4>Свойства</h4>

		<pre>[property:Geometry geometry]</pre>

		<div>An instance of [page:Geometry], where each vertex designates the position the points.</div>

		<pre>[property:Material material]</pre>

		<div>An instance of [page:Material], defining the object's appearance. Default is a [page:PointsMaterial] with randomised colour.</div>


  <h4>Методы</h4>

		<pre>[method:Array raycast]( [page:Raycaster raycaster], [page:Array intersects] )</pre>
		<div>
		Get intersections between a casted ray and this Points. [page:Raycaster.intersectObject] will call this method.
		</div>

		<pre>[method:Points clone]()</pre>
		<div>
		Returns a clone of this Points object and its descendants.
		</div>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/objects/Points.js" target="_blank">Points.js на github.com</a></div><br><br>


<h3 id="9">Skeleton</h3>
Use an array of [page:Bone bones] to create a skeleton that can be used by a [page:SkinnedMesh]. WebGL only.

<h4>Пример</h4>
<pre>// Create a simple "arm"<br>
var bones = [];<br>
var shoulder = new THREE.Bone();
var elbow = new THREE.Bone();
var hand = new THREE.Bone();<br>
shoulder.add( elbow );
elbow.add( hand );<br>
bones.push( shoulder );
bones.push( elbow );
bones.push( hand );<br>
shoulder.position.y = -5;
elbow.position.y = 0;
hand.position.y = 5;<br>
var armSkeleton = new THREE.Skeleton( bones );<br>
// See THREE.SkinnedMesh for an example of usage with a mesh</pre>

<h4>Конструктор</h4>
<pre>Skeleton( [page:Array bones], [page:Array boneInverses], [page:Boolean useVertexTexture]  )</pre>
<div class=blockindent><tt>bones</tt> — The array of [page:bone bones]<br/>
boneInverses — (optional) An array of [page:Matrix4 Matrix4s]<br/>
useVertexTexture — (optional) Whether or not to use a vertex texture in the shader.</div>
The constructor automatically sets up all of the properties below.

<h4>Свойства</h4>
<pre>[property:Array bones]</pre>
The array of [page:bone bones]

<pre>[property:Boolean useVertexTexture]</pre>
Whether or not to use a vertex texture in the shader, set in the constructor. Not all devices
		support floating point pixel textures. If this option is set then the bone matrices will be packed into
		a texture and sent to the shader. This method allows a much larger set of bones to be used. Otherwise
		the vertex shader will use uniforms, which do not allow for as many bones to be used. The exact
		numbers vary between devices.


<pre>[property:Array boneInverses]</pre>
An array of [page:Matrix4 Matrix4s] that represent the inverse of the matrixWorld of the individual bones.

<pre>[property:Integer boneTextureWidth]</pre>
The width of the vertex data texture.

<pre>[property:Integer boneTextureHeight]</pre>
The height of the vertex data texture.

<pre>[property:Float32Array boneMatrices]</pre>
The array buffer holding the bone data when using a vertex texture.

<pre>[property:DataTexture boneTexture]</pre>
The [page:DataTexture] holding the bone data when using a vertex texture.

<h4>Методы</h4>
<pre>[method:null calculateInverses]()</pre>
Generates the boneInverses.

<pre>[method:null pose]()</pre>
Returns the skeleton to the base pose.

<pre>[method:null update]()</pre>
Updates the [page:Float32Array boneMatrices] and [page:DataTexture boneTexture] after changing the bones.
		This is called automatically by the [page:WebGLRenderer] if the skeleton is used with a [page:SkinnedMesh].

<pre>[method:Skeleton clone]()</pre>
Returns a clone of this Skeleton object.

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/objects/Skeleton.js" target="_blank">Skeleton.js на github.com</a></div><br><br>


<span class="right_side"><a href="core.htm#8" title="Переход к родительскому классу"><tt>Object3D &rarr;</tt></a></span>
<h3 id="10">SkinnedMesh</h3>
A mesh that has a [page:Skeleton] with [page:Bone bones] that can then be used to animate the vertices of the geometry.

<!-- 		<iframe id="scene" src="scenes/bones-browser.html"></iframe> -->

<h4>Пример</h4>
<pre>var geometry = new THREE.CylinderGeometry( 5, 5, 5, 5, 15, 5, 30 );<br>
//Create the skin indices and skin weights
for ( var i = 0; i &lt; geometry.vertices.length; i ++ ) {<br>
  // Imaginary functions to calculate the indices and weights
  // This part will need to be changed depending your skeleton and model
  var skinIndex = calculateSkinIndex( geometry.vertices, i );
  var skinWeight = calculateSkinWeight( geometry.vertices, i );<br>
  // Ease between each bone
  geometry.skinIndices.push( new THREE.Vector4( skinIndex, skinIndex + 1, 0, 0 ) );
  geometry.skinWeights.push( new THREE.Vector4( 1 - skinWeight, skinWeight, 0, 0 ) );<br>
}<br>
var mesh = THREE.SkinnedMesh( geometry, material );<br>
// See example from THREE.Skeleton for the armSkeleton
var rootBone = armSkeleton.bones[ 0 ];
mesh.add( rootBone );<br>
// Bind the skeleton to the mesh
mesh.bind( armSkeleton );<br>
// Move the bones and manipulate the model
armSkeleton.bones[ 0 ].rotation.x = -0.1;
armSkeleton.bones[ 1 ].rotation.x = 0.2;</pre>

<h4>Конструктор</h4>
<pre>SkinnedMesh( [page:Geometry geometry], [page:Material material], [page:boolean useVertexTexture] )</pre>
<div class=blockindent><tt>geometry</tt> — An instance of [page:Geometry]. [page:Geometry.skinIndices] and [page:Geometry.skinWeights] should be set.<br>
        material — An instance of [page:Material] (optional).<br>
		useVertexTexture -- Defines whether a vertex texture can be used (optional).</div>

<h4>Свойства</h4>
<pre>[property:array bones]</pre>
This contains the array of bones for this mesh. These should be set in the constructor.

<pre>[property:Matrix4 identityMatrix]</pre>
This is an identityMatrix to calculate the bones matrices from.

<pre>[property:boolean useVertexTexture]</pre>
The boolean defines whether a vertex texture is used to calculate the bones. This boolean shouldn't be changed after constructor.

<pre>[property:array boneMatrices]</pre>
This array of matrices contains the matrices of the bones. These get calculated in the constructor.

<pre>[property:string bindMode]</pre>
Either "attached" or "detached". "attached" uses the [page:SkinnedMesh.matrixWorld] property for the base transform matrix of the bones. "detached" uses the [page:SkinnedMesh.bindMatrix].

<pre>[property:Matrix4 bindMatrix]</pre>
The base matrix that is used for the bound bone transforms.

<pre>[property:Matrix4 inverseBindMatrix]</pre>
The inverse of the bindMatrix.

<h4>Методы</h4>
<div class=blockindent><br>
<pre>[method:null bind]( [page:Skeleton skeleton], [page:Matrix4 bindMatrix] )</pre>
<div class=list><tt>skeleton</tt> — [page:Skeleton]</div>
<div class=list>bindMatrix — [page:Matrix4] that represents the base transform of the skeleton</div>
Bind a skeleton to the skinned mesh. The bindMatrix gets saved to .bindMatrix property and the .bindMatrixInverse gets calculated.

<pre>[method:null normalizeSkinWeights]()</pre>
Normalizes the [page:Geometry.skinWeights] vectors. Does not affect [page:BufferGeometry].

<pre>[method:null pose]()</pre>
This method sets the skinned mesh in the rest pose.

<pre>[method:Bone addBone]( [page:Bone bone] )</pre>
<div class=list><tt>bone</tt> — This is the bone that needs to be added. (optional)</div>
This method adds the bone to the skinned mesh when it is provided. It creates a new bone and adds that when no bone is given.

<pre>[method:SkinnedMesh clone]()</pre>
Returns a clone of this SkinnedMesh object and its descendants.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/objects/SkinnedMesh.js" target="_blank">SkinnedMesh.js на github.com</a></div><br><br>


<span class="right_side"><a href="core.htm#8" title="Переход к родительскому классу"><tt>Object3D &rarr;</tt></a></span>
<h3 id="11">Sprite</h3>
Спрайт это плоскость на трехмерной сцене, которая всегда стоит перед камерой.<br>
Спрайты не отбрасывают тени, так что установка <tt>castShadow = true</tt> не даст никакого эффекта.

<h4>Пример</h4>
<pre>var map = new THREE.TextureLoader().load( "sprite.png" );
  var material = new THREE.SpriteMaterial( { map: map, color: 0xffffff, fog: true } );
  var sprite = new THREE.Sprite( material );
  scene.add( sprite );</pre>

<h4>Конструктор</h4>
<pre>Sprite( <a href="materials.htm#3" title="Material">material</a> )</pre>
<div class=blockindent><tt>material</tt> — экземпляр <tt><a href="materials.htm#3" title="Material">Material</a></tt> (дополнительный, необязательный аргумент).</div>
Создает новый объект <tt>Sprite</tt> с указанным материалом <tt>material</tt>.<br><br>

<h4>Свойства</h4>
<div class=blockindent><br>
<pre>[property:SpriteMaterial material]</pre>
An instance of [page:Material], defining the object's appearance. Значение по умолчанию равно [page:SpriteMaterial], который является белой плоскостью.</div><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre>[method:Sprite clone]()</pre>
Возвращает клон данного объекта Sprite и его потомков.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/objects/Sprite.js" target="_blank">Sprite.js на github.com</a></div><br><br>

<br><br>
</body></html>
