<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
<title>Three.js</title>
<link rel="stylesheet" type="text/css" href="1.css">
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<object id=hhctrl classid="clsid:ADB880A6-D8FF-11CF-9377-00AA003B7A11" width=0 height=0 vspace=0 hspace=0 border=0 type="application/x-oleobject"></object>
<script type="text/javascript" src="1.js"></script>
</head>
<body>
<h2 class=head1>Справочник разработчика</h2>
<h2 id="1">Полифиллы</h2>
<div class=note_trans>«Полифилл» (англ. «polyfill» - poly - много, fill - наполнять, заполнять)<br><a class='link' onclick='javascript:spoiler(this)'>... читать далее</a>
<div style='display:none;'> — это библиотека, которая добавляет в старые браузеры поддержку возможностей, которые в современных браузерах являются встроенными.
Или, если говорить о современных браузерах, то они тоже не все идут «в ногу», всегда какие-то современные возможности реализуются сначала в одном, потом в другом.
Так вот, первая часть слова говорит о привлечении любого числа технологий, то есть с поставленной задачей можно справиться не только посредством JavaScript, а вторая часть подразумевает заполнение той «дыры» браузера, в которой и должна находиться реализуемая таким образом технология.<br><br>
Полифиллы позволяют исправлять ошибки в конкретном API или добавлять в веб-браузер функционал, который по умолчанию частично или полностью им не поддерживается. Полифиллы не создают лишних зависимостей и могут быть легко удалены, когда они больше не нужны.<br>
Обычно полифилл состоит из двух частей:
<div class=blockindent>Проверка, есть ли встроенная возможность.<br>Эмуляция, если её нет.</div>
По мнению <a class=popupspot href="JavaScript:hhctrl.TextPopup('Термин был придуман Реми Шарпом (англ. Remy Sharp) в 2009 году во время работы над книгой «Введение в HTML5»','Arial,9',10,10,0xffffff,0xd69967)">автора термина</a>,
ассоциация с заделыванием трещин и дыр в стенах вполне подходит для визуализации того, как полифиллы в веб-программировании «ремонтируют» браузер.</div></div>
В <em>three.js</em> включены полифиллы для следующих функций и констант.
<div class=blockindent><br>
<pre id="1Number.EPSILON"><a href="#" title="Number.EPSILON">Number.EPSILON</a></pre>
Разница между единицей и наименьшим значением, большим единицы, которую можно представить в виде числа.<br>
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON" target="_blank">Справка MDN (Mozilla Developer Network - сеть разработчиков Mozilla)</a>,<br>
<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON" target="_blank">то же и там же, но на русском языке</a>.<br><br>

<pre id="1Math.sign"><a href="#" title="Math.sign">Math.sign</a>( <a class=popupspot href="JavaScript:hhctrl.TextPopup(type_number,'Arial,9',10,10,0xffffff,0xd69967)">x</a> )</pre>
Если аргумент является положительным числом, отрицательным числом, положительным нулем или отрицательным нулем, функция возвратит соответственно <tt>1</tt>, <tt>-1</tt>, <tt>0</tt> или <tt>-0</tt>.
В противном случае возвращается значение <tt><a class=popupspot href="JavaScript:hhctrl.TextPopup('от англ. Not-a-Number - «нечисло»','Arial,9',10,10,0xffffff,0xd69967)">NaN</a></tt>.<br>
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign" target="_blank">Справка MDN (Mozilla Developer Network - сеть разработчиков Mozilla)</a>,<br>
<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Math/sign" target="_blank">то же и там же, но на русском языке</a>.<br><br>

<pre id="1Function.prototype.name"><a href="#" title="Function.prototype.name">Function.prototype.name</a>( <a class=popupspot href="JavaScript:hhctrl.TextPopup(type_number,'Arial,9',10,10,0xffffff,0xd69967)">x</a> )</pre>
Возвращает имя функции или (до внедрения ES6) пустую строку для безымянных функций.<br>
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name" target="_blank">Справка MDN (Mozilla Developer Network - сеть разработчиков Mozilla)</a>,<br>
<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/name" target="_blank">то же и там же, но на русском языке</a>.<br><br>

<pre id="1Object.assign">[page:Object.assign Object.assign</a>( [page:Object target</a>, [page:Object ...sources</a> )</pre>
Метод <tt>Object.assign()</tt> используется для копирования значений всех имеющихся перечислимых свойств одного или нескольких исходных объектов в целевой объект (target). Метод возвратит целевой объект.<br>
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank">Справка MDN (Mozilla Developer Network - сеть разработчиков Mozilla)</a>,<br>
<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank">то же и там же, но на русском языке</a>.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="src/polyfills.js.txt">Polyfills.js в этом справочнике</a><br>
<a href="https://github.com/mrdoob/three.js/blob/master/src/polyfills.js" target="_blank">Polyfills.js на github.com</a></div><br>

<h2 id="2">WebGLRenderer</h2>
<h3 id="2.1">WebGLProgram</h3>
Constructor for the GLSL program sent to vertex and fragment shaders, including default uniforms and attributes.

<h4>Built-in uniforms and attributes</h4>

<h5>Vertex shader (unconditional):</h5>
<pre>// = object.matrixWorld
uniform mat4 modelMatrix;<br>
// = camera.matrixWorldInverse * object.matrixWorld
uniform mat4 modelViewMatrix;<br>
// = camera.projectionMatrix
uniform mat4 projectionMatrix;<br>
// = camera.matrixWorldInverse
uniform mat4 viewMatrix;<br>
// = inverse transpose of modelViewMatrix
uniform mat3 normalMatrix;<br>
// = camera position in world space
uniform vec3 cameraPosition;</pre><br>
<pre>// default vertex attributes provided by Geometry and BufferGeometry
attribute vec3 position;
attribute vec3 normal;
attribute vec2 uv;
attribute vec2 uv2;</pre>

Note that you can therefore calculate the position of a vertex in the vertex shader by:
<pre>gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );</pre>
or alternatively
<pre>gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4( position, 1.0 );</pre>

<h3>Vertex shader (conditional):</h3>
<pre>#ifdef USE_COLOR
	// vertex color attribute
	attribute vec3 color;
#endif</pre><br>
<pre>#ifdef USE_MORPHTARGETS<br>
	attribute vec3 morphTarget0;
	attribute vec3 morphTarget1;
	attribute vec3 morphTarget2;
	attribute vec3 morphTarget3;<br>
	#ifdef USE_MORPHNORMALS<br>
		attribute vec3 morphNormal0;
		attribute vec3 morphNormal1;
		attribute vec3 morphNormal2;
		attribute vec3 morphNormal3;<br>
	#else<br>
		attribute vec3 morphTarget4;
		attribute vec3 morphTarget5;
		attribute vec3 morphTarget6;
		attribute vec3 morphTarget7;<br>
	#endif
#endif</pre>
<pre>#ifdef USE_SKINNING
	attribute vec4 skinIndex;
	attribute vec4 skinWeight;
#endif</pre>

<h3>Fragment shader:</h3>
<pre>uniform mat4 viewMatrix;
uniform vec3 cameraPosition;</pre>


<h4>Конструктор</h4>
<pre>WebGLProgram( <a href="renderers.htm#1" title="WebGLRenderer">renderer</a>, [page:Object code</a>, [page:Material material</a>, [page:Object parameters</a> )</pre>
Параметры смотрите в описании <a href="renderers.htm#1" title="WebGLRenderer">WebGLRenderer</a>.

<h4>Свойства</h4>
<div class=blockindent>
<pre id="2id"><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_string,'Arial,9',10,10,0xffffff,0xd69967)">id</a></pre>

<pre id="2code"><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_string,'Arial,9',10,10,0xffffff,0xd69967)">code</a></pre>

<pre id="2usedTimes"><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_int,'Arial,9',10,10,0xffffff,0xd69967)">usedTimes</a></pre>

<pre id="2program"><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_obj,'Arial,9',10,10,0xffffff,0xd69967)">program</a></pre>

<pre id="2vertexShader">[property:WebGLShader vertexShader</a></pre>

<pre id="2fragmentShader">[property:WebGLShader fragmentShader</a></pre>
</div>

<h4>Методы</h4>
<div class=blockindent>
<pre id="2getUniforms"><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_obj,'Arial,9',10,10,0xffffff,0xd69967)">getUniforms</a>()</pre>
Returns a name-value mapping of all active uniform locations.

<pre id="2getAttributes"><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_obj,'Arial,9',10,10,0xffffff,0xd69967)">getAttributes</a>()</pre>
Returns a name-value mapping of all active vertex attribute locations.</div>

<h4>Исходники</h4>
[link:https://github.com/mrdoob/three.js/blob/master/src/[path].js src/[path].js]


<h3 id="2.2">WebGLShader</h3>
A lower level function to compile either a vertex or fragment shader.

<h4>Пример</h4>

<pre>var gl = renderer.context;<br>
var glVertexShader = new THREE.WebGLShader( gl, gl.VERTEX_SHADER, vertexSourceCode );
var glFragmentShader = new THREE.WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentSourceCode );<br>
var program = gl.createProgram();<br>
gl.attachShader( program, glVertexShader );
gl.attachShader( program, glFragmentShader );<br>
gl.linkProgram( program );</pre>

<h4>Функция</h4>
<div class=blockindent>
<pre>[page:WebGLShader objects</a>([page:WebGLContext gl</a>, [page:WebGLEnum type</a>, [page:String source</a>)</pre>
<div class=blockindent><tt>gl</tt> -- текущий контекст WebGL<br>
<tt>type</tt> -- тип WebGL, либо <tt>gl.VERTEX_SHADER</tt>, либо <tt>gl.FRAGMENT_SHADER</tt><br>
<tt>source</tt> -- исходный код для шейдера</div>

This will compile an individual shader, but won't link it to be a complete [page:WebGLProgram]. Note: this is a function so the new operator should not be used.</div>

<h4>Исходники</h4>
[link:https://github.com/mrdoob/three.js/blob/master/src/[path].js src/[path].js]


<h3 id="2.3">WebGLState</h3>

<h4>Методы</h4>
<div class=blockindent>
<pre>[method:null enable</a>( [page:integer id</a>, [page:boolean boolean</a> )</pre>
TODO

<pre>[method:null disable]( [page:integer id], [page:boolean boolean] )</pre>
TODO

<pre>[method:null setDepthTest]( [page:boolean depthTest] )</pre>
<div class=blockindent><tt>depthTest</tt> -- The boolean to decide if depth of a fragment needs to be tested against the depth buffer.</div>
This sets, based on depthTest, whether or not the depth data needs to be tested against the depth buffer.

<pre>[method:null setDepthWrite]( [page:boolean depthWrite] )</pre>
<div class=blockindent><tt>depthWrite</tt> -- The boolean to decide if depth of a fragment needs to be kept.</div>
This sets, based on depthWrite, whether or not the depth data needs to be written in the depth buffer.

<pre>[method:null setBlending]( [page:number blending], [page:number blendEquation], [page:number blendSrc], [page:number blendDst] )</pre>
<div class=indent1><tt>blending</tt> -- A number indicating the blending mode. Possible value are THREE.NoBlending, THREE.NormalBlending, THREE.AdditiveBlending, THREE.SubtractiveBlending, THREE.MultiplyBlending or THREE.CustomBlending </div>
<div class=indent1><tt>blendEquation</tt> -- When blending is THREE.CustomBlending, then you can set the blendEquation. Possible values are THREE.AddEquation, THREE.SubtractEquation or THREE.ReverseSubtractEquation.</div>
<div class=indent1><tt>blendSrc</tt> -- When blending is THREE.CustomBlending, then you can set the blendSrc. Possible values are THREE.ZeroFactor, THREE.OneFactor,THREE.SrcColorFactor, THREE.OneMinusSrcColorFactor, THREE.SrcAlphaFactor, THREE.OneMinusSrcAlphaFactor, THREE.DstAlphaFactor, THREE.OneMinusDstAlphaFactor, THREE.DstColorFactor,THREE.OneMinusDstColorFactor or THREE.SrcAlphaSaturateFactor</div>
<div class=indent1><tt>blendDst</tt> -- When blending is THREE.CustomBlending, then you can set the blendDst. Possible values are THREE.ZeroFactor, THREE.OneFactor,THREE.SrcColorFactor, THREE.OneMinusSrcColorFactor, THREE.SrcAlphaFactor, THREE.OneMinusSrcAlphaFactor, THREE.DstAlphaFactor, THREE.OneMinusDstAlphaFactor, THREE.DstColorFactor,THREE.OneMinusDstColorFactor or THREE.SrcAlphaSaturateFactor</div>

This method sets the correct blending.</div>

<h4>Исходники</h4>
[link:https://github.com/mrdoob/three.js/blob/master/src/[path].js src/[path].js]

<h2 id="3">Плагины WebGLRenderer</h2>
<h3 id="3.1">LensFlarePlugin</h3>
The Webglrenderer plugin class that allows lensflares to be rendered in the WebglRenderer. Этот плагин автоматически загружен в  Webglrenderer.

<h4>Конструктор</h4>
<pre>LensFlarePlugin()</pre>
Создает новый <tt>LensFlarePlugin</tt>.

<h4>Методы</h4>
<div class=blockindent>
<pre id="5render"><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_null,'Arial,9',10,10,0xffffff,0xd69967)" title="render - показать, отобразить">.render</a>( <a href="scenes.htm#3" title="scene - сцена, картина">scene</a>, <a href="cameras.htm#1" title="camera - камера">camera</a>, <a class=popupspot href="JavaScript:hhctrl.TextPopup(type_number,'Arial,9',10,10,0xffffff,0xd69967)" title="viewport width - ширина окна просмотра">viewportWidth</a>, <a class=popupspot href="JavaScript:hhctrl.TextPopup(type_number,'Arial,9',10,10,0xffffff,0xd69967)" title="viewport height - высота окна просмотра">viewportHeight</a> )</pre>
<div class=blockindent><tt>scene</tt> -- The scene to render. <br>
<tt>camera</tt> -- The camera to render. <br>
<tt>viewportWidth</tt> -- ширина окна просмотра The width of the viewport. <br>
<tt>viewportHeight</tt> -- высота окна просмотра The height of the viewport.</div>
Renders the lensflares defined in the scene. This gets automatically called as post render function to draw the lensflares.</div>

<h4>Исходники</h4>
<div class=blockindent><a href="src/renderers/webgl/plugins/LensFlarePlugin.js.txt">LensFlarePlugin.js в этом справочнике</a><br>
<a href="https://github.com/mrdoob/three.js/blob/master/src/renderers/webgl/plugins/LensFlarePlugin.js" target="_blank">LensFlarePlugin.js на github.com</a></div><br>


<h3 id="3.2">SpritePlugin</h3>
The Webglrenderer plugin class that allows Sprites to be rendered in the WebglRenderer. This plugin is automatically loaded in the Webglrenderer.

<h4>Конструктор</h4>
<pre>SpritePlugin()</pre>
Создает новый <tt>SpritePlugin</tt>.

<h4>Методы</h4>
<div class=blockindent>
<pre id="6render"><a class=popupspot href="JavaScript:hhctrl.TextPopup(type_null,'Arial,9',10,10,0xffffff,0xd69967)" title="render - показать, отобразить">.render</a>( <a href="scenes.htm#3" title="scene - сцена, картина">scene</a>, <a href="cameras.htm#1" title="camera - камера">camera</a> )</pre>
<div class=blockindent><tt>scene</tt> -- The scene to render.<br>
<tt>camera</tt> -- The camera to render.</div>
Renders the sprites defined in the scene. This gets automatically called as post-render function to draw the lensflares.</div>

<h4>Исходники</h4>
<div class=blockindent><a href="src/renderers/webgl/plugins/SpritePlugin.js.txt">SpritePlugin.js в этом справочнике</a><br>
<a href="https://github.com/mrdoob/three.js/blob/master/src/renderers/webgl/plugins/SpritePlugin.js" target="_blank">SpritePlugin.js на github.com</a></div><br>

<br><br>
</body></html>